<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="9953"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.32%)</title><rect x="0.0000%" y="485" width="0.3215%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="32"/><text x="0.2500%" y="495.50"></text></g><g><title>rlox::vm::VM::call_closure (32 samples, 0.32%)</title><rect x="0.3215%" y="485" width="0.3215%" height="15" fill="rgb(217,0,24)" fg:x="32" fg:w="32"/><text x="0.5715%" y="495.50"></text></g><g><title>[[heap]] (147 samples, 1.48%)</title><rect x="0.0000%" y="501" width="1.4769%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="147"/><text x="0.2500%" y="511.50"></text></g><g><title>rlox::vm::VM::push (83 samples, 0.83%)</title><rect x="0.6430%" y="485" width="0.8339%" height="15" fill="rgb(248,212,6)" fg:x="64" fg:w="83"/><text x="0.8930%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (89 samples, 0.89%)</title><rect x="1.4769%" y="485" width="0.8942%" height="15" fill="rgb(208,68,35)" fg:x="147" fg:w="89"/><text x="1.7269%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (140 samples, 1.41%)</title><rect x="2.3711%" y="485" width="1.4066%" height="15" fill="rgb(232,128,0)" fg:x="236" fg:w="140"/><text x="2.6211%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (66 samples, 0.66%)</title><rect x="3.7778%" y="485" width="0.6631%" height="15" fill="rgb(207,160,47)" fg:x="376" fg:w="66"/><text x="4.0278%" y="495.50"></text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (72 samples, 0.72%)</title><rect x="4.4409%" y="485" width="0.7234%" height="15" fill="rgb(228,23,34)" fg:x="442" fg:w="72"/><text x="4.6909%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (80 samples, 0.80%)</title><rect x="5.1643%" y="485" width="0.8038%" height="15" fill="rgb(218,30,26)" fg:x="514" fg:w="80"/><text x="5.4143%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (199 samples, 2.00%)</title><rect x="5.9680%" y="485" width="1.9994%" height="15" fill="rgb(220,122,19)" fg:x="594" fg:w="199"/><text x="6.2180%" y="495.50">c..</text></g><g><title>rlox::vm::VM::close_upvalues (79 samples, 0.79%)</title><rect x="7.9674%" y="485" width="0.7937%" height="15" fill="rgb(250,228,42)" fg:x="793" fg:w="79"/><text x="8.2174%" y="495.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (48 samples, 0.48%)</title><rect x="8.7612%" y="485" width="0.4823%" height="15" fill="rgb(240,193,28)" fg:x="872" fg:w="48"/><text x="9.0112%" y="495.50"></text></g><g><title>rlox::vm::VM::push (132 samples, 1.33%)</title><rect x="9.2434%" y="485" width="1.3262%" height="15" fill="rgb(216,20,37)" fg:x="920" fg:w="132"/><text x="9.4934%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (55 samples, 0.55%)</title><rect x="12.5088%" y="469" width="0.5526%" height="15" fill="rgb(206,188,39)" fg:x="1245" fg:w="55"/><text x="12.7588%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (44 samples, 0.44%)</title><rect x="13.0614%" y="469" width="0.4421%" height="15" fill="rgb(217,207,13)" fg:x="1300" fg:w="44"/><text x="13.3114%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (44 samples, 0.44%)</title><rect x="13.0614%" y="453" width="0.4421%" height="15" fill="rgb(231,73,38)" fg:x="1300" fg:w="44"/><text x="13.3114%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::CallFrame&gt; (2 samples, 0.02%)</title><rect x="13.5035%" y="469" width="0.0201%" height="15" fill="rgb(225,20,46)" fg:x="1344" fg:w="2"/><text x="13.7535%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;rlox::object::ObjClosure&gt;&gt; (2 samples, 0.02%)</title><rect x="13.5035%" y="453" width="0.0201%" height="15" fill="rgb(210,31,41)" fg:x="1344" fg:w="2"/><text x="13.7535%" y="463.50"></text></g><g><title>rlox::vm::VM::invoke (19 samples, 0.19%)</title><rect x="13.5236%" y="469" width="0.1909%" height="15" fill="rgb(221,200,47)" fg:x="1346" fg:w="19"/><text x="13.7736%" y="479.50"></text></g><g><title>[[stack]] (1,232 samples, 12.38%)</title><rect x="1.4769%" y="501" width="12.3782%" height="15" fill="rgb(226,26,5)" fg:x="147" fg:w="1232"/><text x="1.7269%" y="511.50">[[stack]]</text></g><g><title>rlox::vm::VM::run (327 samples, 3.29%)</title><rect x="10.5697%" y="485" width="3.2854%" height="15" fill="rgb(249,33,26)" fg:x="1052" fg:w="327"/><text x="10.8197%" y="495.50">rlo..</text></g><g><title>rlox::vm::VM::popn (14 samples, 0.14%)</title><rect x="13.7145%" y="469" width="0.1407%" height="15" fill="rgb(235,183,28)" fg:x="1365" fg:w="14"/><text x="13.9645%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;rlox::value::Value&gt;&gt; (14 samples, 0.14%)</title><rect x="13.7145%" y="453" width="0.1407%" height="15" fill="rgb(221,5,38)" fg:x="1365" fg:w="14"/><text x="13.9645%" y="463.50"></text></g><g><title>[anon] (17 samples, 0.17%)</title><rect x="13.8551%" y="501" width="0.1708%" height="15" fill="rgb(247,18,42)" fg:x="1379" fg:w="17"/><text x="14.1051%" y="511.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (17 samples, 0.17%)</title><rect x="13.8551%" y="485" width="0.1708%" height="15" fill="rgb(241,131,45)" fg:x="1379" fg:w="17"/><text x="14.1051%" y="495.50"></text></g><g><title>[rlox] (11 samples, 0.11%)</title><rect x="14.0259%" y="501" width="0.1105%" height="15" fill="rgb(249,31,29)" fg:x="1396" fg:w="11"/><text x="14.2759%" y="511.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (11 samples, 0.11%)</title><rect x="14.0259%" y="485" width="0.1105%" height="15" fill="rgb(225,111,53)" fg:x="1396" fg:w="11"/><text x="14.2759%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.55%)</title><rect x="14.1364%" y="485" width="0.5526%" height="15" fill="rgb(238,160,17)" fg:x="1407" fg:w="55"/><text x="14.3864%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.69%)</title><rect x="14.6890%" y="485" width="0.6933%" height="15" fill="rgb(214,148,48)" fg:x="1462" fg:w="69"/><text x="14.9390%" y="495.50"></text></g><g><title>core::mem::drop (7 samples, 0.07%)</title><rect x="15.3120%" y="469" width="0.0703%" height="15" fill="rgb(232,36,49)" fg:x="1524" fg:w="7"/><text x="15.5620%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (7 samples, 0.07%)</title><rect x="15.3120%" y="453" width="0.0703%" height="15" fill="rgb(209,103,24)" fg:x="1524" fg:w="7"/><text x="15.5620%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (7 samples, 0.07%)</title><rect x="15.3120%" y="437" width="0.0703%" height="15" fill="rgb(229,88,8)" fg:x="1524" fg:w="7"/><text x="15.5620%" y="447.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (28 samples, 0.28%)</title><rect x="15.3823%" y="485" width="0.2813%" height="15" fill="rgb(213,181,19)" fg:x="1531" fg:w="28"/><text x="15.6323%" y="495.50"></text></g><g><title>[unknown] (239 samples, 2.40%)</title><rect x="14.1364%" y="501" width="2.4013%" height="15" fill="rgb(254,191,54)" fg:x="1407" fg:w="239"/><text x="14.3864%" y="511.50">[u..</text></g><g><title>rlox::vm::VM::push (87 samples, 0.87%)</title><rect x="15.6636%" y="485" width="0.8741%" height="15" fill="rgb(241,83,37)" fg:x="1559" fg:w="87"/><text x="15.9136%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (130 samples, 1.31%)</title><rect x="26.7658%" y="245" width="1.3061%" height="15" fill="rgb(233,36,39)" fg:x="2664" fg:w="130"/><text x="27.0158%" y="255.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&lt;&amp;f64&gt;&gt;::add (51 samples, 0.51%)</title><rect x="27.5595%" y="229" width="0.5124%" height="15" fill="rgb(226,3,54)" fg:x="2743" fg:w="51"/><text x="27.8095%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (51 samples, 0.51%)</title><rect x="27.5595%" y="213" width="0.5124%" height="15" fill="rgb(245,192,40)" fg:x="2743" fg:w="51"/><text x="27.8095%" y="223.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::bit::Not&gt;::not (14 samples, 0.14%)</title><rect x="28.0719%" y="245" width="0.1407%" height="15" fill="rgb(238,167,29)" fg:x="2794" fg:w="14"/><text x="28.3219%" y="255.50"></text></g><g><title>&lt;&amp;bool as core::ops::bit::Not&gt;::not (9 samples, 0.09%)</title><rect x="28.1222%" y="229" width="0.0904%" height="15" fill="rgb(232,182,51)" fg:x="2799" fg:w="9"/><text x="28.3722%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (24 samples, 0.24%)</title><rect x="28.2126%" y="245" width="0.2411%" height="15" fill="rgb(231,60,39)" fg:x="2808" fg:w="24"/><text x="28.4626%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (24 samples, 0.24%)</title><rect x="28.2126%" y="229" width="0.2411%" height="15" fill="rgb(208,69,12)" fg:x="2808" fg:w="24"/><text x="28.4626%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (23 samples, 0.23%)</title><rect x="28.2226%" y="213" width="0.2311%" height="15" fill="rgb(235,93,37)" fg:x="2809" fg:w="23"/><text x="28.4726%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (23 samples, 0.23%)</title><rect x="28.2226%" y="197" width="0.2311%" height="15" fill="rgb(213,116,39)" fg:x="2809" fg:w="23"/><text x="28.4726%" y="207.50"></text></g><g><title>core::mem::replace (23 samples, 0.23%)</title><rect x="28.2226%" y="181" width="0.2311%" height="15" fill="rgb(222,207,29)" fg:x="2809" fg:w="23"/><text x="28.4726%" y="191.50"></text></g><g><title>core::ptr::write (23 samples, 0.23%)</title><rect x="28.2226%" y="165" width="0.2311%" height="15" fill="rgb(206,96,30)" fg:x="2809" fg:w="23"/><text x="28.4726%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (54 samples, 0.54%)</title><rect x="28.4537%" y="245" width="0.5425%" height="15" fill="rgb(218,138,4)" fg:x="2832" fg:w="54"/><text x="28.7037%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (54 samples, 0.54%)</title><rect x="28.4537%" y="229" width="0.5425%" height="15" fill="rgb(250,191,14)" fg:x="2832" fg:w="54"/><text x="28.7037%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (54 samples, 0.54%)</title><rect x="28.4537%" y="213" width="0.5425%" height="15" fill="rgb(239,60,40)" fg:x="2832" fg:w="54"/><text x="28.7037%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (142 samples, 1.43%)</title><rect x="28.9963%" y="245" width="1.4267%" height="15" fill="rgb(206,27,48)" fg:x="2886" fg:w="142"/><text x="29.2463%" y="255.50"></text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (370 samples, 3.72%)</title><rect x="30.4230%" y="245" width="3.7175%" height="15" fill="rgb(225,35,8)" fg:x="3028" fg:w="370"/><text x="30.6730%" y="255.50">&lt;rlo..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.38%)</title><rect x="33.7587%" y="229" width="0.3818%" height="15" fill="rgb(250,213,24)" fg:x="3360" fg:w="38"/><text x="34.0087%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (38 samples, 0.38%)</title><rect x="33.7587%" y="213" width="0.3818%" height="15" fill="rgb(247,123,22)" fg:x="3360" fg:w="38"/><text x="34.0087%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="34.1304%" y="197" width="0.0100%" height="15" fill="rgb(231,138,38)" fg:x="3397" fg:w="1"/><text x="34.3804%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="34.1304%" y="181" width="0.0100%" height="15" fill="rgb(231,145,46)" fg:x="3397" fg:w="1"/><text x="34.3804%" y="191.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="34.1304%" y="165" width="0.0100%" height="15" fill="rgb(251,118,11)" fg:x="3397" fg:w="1"/><text x="34.3804%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="34.1304%" y="149" width="0.0100%" height="15" fill="rgb(217,147,25)" fg:x="3397" fg:w="1"/><text x="34.3804%" y="159.50"></text></g><g><title>&lt;rlox::vm::OpCode as core::clone::Clone&gt;::clone (699 samples, 7.02%)</title><rect x="34.1405%" y="245" width="7.0230%" height="15" fill="rgb(247,81,37)" fg:x="3398" fg:w="699"/><text x="34.3905%" y="255.50">&lt;rlox::vm..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (4 samples, 0.04%)</title><rect x="41.1635%" y="245" width="0.0402%" height="15" fill="rgb(209,12,38)" fg:x="4097" fg:w="4"/><text x="41.4135%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (16 samples, 0.16%)</title><rect x="41.3745%" y="229" width="0.1608%" height="15" fill="rgb(227,1,9)" fg:x="4118" fg:w="16"/><text x="41.6245%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (35 samples, 0.35%)</title><rect x="41.2037%" y="245" width="0.3517%" height="15" fill="rgb(248,47,43)" fg:x="4101" fg:w="35"/><text x="41.4537%" y="255.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="41.5352%" y="229" width="0.0201%" height="15" fill="rgb(221,10,30)" fg:x="4134" fg:w="2"/><text x="41.7852%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (2 samples, 0.02%)</title><rect x="41.8668%" y="229" width="0.0201%" height="15" fill="rgb(210,229,1)" fg:x="4167" fg:w="2"/><text x="42.1168%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (47 samples, 0.47%)</title><rect x="41.5553%" y="245" width="0.4722%" height="15" fill="rgb(222,148,37)" fg:x="4136" fg:w="47"/><text x="41.8053%" y="255.50"></text></g><g><title>core::mem::drop (14 samples, 0.14%)</title><rect x="41.8869%" y="229" width="0.1407%" height="15" fill="rgb(234,67,33)" fg:x="4169" fg:w="14"/><text x="42.1369%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjUpvalue&gt;&gt;,alloc::alloc::Global&gt;&gt; (14 samples, 0.14%)</title><rect x="41.8869%" y="213" width="0.1407%" height="15" fill="rgb(247,98,35)" fg:x="4169" fg:w="14"/><text x="42.1369%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.14%)</title><rect x="41.8869%" y="197" width="0.1407%" height="15" fill="rgb(247,138,52)" fg:x="4169" fg:w="14"/><text x="42.1369%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (4 samples, 0.04%)</title><rect x="41.9873%" y="181" width="0.0402%" height="15" fill="rgb(213,79,30)" fg:x="4179" fg:w="4"/><text x="42.2373%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (1 samples, 0.01%)</title><rect x="42.0275%" y="245" width="0.0100%" height="15" fill="rgb(246,177,23)" fg:x="4183" fg:w="1"/><text x="42.2775%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (1 samples, 0.01%)</title><rect x="42.0275%" y="229" width="0.0100%" height="15" fill="rgb(230,62,27)" fg:x="4183" fg:w="1"/><text x="42.2775%" y="239.50"></text></g><g><title>core::cell::BorrowRef::new (1 samples, 0.01%)</title><rect x="42.0275%" y="213" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="4183" fg:w="1"/><text x="42.2775%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (13 samples, 0.13%)</title><rect x="42.0376%" y="245" width="0.1306%" height="15" fill="rgb(244,35,45)" fg:x="4184" fg:w="13"/><text x="42.2876%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (80 samples, 0.80%)</title><rect x="42.1682%" y="245" width="0.8038%" height="15" fill="rgb(251,115,12)" fg:x="4197" fg:w="80"/><text x="42.4182%" y="255.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.57%)</title><rect x="42.3993%" y="229" width="0.5727%" height="15" fill="rgb(240,54,50)" fg:x="4220" fg:w="57"/><text x="42.6493%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (14 samples, 0.14%)</title><rect x="42.8313%" y="213" width="0.1407%" height="15" fill="rgb(233,84,52)" fg:x="4263" fg:w="14"/><text x="43.0813%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (14 samples, 0.14%)</title><rect x="42.8313%" y="197" width="0.1407%" height="15" fill="rgb(207,117,47)" fg:x="4263" fg:w="14"/><text x="43.0813%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (14 samples, 0.14%)</title><rect x="42.8313%" y="181" width="0.1407%" height="15" fill="rgb(249,43,39)" fg:x="4263" fg:w="14"/><text x="43.0813%" y="191.50"></text></g><g><title>core::mem::replace (14 samples, 0.14%)</title><rect x="42.8313%" y="165" width="0.1407%" height="15" fill="rgb(209,38,44)" fg:x="4263" fg:w="14"/><text x="43.0813%" y="175.50"></text></g><g><title>core::ptr::write (14 samples, 0.14%)</title><rect x="42.8313%" y="149" width="0.1407%" height="15" fill="rgb(236,212,23)" fg:x="4263" fg:w="14"/><text x="43.0813%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (37 samples, 0.37%)</title><rect x="42.9720%" y="245" width="0.3717%" height="15" fill="rgb(242,79,21)" fg:x="4277" fg:w="37"/><text x="43.2220%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (37 samples, 0.37%)</title><rect x="42.9720%" y="229" width="0.3717%" height="15" fill="rgb(211,96,35)" fg:x="4277" fg:w="37"/><text x="43.2220%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (37 samples, 0.37%)</title><rect x="42.9720%" y="213" width="0.3717%" height="15" fill="rgb(253,215,40)" fg:x="4277" fg:w="37"/><text x="43.2220%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rlox::value::Value&gt;&gt; (5 samples, 0.05%)</title><rect x="43.3437%" y="245" width="0.0502%" height="15" fill="rgb(211,81,21)" fg:x="4314" fg:w="5"/><text x="43.5937%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (182 samples, 1.83%)</title><rect x="43.3940%" y="245" width="1.8286%" height="15" fill="rgb(208,190,38)" fg:x="4319" fg:w="182"/><text x="43.6440%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (130 samples, 1.31%)</title><rect x="43.9164%" y="229" width="1.3061%" height="15" fill="rgb(235,213,38)" fg:x="4371" fg:w="130"/><text x="44.1664%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.80%)</title><rect x="44.4188%" y="213" width="0.8038%" height="15" fill="rgb(237,122,38)" fg:x="4421" fg:w="80"/><text x="44.6688%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (9 samples, 0.09%)</title><rect x="45.1321%" y="197" width="0.0904%" height="15" fill="rgb(244,218,35)" fg:x="4492" fg:w="9"/><text x="45.3821%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (9 samples, 0.09%)</title><rect x="45.1321%" y="181" width="0.0904%" height="15" fill="rgb(240,68,47)" fg:x="4492" fg:w="9"/><text x="45.3821%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (9 samples, 0.09%)</title><rect x="45.1321%" y="165" width="0.0904%" height="15" fill="rgb(210,16,53)" fg:x="4492" fg:w="9"/><text x="45.3821%" y="175.50"></text></g><g><title>core::mem::replace (9 samples, 0.09%)</title><rect x="45.1321%" y="149" width="0.0904%" height="15" fill="rgb(235,124,12)" fg:x="4492" fg:w="9"/><text x="45.3821%" y="159.50"></text></g><g><title>core::ptr::write (9 samples, 0.09%)</title><rect x="45.1321%" y="133" width="0.0904%" height="15" fill="rgb(224,169,11)" fg:x="4492" fg:w="9"/><text x="45.3821%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::CallFrame&gt; (30 samples, 0.30%)</title><rect x="45.2225%" y="245" width="0.3014%" height="15" fill="rgb(250,166,2)" fg:x="4501" fg:w="30"/><text x="45.4725%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;rlox::object::ObjClosure&gt;&gt; (30 samples, 0.30%)</title><rect x="45.2225%" y="229" width="0.3014%" height="15" fill="rgb(242,216,29)" fg:x="4501" fg:w="30"/><text x="45.4725%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.14%)</title><rect x="45.3833%" y="213" width="0.1407%" height="15" fill="rgb(230,116,27)" fg:x="4517" fg:w="14"/><text x="45.6333%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (14 samples, 0.14%)</title><rect x="45.3833%" y="197" width="0.1407%" height="15" fill="rgb(228,99,48)" fg:x="4517" fg:w="14"/><text x="45.6333%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (14 samples, 0.14%)</title><rect x="45.3833%" y="181" width="0.1407%" height="15" fill="rgb(253,11,6)" fg:x="4517" fg:w="14"/><text x="45.6333%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (14 samples, 0.14%)</title><rect x="45.3833%" y="165" width="0.1407%" height="15" fill="rgb(247,143,39)" fg:x="4517" fg:w="14"/><text x="45.6333%" y="175.50"></text></g><g><title>core::mem::replace (14 samples, 0.14%)</title><rect x="45.3833%" y="149" width="0.1407%" height="15" fill="rgb(236,97,10)" fg:x="4517" fg:w="14"/><text x="45.6333%" y="159.50"></text></g><g><title>core::ptr::write (14 samples, 0.14%)</title><rect x="45.3833%" y="133" width="0.1407%" height="15" fill="rgb(233,208,19)" fg:x="4517" fg:w="14"/><text x="45.6333%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::OpCode&gt; (256 samples, 2.57%)</title><rect x="45.5240%" y="245" width="2.5721%" height="15" fill="rgb(216,164,2)" fg:x="4531" fg:w="256"/><text x="45.7740%" y="255.50">co..</text></g><g><title>rlox::value::Value::as_str (96 samples, 0.96%)</title><rect x="48.0961%" y="245" width="0.9645%" height="15" fill="rgb(220,129,5)" fg:x="4787" fg:w="96"/><text x="48.3461%" y="255.50"></text></g><g><title>rlox::value::Value::is_instance (24 samples, 0.24%)</title><rect x="49.0606%" y="245" width="0.2411%" height="15" fill="rgb(242,17,10)" fg:x="4883" fg:w="24"/><text x="49.3106%" y="255.50"></text></g><g><title>rlox::value::Value::lt (10 samples, 0.10%)</title><rect x="49.3017%" y="245" width="0.1005%" height="15" fill="rgb(242,107,0)" fg:x="4907" fg:w="10"/><text x="49.5517%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (6 samples, 0.06%)</title><rect x="49.3419%" y="229" width="0.0603%" height="15" fill="rgb(251,28,31)" fg:x="4911" fg:w="6"/><text x="49.5919%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (6 samples, 0.06%)</title><rect x="49.3419%" y="213" width="0.0603%" height="15" fill="rgb(233,223,10)" fg:x="4911" fg:w="6"/><text x="49.5919%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.12%)</title><rect x="49.4725%" y="229" width="0.1206%" height="15" fill="rgb(215,21,27)" fg:x="4924" fg:w="12"/><text x="49.7225%" y="239.50"></text></g><g><title>rlox::vm::VM::close_upvalues (25 samples, 0.25%)</title><rect x="49.4022%" y="245" width="0.2512%" height="15" fill="rgb(232,23,21)" fg:x="4917" fg:w="25"/><text x="49.6522%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (6 samples, 0.06%)</title><rect x="49.5931%" y="229" width="0.0603%" height="15" fill="rgb(244,5,23)" fg:x="4936" fg:w="6"/><text x="49.8431%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (6 samples, 0.06%)</title><rect x="49.5931%" y="213" width="0.0603%" height="15" fill="rgb(226,81,46)" fg:x="4936" fg:w="6"/><text x="49.8431%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (6 samples, 0.06%)</title><rect x="49.5931%" y="197" width="0.0603%" height="15" fill="rgb(247,70,30)" fg:x="4936" fg:w="6"/><text x="49.8431%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (6 samples, 0.06%)</title><rect x="49.5931%" y="181" width="0.0603%" height="15" fill="rgb(212,68,19)" fg:x="4936" fg:w="6"/><text x="49.8431%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.35%)</title><rect x="49.6534%" y="229" width="0.3517%" height="15" fill="rgb(240,187,13)" fg:x="4942" fg:w="35"/><text x="49.9034%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (33 samples, 0.33%)</title><rect x="49.6735%" y="213" width="0.3316%" height="15" fill="rgb(223,113,26)" fg:x="4944" fg:w="33"/><text x="49.9235%" y="223.50"></text></g><g><title>rlox::vm::VM::frame (49 samples, 0.49%)</title><rect x="49.6534%" y="245" width="0.4923%" height="15" fill="rgb(206,192,2)" fg:x="4942" fg:w="49"/><text x="49.9034%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (14 samples, 0.14%)</title><rect x="50.0050%" y="229" width="0.1407%" height="15" fill="rgb(241,108,4)" fg:x="4977" fg:w="14"/><text x="50.2550%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.06%)</title><rect x="50.1457%" y="229" width="0.0603%" height="15" fill="rgb(247,173,49)" fg:x="4991" fg:w="6"/><text x="50.3957%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.01%)</title><rect x="50.2060%" y="229" width="0.0100%" height="15" fill="rgb(224,114,35)" fg:x="4997" fg:w="1"/><text x="50.4560%" y="239.50"></text></g><g><title>rlox::vm::VM::frame_mut (9 samples, 0.09%)</title><rect x="50.1457%" y="245" width="0.0904%" height="15" fill="rgb(245,159,27)" fg:x="4991" fg:w="9"/><text x="50.3957%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (2 samples, 0.02%)</title><rect x="50.2160%" y="229" width="0.0201%" height="15" fill="rgb(245,172,44)" fg:x="4998" fg:w="2"/><text x="50.4660%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.28%)</title><rect x="50.4772%" y="229" width="0.2813%" height="15" fill="rgb(236,23,11)" fg:x="5024" fg:w="28"/><text x="50.7272%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (28 samples, 0.28%)</title><rect x="50.4772%" y="213" width="0.2813%" height="15" fill="rgb(205,117,38)" fg:x="5024" fg:w="28"/><text x="50.7272%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="50.7485%" y="197" width="0.0100%" height="15" fill="rgb(237,72,25)" fg:x="5051" fg:w="1"/><text x="50.9985%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="50.7485%" y="181" width="0.0100%" height="15" fill="rgb(244,70,9)" fg:x="5051" fg:w="1"/><text x="50.9985%" y="191.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="50.7485%" y="165" width="0.0100%" height="15" fill="rgb(217,125,39)" fg:x="5051" fg:w="1"/><text x="50.9985%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="50.7485%" y="149" width="0.0100%" height="15" fill="rgb(235,36,10)" fg:x="5051" fg:w="1"/><text x="50.9985%" y="159.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.03%)</title><rect x="50.7586%" y="181" width="0.0301%" height="15" fill="rgb(251,123,47)" fg:x="5052" fg:w="3"/><text x="51.0086%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (18 samples, 0.18%)</title><rect x="50.7586%" y="229" width="0.1808%" height="15" fill="rgb(221,13,13)" fg:x="5052" fg:w="18"/><text x="51.0086%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (18 samples, 0.18%)</title><rect x="50.7586%" y="213" width="0.1808%" height="15" fill="rgb(238,131,9)" fg:x="5052" fg:w="18"/><text x="51.0086%" y="223.50"></text></g><g><title>core::cell::BorrowRef::new (18 samples, 0.18%)</title><rect x="50.7586%" y="197" width="0.1808%" height="15" fill="rgb(211,50,8)" fg:x="5052" fg:w="18"/><text x="51.0086%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (15 samples, 0.15%)</title><rect x="50.7887%" y="181" width="0.1507%" height="15" fill="rgb(245,182,24)" fg:x="5055" fg:w="15"/><text x="51.0387%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (50 samples, 0.50%)</title><rect x="50.9394%" y="229" width="0.5024%" height="15" fill="rgb(242,14,37)" fg:x="5070" fg:w="50"/><text x="51.1894%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.50%)</title><rect x="50.9394%" y="213" width="0.5024%" height="15" fill="rgb(246,228,12)" fg:x="5070" fg:w="50"/><text x="51.1894%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (18 samples, 0.18%)</title><rect x="51.2609%" y="197" width="0.1808%" height="15" fill="rgb(213,55,15)" fg:x="5102" fg:w="18"/><text x="51.5109%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (18 samples, 0.18%)</title><rect x="51.2609%" y="181" width="0.1808%" height="15" fill="rgb(209,9,3)" fg:x="5102" fg:w="18"/><text x="51.5109%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (18 samples, 0.18%)</title><rect x="51.2609%" y="165" width="0.1808%" height="15" fill="rgb(230,59,30)" fg:x="5102" fg:w="18"/><text x="51.5109%" y="175.50"></text></g><g><title>core::mem::replace (18 samples, 0.18%)</title><rect x="51.2609%" y="149" width="0.1808%" height="15" fill="rgb(209,121,21)" fg:x="5102" fg:w="18"/><text x="51.5109%" y="159.50"></text></g><g><title>core::ptr::write (18 samples, 0.18%)</title><rect x="51.2609%" y="133" width="0.1808%" height="15" fill="rgb(220,109,13)" fg:x="5102" fg:w="18"/><text x="51.5109%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (39 samples, 0.39%)</title><rect x="51.4418%" y="229" width="0.3918%" height="15" fill="rgb(232,18,1)" fg:x="5120" fg:w="39"/><text x="51.6918%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (39 samples, 0.39%)</title><rect x="51.4418%" y="213" width="0.3918%" height="15" fill="rgb(215,41,42)" fg:x="5120" fg:w="39"/><text x="51.6918%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (39 samples, 0.39%)</title><rect x="51.4418%" y="197" width="0.3918%" height="15" fill="rgb(224,123,36)" fg:x="5120" fg:w="39"/><text x="51.6918%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (39 samples, 0.39%)</title><rect x="51.4418%" y="181" width="0.3918%" height="15" fill="rgb(240,125,3)" fg:x="5120" fg:w="39"/><text x="51.6918%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (39 samples, 0.39%)</title><rect x="51.4418%" y="165" width="0.3918%" height="15" fill="rgb(205,98,50)" fg:x="5120" fg:w="39"/><text x="51.6918%" y="175.50"></text></g><g><title>core::mem::replace (39 samples, 0.39%)</title><rect x="51.4418%" y="149" width="0.3918%" height="15" fill="rgb(205,185,37)" fg:x="5120" fg:w="39"/><text x="51.6918%" y="159.50"></text></g><g><title>core::ptr::write (39 samples, 0.39%)</title><rect x="51.4418%" y="133" width="0.3918%" height="15" fill="rgb(238,207,15)" fg:x="5120" fg:w="39"/><text x="51.6918%" y="143.50"></text></g><g><title>rlox::value::Value::as_instance (15 samples, 0.15%)</title><rect x="51.8336%" y="229" width="0.1507%" height="15" fill="rgb(213,199,42)" fg:x="5159" fg:w="15"/><text x="52.0836%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.32%)</title><rect x="52.0547%" y="213" width="0.3215%" height="15" fill="rgb(235,201,11)" fg:x="5181" fg:w="32"/><text x="52.3047%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (32 samples, 0.32%)</title><rect x="52.0547%" y="197" width="0.3215%" height="15" fill="rgb(207,46,11)" fg:x="5181" fg:w="32"/><text x="52.3047%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="52.3661%" y="181" width="0.0100%" height="15" fill="rgb(241,35,35)" fg:x="5212" fg:w="1"/><text x="52.6161%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="52.3661%" y="165" width="0.0100%" height="15" fill="rgb(243,32,47)" fg:x="5212" fg:w="1"/><text x="52.6161%" y="175.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="52.3661%" y="149" width="0.0100%" height="15" fill="rgb(247,202,23)" fg:x="5212" fg:w="1"/><text x="52.6161%" y="159.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="52.3661%" y="133" width="0.0100%" height="15" fill="rgb(219,102,11)" fg:x="5212" fg:w="1"/><text x="52.6161%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.13%)</title><rect x="52.3862%" y="165" width="0.1306%" height="15" fill="rgb(243,110,44)" fg:x="5214" fg:w="13"/><text x="52.6362%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.13%)</title><rect x="52.3862%" y="149" width="0.1306%" height="15" fill="rgb(222,74,54)" fg:x="5214" fg:w="13"/><text x="52.6362%" y="159.50"></text></g><g><title>core::mem::replace (13 samples, 0.13%)</title><rect x="52.3862%" y="133" width="0.1306%" height="15" fill="rgb(216,99,12)" fg:x="5214" fg:w="13"/><text x="52.6362%" y="143.50"></text></g><g><title>core::ptr::write (13 samples, 0.13%)</title><rect x="52.3862%" y="117" width="0.1306%" height="15" fill="rgb(226,22,26)" fg:x="5214" fg:w="13"/><text x="52.6362%" y="127.50"></text></g><g><title>core::cell::is_reading (2 samples, 0.02%)</title><rect x="52.5168%" y="165" width="0.0201%" height="15" fill="rgb(217,163,10)" fg:x="5227" fg:w="2"/><text x="52.7668%" y="175.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (33 samples, 0.33%)</title><rect x="52.3762%" y="213" width="0.3316%" height="15" fill="rgb(213,25,53)" fg:x="5213" fg:w="33"/><text x="52.6262%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (33 samples, 0.33%)</title><rect x="52.3762%" y="197" width="0.3316%" height="15" fill="rgb(252,105,26)" fg:x="5213" fg:w="33"/><text x="52.6262%" y="207.50"></text></g><g><title>core::cell::BorrowRef::new (32 samples, 0.32%)</title><rect x="52.3862%" y="181" width="0.3215%" height="15" fill="rgb(220,39,43)" fg:x="5214" fg:w="32"/><text x="52.6362%" y="191.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (17 samples, 0.17%)</title><rect x="52.5369%" y="165" width="0.1708%" height="15" fill="rgb(229,68,48)" fg:x="5229" fg:w="17"/><text x="52.7869%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjClass&gt;&gt;&gt; (36 samples, 0.36%)</title><rect x="52.7077%" y="213" width="0.3617%" height="15" fill="rgb(252,8,32)" fg:x="5246" fg:w="36"/><text x="52.9577%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.36%)</title><rect x="52.7077%" y="197" width="0.3617%" height="15" fill="rgb(223,20,43)" fg:x="5246" fg:w="36"/><text x="52.9577%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjClass&gt;&gt; (27 samples, 0.27%)</title><rect x="53.0694%" y="213" width="0.2713%" height="15" fill="rgb(229,81,49)" fg:x="5282" fg:w="27"/><text x="53.3194%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (27 samples, 0.27%)</title><rect x="53.0694%" y="197" width="0.2713%" height="15" fill="rgb(236,28,36)" fg:x="5282" fg:w="27"/><text x="53.3194%" y="207.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (27 samples, 0.27%)</title><rect x="53.0694%" y="181" width="0.2713%" height="15" fill="rgb(249,185,26)" fg:x="5282" fg:w="27"/><text x="53.3194%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (27 samples, 0.27%)</title><rect x="53.0694%" y="165" width="0.2713%" height="15" fill="rgb(249,174,33)" fg:x="5282" fg:w="27"/><text x="53.3194%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (27 samples, 0.27%)</title><rect x="53.0694%" y="149" width="0.2713%" height="15" fill="rgb(233,201,37)" fg:x="5282" fg:w="27"/><text x="53.3194%" y="159.50"></text></g><g><title>core::mem::replace (27 samples, 0.27%)</title><rect x="53.0694%" y="133" width="0.2713%" height="15" fill="rgb(221,78,26)" fg:x="5282" fg:w="27"/><text x="53.3194%" y="143.50"></text></g><g><title>core::ptr::write (27 samples, 0.27%)</title><rect x="53.0694%" y="117" width="0.2713%" height="15" fill="rgb(250,127,30)" fg:x="5282" fg:w="27"/><text x="53.3194%" y="127.50"></text></g><g><title>rlox::value::Value::as_closure (14 samples, 0.14%)</title><rect x="53.3407%" y="213" width="0.1407%" height="15" fill="rgb(230,49,44)" fg:x="5309" fg:w="14"/><text x="53.5907%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.03%)</title><rect x="54.4358%" y="181" width="0.0301%" height="15" fill="rgb(229,67,23)" fg:x="5418" fg:w="3"/><text x="54.6858%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (24 samples, 0.24%)</title><rect x="54.4660%" y="181" width="0.2411%" height="15" fill="rgb(249,83,47)" fg:x="5421" fg:w="24"/><text x="54.7160%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (24 samples, 0.24%)</title><rect x="54.4660%" y="165" width="0.2411%" height="15" fill="rgb(215,43,3)" fg:x="5421" fg:w="24"/><text x="54.7160%" y="175.50"></text></g><g><title>rlox::vm::VM::call_closure (190 samples, 1.91%)</title><rect x="53.4814%" y="213" width="1.9090%" height="15" fill="rgb(238,154,13)" fg:x="5323" fg:w="190"/><text x="53.7314%" y="223.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (99 samples, 0.99%)</title><rect x="54.3957%" y="197" width="0.9947%" height="15" fill="rgb(219,56,2)" fg:x="5414" fg:w="99"/><text x="54.6457%" y="207.50"></text></g><g><title>core::ptr::write (68 samples, 0.68%)</title><rect x="54.7071%" y="181" width="0.6832%" height="15" fill="rgb(233,0,4)" fg:x="5445" fg:w="68"/><text x="54.9571%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (29 samples, 0.29%)</title><rect x="55.3903%" y="165" width="0.2914%" height="15" fill="rgb(235,30,7)" fg:x="5513" fg:w="29"/><text x="55.6403%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (29 samples, 0.29%)</title><rect x="55.3903%" y="149" width="0.2914%" height="15" fill="rgb(250,79,13)" fg:x="5513" fg:w="29"/><text x="55.6403%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (29 samples, 0.29%)</title><rect x="55.3903%" y="133" width="0.2914%" height="15" fill="rgb(211,146,34)" fg:x="5513" fg:w="29"/><text x="55.6403%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (29 samples, 0.29%)</title><rect x="55.3903%" y="117" width="0.2914%" height="15" fill="rgb(228,22,38)" fg:x="5513" fg:w="29"/><text x="55.6403%" y="127.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (29 samples, 0.29%)</title><rect x="55.3903%" y="101" width="0.2914%" height="15" fill="rgb(235,168,5)" fg:x="5513" fg:w="29"/><text x="55.6403%" y="111.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (28 samples, 0.28%)</title><rect x="55.4004%" y="85" width="0.2813%" height="15" fill="rgb(221,155,16)" fg:x="5514" fg:w="28"/><text x="55.6504%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (28 samples, 0.28%)</title><rect x="55.4004%" y="69" width="0.2813%" height="15" fill="rgb(215,215,53)" fg:x="5514" fg:w="28"/><text x="55.6504%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.26%)</title><rect x="55.8826%" y="117" width="0.2612%" height="15" fill="rgb(223,4,10)" fg:x="5562" fg:w="26"/><text x="56.1326%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.20%)</title><rect x="55.9429%" y="101" width="0.2009%" height="15" fill="rgb(234,103,6)" fg:x="5568" fg:w="20"/><text x="56.1929%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (20 samples, 0.20%)</title><rect x="55.9429%" y="85" width="0.2009%" height="15" fill="rgb(227,97,0)" fg:x="5568" fg:w="20"/><text x="56.1929%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.46%)</title><rect x="55.8826%" y="133" width="0.4622%" height="15" fill="rgb(234,150,53)" fg:x="5562" fg:w="46"/><text x="56.1326%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (20 samples, 0.20%)</title><rect x="56.1439%" y="117" width="0.2009%" height="15" fill="rgb(228,201,54)" fg:x="5588" fg:w="20"/><text x="56.3939%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (20 samples, 0.20%)</title><rect x="56.1439%" y="101" width="0.2009%" height="15" fill="rgb(222,22,37)" fg:x="5588" fg:w="20"/><text x="56.3939%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (20 samples, 0.20%)</title><rect x="56.1439%" y="85" width="0.2009%" height="15" fill="rgb(237,53,32)" fg:x="5588" fg:w="20"/><text x="56.3939%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (20 samples, 0.20%)</title><rect x="56.1439%" y="69" width="0.2009%" height="15" fill="rgb(233,25,53)" fg:x="5588" fg:w="20"/><text x="56.3939%" y="79.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (22 samples, 0.22%)</title><rect x="56.3448%" y="133" width="0.2210%" height="15" fill="rgb(210,40,34)" fg:x="5608" fg:w="22"/><text x="56.5948%" y="143.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (22 samples, 0.22%)</title><rect x="56.3448%" y="117" width="0.2210%" height="15" fill="rgb(241,220,44)" fg:x="5608" fg:w="22"/><text x="56.5948%" y="127.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (22 samples, 0.22%)</title><rect x="56.3448%" y="101" width="0.2210%" height="15" fill="rgb(235,28,35)" fg:x="5608" fg:w="22"/><text x="56.5948%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (16 samples, 0.16%)</title><rect x="56.5860%" y="85" width="0.1608%" height="15" fill="rgb(210,56,17)" fg:x="5632" fg:w="16"/><text x="56.8360%" y="95.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="56.7467%" y="85" width="0.0100%" height="15" fill="rgb(224,130,29)" fg:x="5648" fg:w="1"/><text x="56.9967%" y="95.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="56.7568%" y="85" width="0.0100%" height="15" fill="rgb(235,212,8)" fg:x="5649" fg:w="1"/><text x="57.0068%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="56.7568%" y="69" width="0.0100%" height="15" fill="rgb(223,33,50)" fg:x="5649" fg:w="1"/><text x="57.0068%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="56.7568%" y="53" width="0.0100%" height="15" fill="rgb(219,149,13)" fg:x="5649" fg:w="1"/><text x="57.0068%" y="63.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (492 samples, 4.94%)</title><rect x="51.9843%" y="229" width="4.9432%" height="15" fill="rgb(250,156,29)" fg:x="5174" fg:w="492"/><text x="52.2343%" y="239.50">rlox::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (153 samples, 1.54%)</title><rect x="55.3903%" y="213" width="1.5372%" height="15" fill="rgb(216,193,19)" fg:x="5513" fg:w="153"/><text x="55.6403%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (153 samples, 1.54%)</title><rect x="55.3903%" y="197" width="1.5372%" height="15" fill="rgb(216,135,14)" fg:x="5513" fg:w="153"/><text x="55.6403%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (153 samples, 1.54%)</title><rect x="55.3903%" y="181" width="1.5372%" height="15" fill="rgb(241,47,5)" fg:x="5513" fg:w="153"/><text x="55.6403%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (124 samples, 1.25%)</title><rect x="55.6817%" y="165" width="1.2459%" height="15" fill="rgb(233,42,35)" fg:x="5542" fg:w="124"/><text x="55.9317%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (124 samples, 1.25%)</title><rect x="55.6817%" y="149" width="1.2459%" height="15" fill="rgb(231,13,6)" fg:x="5542" fg:w="124"/><text x="55.9317%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (36 samples, 0.36%)</title><rect x="56.5659%" y="133" width="0.3617%" height="15" fill="rgb(207,181,40)" fg:x="5630" fg:w="36"/><text x="56.8159%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (36 samples, 0.36%)</title><rect x="56.5659%" y="117" width="0.3617%" height="15" fill="rgb(254,173,49)" fg:x="5630" fg:w="36"/><text x="56.8159%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (36 samples, 0.36%)</title><rect x="56.5659%" y="101" width="0.3617%" height="15" fill="rgb(221,1,38)" fg:x="5630" fg:w="36"/><text x="56.8159%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.16%)</title><rect x="56.7668%" y="85" width="0.1608%" height="15" fill="rgb(206,124,46)" fg:x="5650" fg:w="16"/><text x="57.0168%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (16 samples, 0.16%)</title><rect x="56.7668%" y="69" width="0.1608%" height="15" fill="rgb(249,21,11)" fg:x="5650" fg:w="16"/><text x="57.0168%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (16 samples, 0.16%)</title><rect x="56.7668%" y="53" width="0.1608%" height="15" fill="rgb(222,201,40)" fg:x="5650" fg:w="16"/><text x="57.0168%" y="63.50"></text></g><g><title>core::core_arch::simd::i8x16::new (16 samples, 0.16%)</title><rect x="56.7668%" y="37" width="0.1608%" height="15" fill="rgb(235,61,29)" fg:x="5650" fg:w="16"/><text x="57.0168%" y="47.50"></text></g><g><title>rlox::vm::VM::peek (37 samples, 0.37%)</title><rect x="56.9276%" y="229" width="0.3717%" height="15" fill="rgb(219,207,3)" fg:x="5666" fg:w="37"/><text x="57.1776%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.15%)</title><rect x="57.2993%" y="181" width="0.1507%" height="15" fill="rgb(222,56,46)" fg:x="5703" fg:w="15"/><text x="57.5493%" y="191.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (15 samples, 0.15%)</title><rect x="57.2993%" y="165" width="0.1507%" height="15" fill="rgb(239,76,54)" fg:x="5703" fg:w="15"/><text x="57.5493%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (15 samples, 0.15%)</title><rect x="57.2993%" y="149" width="0.1507%" height="15" fill="rgb(231,124,27)" fg:x="5703" fg:w="15"/><text x="57.5493%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (15 samples, 0.15%)</title><rect x="57.2993%" y="133" width="0.1507%" height="15" fill="rgb(249,195,6)" fg:x="5703" fg:w="15"/><text x="57.5493%" y="143.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (15 samples, 0.15%)</title><rect x="57.2993%" y="117" width="0.1507%" height="15" fill="rgb(237,174,47)" fg:x="5703" fg:w="15"/><text x="57.5493%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (15 samples, 0.15%)</title><rect x="57.2993%" y="101" width="0.1507%" height="15" fill="rgb(206,201,31)" fg:x="5703" fg:w="15"/><text x="57.5493%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (15 samples, 0.15%)</title><rect x="57.2993%" y="85" width="0.1507%" height="15" fill="rgb(231,57,52)" fg:x="5703" fg:w="15"/><text x="57.5493%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.12%)</title><rect x="57.6811%" y="149" width="0.1206%" height="15" fill="rgb(248,177,22)" fg:x="5741" fg:w="12"/><text x="57.9311%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.12%)</title><rect x="57.6811%" y="133" width="0.1206%" height="15" fill="rgb(215,211,37)" fg:x="5741" fg:w="12"/><text x="57.9311%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="57.7916%" y="117" width="0.0100%" height="15" fill="rgb(241,128,51)" fg:x="5752" fg:w="1"/><text x="58.0416%" y="127.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (3 samples, 0.03%)</title><rect x="58.0026%" y="101" width="0.0301%" height="15" fill="rgb(227,165,31)" fg:x="5773" fg:w="3"/><text x="58.2526%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="58.0328%" y="101" width="0.0100%" height="15" fill="rgb(228,167,24)" fg:x="5776" fg:w="1"/><text x="58.2828%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (15 samples, 0.15%)</title><rect x="58.0428%" y="101" width="0.1507%" height="15" fill="rgb(228,143,12)" fg:x="5777" fg:w="15"/><text x="58.2928%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (15 samples, 0.15%)</title><rect x="58.0428%" y="85" width="0.1507%" height="15" fill="rgb(249,149,8)" fg:x="5777" fg:w="15"/><text x="58.2928%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.15%)</title><rect x="58.0428%" y="69" width="0.1507%" height="15" fill="rgb(243,35,44)" fg:x="5777" fg:w="15"/><text x="58.2928%" y="79.50"></text></g><g><title>rlox::vm::VM::invoke (809 samples, 8.13%)</title><rect x="50.2361%" y="245" width="8.1282%" height="15" fill="rgb(246,89,9)" fg:x="5000" fg:w="809"/><text x="50.4861%" y="255.50">rlox::vm::V..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (106 samples, 1.07%)</title><rect x="57.2993%" y="229" width="1.0650%" height="15" fill="rgb(233,213,13)" fg:x="5703" fg:w="106"/><text x="57.5493%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (106 samples, 1.07%)</title><rect x="57.2993%" y="213" width="1.0650%" height="15" fill="rgb(233,141,41)" fg:x="5703" fg:w="106"/><text x="57.5493%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (106 samples, 1.07%)</title><rect x="57.2993%" y="197" width="1.0650%" height="15" fill="rgb(239,167,4)" fg:x="5703" fg:w="106"/><text x="57.5493%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (91 samples, 0.91%)</title><rect x="57.4500%" y="181" width="0.9143%" height="15" fill="rgb(209,217,16)" fg:x="5718" fg:w="91"/><text x="57.7000%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (91 samples, 0.91%)</title><rect x="57.4500%" y="165" width="0.9143%" height="15" fill="rgb(219,88,35)" fg:x="5718" fg:w="91"/><text x="57.7000%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (56 samples, 0.56%)</title><rect x="57.8017%" y="149" width="0.5626%" height="15" fill="rgb(220,193,23)" fg:x="5753" fg:w="56"/><text x="58.0517%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (56 samples, 0.56%)</title><rect x="57.8017%" y="133" width="0.5626%" height="15" fill="rgb(230,90,52)" fg:x="5753" fg:w="56"/><text x="58.0517%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (56 samples, 0.56%)</title><rect x="57.8017%" y="117" width="0.5626%" height="15" fill="rgb(252,106,19)" fg:x="5753" fg:w="56"/><text x="58.0517%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (17 samples, 0.17%)</title><rect x="58.1935%" y="101" width="0.1708%" height="15" fill="rgb(206,74,20)" fg:x="5792" fg:w="17"/><text x="58.4435%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (17 samples, 0.17%)</title><rect x="58.1935%" y="85" width="0.1708%" height="15" fill="rgb(230,138,44)" fg:x="5792" fg:w="17"/><text x="58.4435%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (17 samples, 0.17%)</title><rect x="58.1935%" y="69" width="0.1708%" height="15" fill="rgb(235,182,43)" fg:x="5792" fg:w="17"/><text x="58.4435%" y="79.50"></text></g><g><title>core::core_arch::simd::i8x16::new (17 samples, 0.17%)</title><rect x="58.1935%" y="53" width="0.1708%" height="15" fill="rgb(242,16,51)" fg:x="5792" fg:w="17"/><text x="58.4435%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (63 samples, 0.63%)</title><rect x="65.3270%" y="197" width="0.6330%" height="15" fill="rgb(248,9,4)" fg:x="6502" fg:w="63"/><text x="65.5770%" y="207.50"></text></g><g><title>rlox::chunk::Chunk::read_instruction (374 samples, 3.76%)</title><rect x="65.3270%" y="229" width="3.7577%" height="15" fill="rgb(210,31,22)" fg:x="6502" fg:w="374"/><text x="65.5770%" y="239.50">rlox..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (374 samples, 3.76%)</title><rect x="65.3270%" y="213" width="3.7577%" height="15" fill="rgb(239,54,39)" fg:x="6502" fg:w="374"/><text x="65.5770%" y="223.50">&lt;all..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (311 samples, 3.12%)</title><rect x="65.9600%" y="197" width="3.1247%" height="15" fill="rgb(230,99,41)" fg:x="6565" fg:w="311"/><text x="66.2100%" y="207.50">cor..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (311 samples, 3.12%)</title><rect x="65.9600%" y="181" width="3.1247%" height="15" fill="rgb(253,106,12)" fg:x="6565" fg:w="311"/><text x="66.2100%" y="191.50">&lt;us..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.02%)</title><rect x="69.0847%" y="213" width="0.0201%" height="15" fill="rgb(213,46,41)" fg:x="6876" fg:w="2"/><text x="69.3347%" y="223.50"></text></g><g><title>rlox::vm::VM::frame_mut (55 samples, 0.55%)</title><rect x="69.0847%" y="229" width="0.5526%" height="15" fill="rgb(215,133,35)" fg:x="6876" fg:w="55"/><text x="69.3347%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (53 samples, 0.53%)</title><rect x="69.1048%" y="213" width="0.5325%" height="15" fill="rgb(213,28,5)" fg:x="6878" fg:w="53"/><text x="69.3548%" y="223.50"></text></g><g><title>rlox::vm::VM::next_instruction (1,377 samples, 13.84%)</title><rect x="58.3643%" y="245" width="13.8350%" height="15" fill="rgb(215,77,49)" fg:x="5809" fg:w="1377"/><text x="58.6143%" y="255.50">rlox::vm::VM::next_in..</text></g><g><title>rlox::vm::VM::run (255 samples, 2.56%)</title><rect x="69.6373%" y="229" width="2.5620%" height="15" fill="rgb(248,100,22)" fg:x="6931" fg:w="255"/><text x="69.8873%" y="239.50">rl..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (45 samples, 0.45%)</title><rect x="72.2295%" y="229" width="0.4521%" height="15" fill="rgb(208,67,9)" fg:x="7189" fg:w="45"/><text x="72.4795%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (11 samples, 0.11%)</title><rect x="72.5711%" y="213" width="0.1105%" height="15" fill="rgb(219,133,21)" fg:x="7223" fg:w="11"/><text x="72.8211%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (1 samples, 0.01%)</title><rect x="72.6816%" y="229" width="0.0100%" height="15" fill="rgb(246,46,29)" fg:x="7234" fg:w="1"/><text x="72.9316%" y="239.50"></text></g><g><title>rlox::vm::VM::peek (70 samples, 0.70%)</title><rect x="72.1993%" y="245" width="0.7033%" height="15" fill="rgb(246,185,52)" fg:x="7186" fg:w="70"/><text x="72.4493%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (21 samples, 0.21%)</title><rect x="72.6917%" y="229" width="0.2110%" height="15" fill="rgb(252,136,11)" fg:x="7235" fg:w="21"/><text x="72.9417%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (21 samples, 0.21%)</title><rect x="72.6917%" y="213" width="0.2110%" height="15" fill="rgb(219,138,53)" fg:x="7235" fg:w="21"/><text x="72.9417%" y="223.50"></text></g><g><title>rlox::vm::VM::peek_mut (35 samples, 0.35%)</title><rect x="72.9026%" y="245" width="0.3517%" height="15" fill="rgb(211,51,23)" fg:x="7256" fg:w="35"/><text x="73.1526%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (35 samples, 0.35%)</title><rect x="72.9026%" y="229" width="0.3517%" height="15" fill="rgb(247,221,28)" fg:x="7256" fg:w="35"/><text x="73.1526%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (35 samples, 0.35%)</title><rect x="72.9026%" y="213" width="0.3517%" height="15" fill="rgb(251,222,45)" fg:x="7256" fg:w="35"/><text x="73.1526%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (195 samples, 1.96%)</title><rect x="73.2543%" y="229" width="1.9592%" height="15" fill="rgb(217,162,53)" fg:x="7291" fg:w="195"/><text x="73.5043%" y="239.50">a..</text></g><g><title>core::ptr::read (137 samples, 1.38%)</title><rect x="73.8370%" y="213" width="1.3765%" height="15" fill="rgb(229,93,14)" fg:x="7349" fg:w="137"/><text x="74.0870%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.33%)</title><rect x="74.8819%" y="197" width="0.3316%" height="15" fill="rgb(209,67,49)" fg:x="7453" fg:w="33"/><text x="75.1319%" y="207.50"></text></g><g><title>rlox::vm::VM::pop (386 samples, 3.88%)</title><rect x="73.2543%" y="245" width="3.8782%" height="15" fill="rgb(213,87,29)" fg:x="7291" fg:w="386"/><text x="73.5043%" y="255.50">rlox..</text></g><g><title>core::option::Option&lt;T&gt;::expect (191 samples, 1.92%)</title><rect x="75.2135%" y="229" width="1.9190%" height="15" fill="rgb(205,151,52)" fg:x="7486" fg:w="191"/><text x="75.4635%" y="239.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (2 samples, 0.02%)</title><rect x="77.6550%" y="213" width="0.0201%" height="15" fill="rgb(253,215,39)" fg:x="7729" fg:w="2"/><text x="77.9050%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (19 samples, 0.19%)</title><rect x="77.6751%" y="213" width="0.1909%" height="15" fill="rgb(221,220,41)" fg:x="7731" fg:w="19"/><text x="77.9251%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (19 samples, 0.19%)</title><rect x="77.6751%" y="197" width="0.1909%" height="15" fill="rgb(218,133,21)" fg:x="7731" fg:w="19"/><text x="77.9251%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (76 samples, 0.76%)</title><rect x="77.1325%" y="229" width="0.7636%" height="15" fill="rgb(221,193,43)" fg:x="7677" fg:w="76"/><text x="77.3825%" y="239.50"></text></g><g><title>core::slice::index::range (3 samples, 0.03%)</title><rect x="77.8660%" y="213" width="0.0301%" height="15" fill="rgb(240,128,52)" fg:x="7750" fg:w="3"/><text x="78.1160%" y="223.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.58%)</title><rect x="78.7099%" y="197" width="0.5827%" height="15" fill="rgb(253,114,12)" fg:x="7834" fg:w="58"/><text x="78.9599%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.58%)</title><rect x="78.7099%" y="181" width="0.5827%" height="15" fill="rgb(215,223,47)" fg:x="7834" fg:w="58"/><text x="78.9599%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (20 samples, 0.20%)</title><rect x="79.0917%" y="165" width="0.2009%" height="15" fill="rgb(248,225,23)" fg:x="7872" fg:w="20"/><text x="79.3417%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.01%)</title><rect x="79.2826%" y="149" width="0.0100%" height="15" fill="rgb(250,108,0)" fg:x="7891" fg:w="1"/><text x="79.5326%" y="159.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.46%)</title><rect x="79.2927%" y="181" width="0.4622%" height="15" fill="rgb(228,208,7)" fg:x="7892" fg:w="46"/><text x="79.5427%" y="191.50"></text></g><g><title>core::mem::drop (149 samples, 1.50%)</title><rect x="79.2927%" y="197" width="1.4970%" height="15" fill="rgb(244,45,10)" fg:x="7892" fg:w="149"/><text x="79.5427%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (103 samples, 1.03%)</title><rect x="79.7548%" y="181" width="1.0349%" height="15" fill="rgb(207,125,25)" fg:x="7938" fg:w="103"/><text x="80.0048%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (88 samples, 0.88%)</title><rect x="79.9056%" y="165" width="0.8842%" height="15" fill="rgb(210,195,18)" fg:x="7953" fg:w="88"/><text x="80.1556%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 0.88%)</title><rect x="79.9056%" y="149" width="0.8842%" height="15" fill="rgb(249,80,12)" fg:x="7953" fg:w="88"/><text x="80.1556%" y="159.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (17 samples, 0.17%)</title><rect x="80.6189%" y="133" width="0.1708%" height="15" fill="rgb(221,65,9)" fg:x="8024" fg:w="17"/><text x="80.8689%" y="143.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (17 samples, 0.17%)</title><rect x="80.6189%" y="117" width="0.1708%" height="15" fill="rgb(235,49,36)" fg:x="8024" fg:w="17"/><text x="80.8689%" y="127.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (17 samples, 0.17%)</title><rect x="80.6189%" y="101" width="0.1708%" height="15" fill="rgb(225,32,20)" fg:x="8024" fg:w="17"/><text x="80.8689%" y="111.50"></text></g><g><title>core::mem::replace (17 samples, 0.17%)</title><rect x="80.6189%" y="85" width="0.1708%" height="15" fill="rgb(215,141,46)" fg:x="8024" fg:w="17"/><text x="80.8689%" y="95.50"></text></g><g><title>core::ptr::write (17 samples, 0.17%)</title><rect x="80.6189%" y="69" width="0.1708%" height="15" fill="rgb(250,160,47)" fg:x="8024" fg:w="17"/><text x="80.8689%" y="79.50"></text></g><g><title>rlox::vm::VM::popn (447 samples, 4.49%)</title><rect x="77.1325%" y="245" width="4.4911%" height="15" fill="rgb(216,222,40)" fg:x="7677" fg:w="447"/><text x="77.3825%" y="255.50">rlox:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;rlox::value::Value&gt;&gt; (371 samples, 3.73%)</title><rect x="77.8961%" y="229" width="3.7275%" height="15" fill="rgb(234,217,39)" fg:x="7753" fg:w="371"/><text x="78.1461%" y="239.50">core..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (371 samples, 3.73%)</title><rect x="77.8961%" y="213" width="3.7275%" height="15" fill="rgb(207,178,40)" fg:x="7753" fg:w="371"/><text x="78.1461%" y="223.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (83 samples, 0.83%)</title><rect x="80.7897%" y="197" width="0.8339%" height="15" fill="rgb(221,136,13)" fg:x="8041" fg:w="83"/><text x="81.0397%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.80%)</title><rect x="80.8199%" y="181" width="0.8038%" height="15" fill="rgb(249,199,10)" fg:x="8044" fg:w="80"/><text x="81.0699%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.43%)</title><rect x="81.1916%" y="165" width="0.4320%" height="15" fill="rgb(249,222,13)" fg:x="8081" fg:w="43"/><text x="81.4416%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (43 samples, 0.43%)</title><rect x="81.1916%" y="149" width="0.4320%" height="15" fill="rgb(244,185,38)" fg:x="8081" fg:w="43"/><text x="81.4416%" y="159.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.43%)</title><rect x="81.1916%" y="133" width="0.4320%" height="15" fill="rgb(236,202,9)" fg:x="8081" fg:w="43"/><text x="81.4416%" y="143.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.43%)</title><rect x="81.1916%" y="117" width="0.4320%" height="15" fill="rgb(250,229,37)" fg:x="8081" fg:w="43"/><text x="81.4416%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.43%)</title><rect x="81.1916%" y="101" width="0.4320%" height="15" fill="rgb(206,174,23)" fg:x="8081" fg:w="43"/><text x="81.4416%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="87.1998%" y="213" width="0.0100%" height="15" fill="rgb(211,33,43)" fg:x="8679" fg:w="1"/><text x="87.4498%" y="223.50"></text></g><g><title>rlox::vm::VM::push (916 samples, 9.20%)</title><rect x="81.6236%" y="245" width="9.2033%" height="15" fill="rgb(245,58,50)" fg:x="8124" fg:w="916"/><text x="81.8736%" y="255.50">rlox::vm::VM:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (365 samples, 3.67%)</title><rect x="87.1597%" y="229" width="3.6672%" height="15" fill="rgb(244,68,36)" fg:x="8675" fg:w="365"/><text x="87.4097%" y="239.50">allo..</text></g><g><title>core::ptr::write (360 samples, 3.62%)</title><rect x="87.2099%" y="213" width="3.6170%" height="15" fill="rgb(232,229,15)" fg:x="8680" fg:w="360"/><text x="87.4599%" y="223.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (92 samples, 0.92%)</title><rect x="91.6709%" y="197" width="0.9243%" height="15" fill="rgb(254,30,23)" fg:x="9124" fg:w="92"/><text x="91.9209%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (56 samples, 0.56%)</title><rect x="92.0326%" y="181" width="0.5626%" height="15" fill="rgb(235,160,14)" fg:x="9160" fg:w="56"/><text x="92.2826%" y="191.50"></text></g><g><title>rlox::chunk::Chunk::read_const (111 samples, 1.12%)</title><rect x="91.6709%" y="229" width="1.1152%" height="15" fill="rgb(212,155,44)" fg:x="9124" fg:w="111"/><text x="91.9209%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (111 samples, 1.12%)</title><rect x="91.6709%" y="213" width="1.1152%" height="15" fill="rgb(226,2,50)" fg:x="9124" fg:w="111"/><text x="91.9209%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (19 samples, 0.19%)</title><rect x="92.5952%" y="197" width="0.1909%" height="15" fill="rgb(234,177,6)" fg:x="9216" fg:w="19"/><text x="92.8452%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (19 samples, 0.19%)</title><rect x="92.5952%" y="181" width="0.1909%" height="15" fill="rgb(217,24,9)" fg:x="9216" fg:w="19"/><text x="92.8452%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (82 samples, 0.82%)</title><rect x="92.7861%" y="213" width="0.8239%" height="15" fill="rgb(220,13,46)" fg:x="9235" fg:w="82"/><text x="93.0361%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29 samples, 0.29%)</title><rect x="93.3186%" y="197" width="0.2914%" height="15" fill="rgb(239,221,27)" fg:x="9288" fg:w="29"/><text x="93.5686%" y="207.50"></text></g><g><title>rlox::vm::VM::read_const (322 samples, 3.24%)</title><rect x="90.8269%" y="245" width="3.2352%" height="15" fill="rgb(222,198,25)" fg:x="9040" fg:w="322"/><text x="91.0769%" y="255.50">rlo..</text></g><g><title>rlox::vm::VM::frame (127 samples, 1.28%)</title><rect x="92.7861%" y="229" width="1.2760%" height="15" fill="rgb(211,99,13)" fg:x="9235" fg:w="127"/><text x="93.0361%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (45 samples, 0.45%)</title><rect x="93.6100%" y="213" width="0.4521%" height="15" fill="rgb(232,111,31)" fg:x="9317" fg:w="45"/><text x="93.8600%" y="223.50"></text></g><g><title>rlox::vm::VM::run (74 samples, 0.74%)</title><rect x="94.0621%" y="245" width="0.7435%" height="15" fill="rgb(245,82,37)" fg:x="9362" fg:w="74"/><text x="94.3121%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.06%)</title><rect x="94.8056%" y="197" width="0.0603%" height="15" fill="rgb(227,149,46)" fg:x="9436" fg:w="6"/><text x="95.0556%" y="207.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (6 samples, 0.06%)</title><rect x="94.8056%" y="181" width="0.0603%" height="15" fill="rgb(218,36,50)" fg:x="9436" fg:w="6"/><text x="95.0556%" y="191.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (6 samples, 0.06%)</title><rect x="94.8056%" y="165" width="0.0603%" height="15" fill="rgb(226,80,48)" fg:x="9436" fg:w="6"/><text x="95.0556%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (6 samples, 0.06%)</title><rect x="94.8056%" y="149" width="0.0603%" height="15" fill="rgb(238,224,15)" fg:x="9436" fg:w="6"/><text x="95.0556%" y="159.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (6 samples, 0.06%)</title><rect x="94.8056%" y="133" width="0.0603%" height="15" fill="rgb(241,136,10)" fg:x="9436" fg:w="6"/><text x="95.0556%" y="143.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (6 samples, 0.06%)</title><rect x="94.8056%" y="117" width="0.0603%" height="15" fill="rgb(208,32,45)" fg:x="9436" fg:w="6"/><text x="95.0556%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (6 samples, 0.06%)</title><rect x="94.8056%" y="101" width="0.0603%" height="15" fill="rgb(207,135,9)" fg:x="9436" fg:w="6"/><text x="95.0556%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.17%)</title><rect x="94.9563%" y="149" width="0.1708%" height="15" fill="rgb(206,86,44)" fg:x="9451" fg:w="17"/><text x="95.2063%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.14%)</title><rect x="94.9864%" y="133" width="0.1407%" height="15" fill="rgb(245,177,15)" fg:x="9454" fg:w="14"/><text x="95.2364%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.14%)</title><rect x="94.9864%" y="117" width="0.1407%" height="15" fill="rgb(206,64,50)" fg:x="9454" fg:w="14"/><text x="95.2364%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.20%)</title><rect x="94.9563%" y="165" width="0.2009%" height="15" fill="rgb(234,36,40)" fg:x="9451" fg:w="20"/><text x="95.2063%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (3 samples, 0.03%)</title><rect x="95.1271%" y="149" width="0.0301%" height="15" fill="rgb(213,64,8)" fg:x="9468" fg:w="3"/><text x="95.3771%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.03%)</title><rect x="95.1271%" y="133" width="0.0301%" height="15" fill="rgb(210,75,36)" fg:x="9468" fg:w="3"/><text x="95.3771%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.03%)</title><rect x="95.1271%" y="117" width="0.0301%" height="15" fill="rgb(229,88,21)" fg:x="9468" fg:w="3"/><text x="95.3771%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.03%)</title><rect x="95.1271%" y="101" width="0.0301%" height="15" fill="rgb(252,204,47)" fg:x="9468" fg:w="3"/><text x="95.3771%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6 samples, 0.06%)</title><rect x="95.1572%" y="165" width="0.0603%" height="15" fill="rgb(208,77,27)" fg:x="9471" fg:w="6"/><text x="95.4072%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (6 samples, 0.06%)</title><rect x="95.1572%" y="149" width="0.0603%" height="15" fill="rgb(221,76,26)" fg:x="9471" fg:w="6"/><text x="95.4072%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (6 samples, 0.06%)</title><rect x="95.1572%" y="133" width="0.0603%" height="15" fill="rgb(225,139,18)" fg:x="9471" fg:w="6"/><text x="95.4072%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (5 samples, 0.05%)</title><rect x="95.2376%" y="117" width="0.0502%" height="15" fill="rgb(230,137,11)" fg:x="9479" fg:w="5"/><text x="95.4876%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.04%)</title><rect x="95.2879%" y="117" width="0.0402%" height="15" fill="rgb(212,28,1)" fg:x="9484" fg:w="4"/><text x="95.5379%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.04%)</title><rect x="95.2879%" y="101" width="0.0402%" height="15" fill="rgb(248,164,17)" fg:x="9484" fg:w="4"/><text x="95.5379%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="95.2879%" y="85" width="0.0402%" height="15" fill="rgb(222,171,42)" fg:x="9484" fg:w="4"/><text x="95.5379%" y="95.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (59 samples, 0.59%)</title><rect x="94.8056%" y="245" width="0.5928%" height="15" fill="rgb(243,84,45)" fg:x="9436" fg:w="59"/><text x="95.0556%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (59 samples, 0.59%)</title><rect x="94.8056%" y="229" width="0.5928%" height="15" fill="rgb(252,49,23)" fg:x="9436" fg:w="59"/><text x="95.0556%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (59 samples, 0.59%)</title><rect x="94.8056%" y="213" width="0.5928%" height="15" fill="rgb(215,19,7)" fg:x="9436" fg:w="59"/><text x="95.0556%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (53 samples, 0.53%)</title><rect x="94.8659%" y="197" width="0.5325%" height="15" fill="rgb(238,81,41)" fg:x="9442" fg:w="53"/><text x="95.1159%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (53 samples, 0.53%)</title><rect x="94.8659%" y="181" width="0.5325%" height="15" fill="rgb(210,199,37)" fg:x="9442" fg:w="53"/><text x="95.1159%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (18 samples, 0.18%)</title><rect x="95.2175%" y="165" width="0.1808%" height="15" fill="rgb(244,192,49)" fg:x="9477" fg:w="18"/><text x="95.4675%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (18 samples, 0.18%)</title><rect x="95.2175%" y="149" width="0.1808%" height="15" fill="rgb(226,211,11)" fg:x="9477" fg:w="18"/><text x="95.4675%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (18 samples, 0.18%)</title><rect x="95.2175%" y="133" width="0.1808%" height="15" fill="rgb(236,162,54)" fg:x="9477" fg:w="18"/><text x="95.4675%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (7 samples, 0.07%)</title><rect x="95.3280%" y="117" width="0.0703%" height="15" fill="rgb(220,229,9)" fg:x="9488" fg:w="7"/><text x="95.5780%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (7 samples, 0.07%)</title><rect x="95.3280%" y="101" width="0.0703%" height="15" fill="rgb(250,87,22)" fg:x="9488" fg:w="7"/><text x="95.5780%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (7 samples, 0.07%)</title><rect x="95.3280%" y="85" width="0.0703%" height="15" fill="rgb(239,43,17)" fg:x="9488" fg:w="7"/><text x="95.5780%" y="95.50"></text></g><g><title>core::core_arch::simd::i8x16::new (7 samples, 0.07%)</title><rect x="95.3280%" y="69" width="0.0703%" height="15" fill="rgb(231,177,25)" fg:x="9488" fg:w="7"/><text x="95.5780%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (28 samples, 0.28%)</title><rect x="95.4988%" y="197" width="0.2813%" height="15" fill="rgb(219,179,1)" fg:x="9505" fg:w="28"/><text x="95.7488%" y="207.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (28 samples, 0.28%)</title><rect x="95.4988%" y="181" width="0.2813%" height="15" fill="rgb(238,219,53)" fg:x="9505" fg:w="28"/><text x="95.7488%" y="191.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (28 samples, 0.28%)</title><rect x="95.4988%" y="165" width="0.2813%" height="15" fill="rgb(232,167,36)" fg:x="9505" fg:w="28"/><text x="95.7488%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (28 samples, 0.28%)</title><rect x="95.4988%" y="149" width="0.2813%" height="15" fill="rgb(244,19,51)" fg:x="9505" fg:w="28"/><text x="95.7488%" y="159.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (28 samples, 0.28%)</title><rect x="95.4988%" y="133" width="0.2813%" height="15" fill="rgb(224,6,22)" fg:x="9505" fg:w="28"/><text x="95.7488%" y="143.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (28 samples, 0.28%)</title><rect x="95.4988%" y="117" width="0.2813%" height="15" fill="rgb(224,145,5)" fg:x="9505" fg:w="28"/><text x="95.7488%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (28 samples, 0.28%)</title><rect x="95.4988%" y="101" width="0.2813%" height="15" fill="rgb(234,130,49)" fg:x="9505" fg:w="28"/><text x="95.7488%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.62%)</title><rect x="96.6141%" y="149" width="0.6229%" height="15" fill="rgb(254,6,2)" fg:x="9616" fg:w="62"/><text x="96.8641%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.48%)</title><rect x="96.7547%" y="133" width="0.4823%" height="15" fill="rgb(208,96,46)" fg:x="9630" fg:w="48"/><text x="97.0047%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (48 samples, 0.48%)</title><rect x="96.7547%" y="117" width="0.4823%" height="15" fill="rgb(239,3,39)" fg:x="9630" fg:w="48"/><text x="97.0047%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 0.89%)</title><rect x="96.6141%" y="165" width="0.8942%" height="15" fill="rgb(233,210,1)" fg:x="9616" fg:w="89"/><text x="96.8641%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (27 samples, 0.27%)</title><rect x="97.2370%" y="149" width="0.2713%" height="15" fill="rgb(244,137,37)" fg:x="9678" fg:w="27"/><text x="97.4870%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (27 samples, 0.27%)</title><rect x="97.2370%" y="133" width="0.2713%" height="15" fill="rgb(240,136,2)" fg:x="9678" fg:w="27"/><text x="97.4870%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (27 samples, 0.27%)</title><rect x="97.2370%" y="117" width="0.2713%" height="15" fill="rgb(239,18,37)" fg:x="9678" fg:w="27"/><text x="97.4870%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (27 samples, 0.27%)</title><rect x="97.2370%" y="101" width="0.2713%" height="15" fill="rgb(218,185,22)" fg:x="9678" fg:w="27"/><text x="97.4870%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (84 samples, 0.84%)</title><rect x="97.5083%" y="165" width="0.8440%" height="15" fill="rgb(225,218,4)" fg:x="9705" fg:w="84"/><text x="97.7583%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (33 samples, 0.33%)</title><rect x="98.0207%" y="149" width="0.3316%" height="15" fill="rgb(230,182,32)" fg:x="9756" fg:w="33"/><text x="98.2707%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (33 samples, 0.33%)</title><rect x="98.0207%" y="133" width="0.3316%" height="15" fill="rgb(242,56,43)" fg:x="9756" fg:w="33"/><text x="98.2707%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (48 samples, 0.48%)</title><rect x="98.3523%" y="117" width="0.4823%" height="15" fill="rgb(233,99,24)" fg:x="9789" fg:w="48"/><text x="98.6023%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.01%)</title><rect x="98.8345%" y="117" width="0.0100%" height="15" fill="rgb(234,209,42)" fg:x="9837" fg:w="1"/><text x="99.0845%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (14 samples, 0.14%)</title><rect x="98.8446%" y="117" width="0.1407%" height="15" fill="rgb(227,7,12)" fg:x="9838" fg:w="14"/><text x="99.0946%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.14%)</title><rect x="98.8446%" y="101" width="0.1407%" height="15" fill="rgb(245,203,43)" fg:x="9838" fg:w="14"/><text x="99.0946%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.14%)</title><rect x="98.8446%" y="85" width="0.1407%" height="15" fill="rgb(238,205,33)" fg:x="9838" fg:w="14"/><text x="99.0946%" y="95.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (395 samples, 3.97%)</title><rect x="95.3984%" y="245" width="3.9687%" height="15" fill="rgb(231,56,7)" fg:x="9495" fg:w="395"/><text x="95.6484%" y="255.50">std:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (395 samples, 3.97%)</title><rect x="95.3984%" y="229" width="3.9687%" height="15" fill="rgb(244,186,29)" fg:x="9495" fg:w="395"/><text x="95.6484%" y="239.50">hash..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (385 samples, 3.87%)</title><rect x="95.4988%" y="213" width="3.8682%" height="15" fill="rgb(234,111,31)" fg:x="9505" fg:w="385"/><text x="95.7488%" y="223.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (357 samples, 3.59%)</title><rect x="95.7802%" y="197" width="3.5869%" height="15" fill="rgb(241,149,10)" fg:x="9533" fg:w="357"/><text x="96.0302%" y="207.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (357 samples, 3.59%)</title><rect x="95.7802%" y="181" width="3.5869%" height="15" fill="rgb(249,206,44)" fg:x="9533" fg:w="357"/><text x="96.0302%" y="191.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (101 samples, 1.01%)</title><rect x="98.3523%" y="165" width="1.0148%" height="15" fill="rgb(251,153,30)" fg:x="9789" fg:w="101"/><text x="98.6023%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (101 samples, 1.01%)</title><rect x="98.3523%" y="149" width="1.0148%" height="15" fill="rgb(239,152,38)" fg:x="9789" fg:w="101"/><text x="98.6023%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (101 samples, 1.01%)</title><rect x="98.3523%" y="133" width="1.0148%" height="15" fill="rgb(249,139,47)" fg:x="9789" fg:w="101"/><text x="98.6023%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (38 samples, 0.38%)</title><rect x="98.9852%" y="117" width="0.3818%" height="15" fill="rgb(244,64,35)" fg:x="9852" fg:w="38"/><text x="99.2352%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (38 samples, 0.38%)</title><rect x="98.9852%" y="101" width="0.3818%" height="15" fill="rgb(216,46,15)" fg:x="9852" fg:w="38"/><text x="99.2352%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (38 samples, 0.38%)</title><rect x="98.9852%" y="85" width="0.3818%" height="15" fill="rgb(250,74,19)" fg:x="9852" fg:w="38"/><text x="99.2352%" y="95.50"></text></g><g><title>core::core_arch::simd::i8x16::new (38 samples, 0.38%)</title><rect x="98.9852%" y="69" width="0.3818%" height="15" fill="rgb(249,42,33)" fg:x="9852" fg:w="38"/><text x="99.2352%" y="79.50"></text></g><g><title>core::mem::replace (12 samples, 0.12%)</title><rect x="99.3670%" y="213" width="0.1206%" height="15" fill="rgb(242,149,17)" fg:x="9890" fg:w="12"/><text x="99.6170%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.13%)</title><rect x="99.4876%" y="181" width="0.1306%" height="15" fill="rgb(244,29,21)" fg:x="9902" fg:w="13"/><text x="99.7376%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (13 samples, 0.13%)</title><rect x="99.4876%" y="165" width="0.1306%" height="15" fill="rgb(220,130,37)" fg:x="9902" fg:w="13"/><text x="99.7376%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13 samples, 0.13%)</title><rect x="99.4876%" y="149" width="0.1306%" height="15" fill="rgb(211,67,2)" fg:x="9902" fg:w="13"/><text x="99.7376%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.13%)</title><rect x="99.4876%" y="133" width="0.1306%" height="15" fill="rgb(235,68,52)" fg:x="9902" fg:w="13"/><text x="99.7376%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.13%)</title><rect x="99.4876%" y="117" width="0.1306%" height="15" fill="rgb(246,142,3)" fg:x="9902" fg:w="13"/><text x="99.7376%" y="127.50"></text></g><g><title>__libc_start_main (8,270 samples, 83.09%)</title><rect x="16.5980%" y="485" width="83.0905%" height="15" fill="rgb(241,25,7)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="495.50">__libc_start_main</text></g><g><title>main (8,270 samples, 83.09%)</title><rect x="16.5980%" y="469" width="83.0905%" height="15" fill="rgb(242,119,39)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (8,270 samples, 83.09%)</title><rect x="16.5980%" y="453" width="83.0905%" height="15" fill="rgb(241,98,45)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,270 samples, 83.09%)</title><rect x="16.5980%" y="437" width="83.0905%" height="15" fill="rgb(254,28,30)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,270 samples, 83.09%)</title><rect x="16.5980%" y="421" width="83.0905%" height="15" fill="rgb(241,142,54)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,270 samples, 83.09%)</title><rect x="16.5980%" y="405" width="83.0905%" height="15" fill="rgb(222,85,15)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,270 samples, 83.09%)</title><rect x="16.5980%" y="389" width="83.0905%" height="15" fill="rgb(210,85,47)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8,270 samples, 83.09%)</title><rect x="16.5980%" y="373" width="83.0905%" height="15" fill="rgb(224,206,25)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,270 samples, 83.09%)</title><rect x="16.5980%" y="357" width="83.0905%" height="15" fill="rgb(243,201,19)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,270 samples, 83.09%)</title><rect x="16.5980%" y="341" width="83.0905%" height="15" fill="rgb(236,59,4)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>rlox::main (8,270 samples, 83.09%)</title><rect x="16.5980%" y="325" width="83.0905%" height="15" fill="rgb(254,179,45)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="335.50">rlox::main</text></g><g><title>rlox::run_file (8,270 samples, 83.09%)</title><rect x="16.5980%" y="309" width="83.0905%" height="15" fill="rgb(226,14,10)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="319.50">rlox::run_file</text></g><g><title>rlox::vm::VM::interpret (8,270 samples, 83.09%)</title><rect x="16.5980%" y="293" width="83.0905%" height="15" fill="rgb(244,27,41)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="303.50">rlox::vm::VM::interpret</text></g><g><title>rlox::vm::VM::interpret::{{closure}} (8,270 samples, 83.09%)</title><rect x="16.5980%" y="277" width="83.0905%" height="15" fill="rgb(235,35,32)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="287.50">rlox::vm::VM::interpret::{{closure}}</text></g><g><title>rlox::vm::VM::run (8,270 samples, 83.09%)</title><rect x="16.5980%" y="261" width="83.0905%" height="15" fill="rgb(218,68,31)" fg:x="1652" fg:w="8270"/><text x="16.8480%" y="271.50">rlox::vm::VM::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (32 samples, 0.32%)</title><rect x="99.3670%" y="245" width="0.3215%" height="15" fill="rgb(207,120,37)" fg:x="9890" fg:w="32"/><text x="99.6170%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (32 samples, 0.32%)</title><rect x="99.3670%" y="229" width="0.3215%" height="15" fill="rgb(227,98,0)" fg:x="9890" fg:w="32"/><text x="99.6170%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (20 samples, 0.20%)</title><rect x="99.4876%" y="213" width="0.2009%" height="15" fill="rgb(207,7,3)" fg:x="9902" fg:w="20"/><text x="99.7376%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.20%)</title><rect x="99.4876%" y="197" width="0.2009%" height="15" fill="rgb(206,98,19)" fg:x="9902" fg:w="20"/><text x="99.7376%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (7 samples, 0.07%)</title><rect x="99.6182%" y="181" width="0.0703%" height="15" fill="rgb(217,5,26)" fg:x="9915" fg:w="7"/><text x="99.8682%" y="191.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (7 samples, 0.07%)</title><rect x="99.6182%" y="165" width="0.0703%" height="15" fill="rgb(235,190,38)" fg:x="9915" fg:w="7"/><text x="99.8682%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (7 samples, 0.07%)</title><rect x="99.6182%" y="149" width="0.0703%" height="15" fill="rgb(247,86,24)" fg:x="9915" fg:w="7"/><text x="99.8682%" y="159.50"></text></g><g><title>_start (8,277 samples, 83.16%)</title><rect x="16.5377%" y="501" width="83.1609%" height="15" fill="rgb(205,101,16)" fg:x="1646" fg:w="8277"/><text x="16.7877%" y="511.50">_start</text></g><g><title>_dl_start (1 samples, 0.01%)</title><rect x="99.6885%" y="485" width="0.0100%" height="15" fill="rgb(246,168,33)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="495.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.01%)</title><rect x="99.6885%" y="469" width="0.0100%" height="15" fill="rgb(231,114,1)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="479.50"></text></g><g><title>dl_main (1 samples, 0.01%)</title><rect x="99.6885%" y="453" width="0.0100%" height="15" fill="rgb(207,184,53)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="463.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.01%)</title><rect x="99.6885%" y="437" width="0.0100%" height="15" fill="rgb(224,95,51)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="447.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.01%)</title><rect x="99.6885%" y="421" width="0.0100%" height="15" fill="rgb(212,188,45)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="431.50"></text></g><g><title>openaux (1 samples, 0.01%)</title><rect x="99.6885%" y="405" width="0.0100%" height="15" fill="rgb(223,154,38)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="415.50"></text></g><g><title>_dl_map_object (1 samples, 0.01%)</title><rect x="99.6885%" y="389" width="0.0100%" height="15" fill="rgb(251,22,52)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="399.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 0.01%)</title><rect x="99.6885%" y="373" width="0.0100%" height="15" fill="rgb(229,209,22)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="383.50"></text></g><g><title>search_cache (1 samples, 0.01%)</title><rect x="99.6885%" y="357" width="0.0100%" height="15" fill="rgb(234,138,34)" fg:x="9922" fg:w="1"/><text x="99.9385%" y="367.50"></text></g><g><title>all (9,953 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(212,95,11)" fg:x="0" fg:w="9953"/><text x="0.2500%" y="543.50"></text></g><g><title>rlox (9,953 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(240,179,47)" fg:x="0" fg:w="9953"/><text x="0.2500%" y="527.50">rlox</text></g><g><title>rlox::vm::VM::push (30 samples, 0.30%)</title><rect x="99.6986%" y="501" width="0.3014%" height="15" fill="rgb(240,163,11)" fg:x="9923" fg:w="30"/><text x="99.9486%" y="511.50"></text></g></svg></svg>
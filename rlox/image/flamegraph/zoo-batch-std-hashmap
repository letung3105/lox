<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="9979"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.60%)</title><rect x="0.0000%" y="485" width="0.6013%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="60"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.55%)</title><rect x="0.6013%" y="485" width="0.5512%" height="15" fill="rgb(217,0,24)" fg:x="60" fg:w="55"/><text x="0.8513%" y="495.50"></text></g><g><title>core::mem::drop (6 samples, 0.06%)</title><rect x="1.0923%" y="469" width="0.0601%" height="15" fill="rgb(221,193,54)" fg:x="109" fg:w="6"/><text x="1.3423%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (6 samples, 0.06%)</title><rect x="1.0923%" y="453" width="0.0601%" height="15" fill="rgb(248,212,6)" fg:x="109" fg:w="6"/><text x="1.3423%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (6 samples, 0.06%)</title><rect x="1.0923%" y="437" width="0.0601%" height="15" fill="rgb(208,68,35)" fg:x="109" fg:w="6"/><text x="1.3423%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (4 samples, 0.04%)</title><rect x="1.1524%" y="485" width="0.0401%" height="15" fill="rgb(232,128,0)" fg:x="115" fg:w="4"/><text x="1.4024%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.03%)</title><rect x="1.1624%" y="469" width="0.0301%" height="15" fill="rgb(207,160,47)" fg:x="116" fg:w="3"/><text x="1.4124%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.03%)</title><rect x="1.1624%" y="453" width="0.0301%" height="15" fill="rgb(228,23,34)" fg:x="116" fg:w="3"/><text x="1.4124%" y="463.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="1.1624%" y="437" width="0.0301%" height="15" fill="rgb(218,30,26)" fg:x="116" fg:w="3"/><text x="1.4124%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.07%)</title><rect x="1.1925%" y="485" width="0.0701%" height="15" fill="rgb(220,122,19)" fg:x="119" fg:w="7"/><text x="1.4425%" y="495.50"></text></g><g><title>rlox::vm::VM::call_closure (3 samples, 0.03%)</title><rect x="1.2627%" y="485" width="0.0301%" height="15" fill="rgb(250,228,42)" fg:x="126" fg:w="3"/><text x="1.5127%" y="495.50"></text></g><g><title>[[heap]] (189 samples, 1.89%)</title><rect x="0.0000%" y="501" width="1.8940%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="189"/><text x="0.2500%" y="511.50">[..</text></g><g><title>rlox::vm::VM::push (60 samples, 0.60%)</title><rect x="1.2927%" y="485" width="0.6013%" height="15" fill="rgb(216,20,37)" fg:x="129" fg:w="60"/><text x="1.5427%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (94 samples, 0.94%)</title><rect x="1.8940%" y="485" width="0.9420%" height="15" fill="rgb(206,188,39)" fg:x="189" fg:w="94"/><text x="2.1440%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.74%)</title><rect x="2.8360%" y="485" width="0.7416%" height="15" fill="rgb(217,207,13)" fg:x="283" fg:w="74"/><text x="3.0860%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.44%)</title><rect x="3.5775%" y="485" width="0.4409%" height="15" fill="rgb(231,73,38)" fg:x="357" fg:w="44"/><text x="3.8275%" y="495.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (38 samples, 0.38%)</title><rect x="4.0184%" y="485" width="0.3808%" height="15" fill="rgb(225,20,46)" fg:x="401" fg:w="38"/><text x="4.2684%" y="495.50"></text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (53 samples, 0.53%)</title><rect x="4.3992%" y="485" width="0.5311%" height="15" fill="rgb(210,31,41)" fg:x="439" fg:w="53"/><text x="4.6492%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (40 samples, 0.40%)</title><rect x="4.9304%" y="485" width="0.4008%" height="15" fill="rgb(221,200,47)" fg:x="492" fg:w="40"/><text x="5.1804%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (101 samples, 1.01%)</title><rect x="5.3312%" y="485" width="1.0121%" height="15" fill="rgb(226,26,5)" fg:x="532" fg:w="101"/><text x="5.5812%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.06%)</title><rect x="6.3433%" y="485" width="0.0601%" height="15" fill="rgb(249,33,26)" fg:x="633" fg:w="6"/><text x="6.5933%" y="495.50"></text></g><g><title>rlox::vm::VM::call_closure (34 samples, 0.34%)</title><rect x="6.4034%" y="485" width="0.3407%" height="15" fill="rgb(235,183,28)" fg:x="639" fg:w="34"/><text x="6.6534%" y="495.50"></text></g><g><title>rlox::vm::VM::close_upvalues (60 samples, 0.60%)</title><rect x="6.7442%" y="485" width="0.6013%" height="15" fill="rgb(221,5,38)" fg:x="673" fg:w="60"/><text x="6.9942%" y="495.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (45 samples, 0.45%)</title><rect x="7.3454%" y="485" width="0.4509%" height="15" fill="rgb(247,18,42)" fg:x="733" fg:w="45"/><text x="7.5954%" y="495.50"></text></g><g><title>rlox::vm::VM::push (189 samples, 1.89%)</title><rect x="7.7964%" y="485" width="1.8940%" height="15" fill="rgb(241,131,45)" fg:x="778" fg:w="189"/><text x="8.0464%" y="495.50">r..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (54 samples, 0.54%)</title><rect x="10.8929%" y="469" width="0.5411%" height="15" fill="rgb(249,31,29)" fg:x="1087" fg:w="54"/><text x="11.1429%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (46 samples, 0.46%)</title><rect x="11.4340%" y="469" width="0.4610%" height="15" fill="rgb(225,111,53)" fg:x="1141" fg:w="46"/><text x="11.6840%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (46 samples, 0.46%)</title><rect x="11.4340%" y="453" width="0.4610%" height="15" fill="rgb(238,160,17)" fg:x="1141" fg:w="46"/><text x="11.6840%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::CallFrame&gt; (1 samples, 0.01%)</title><rect x="11.8950%" y="469" width="0.0100%" height="15" fill="rgb(214,148,48)" fg:x="1187" fg:w="1"/><text x="12.1450%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;rlox::object::ObjClosure&gt;&gt; (1 samples, 0.01%)</title><rect x="11.8950%" y="453" width="0.0100%" height="15" fill="rgb(232,36,49)" fg:x="1187" fg:w="1"/><text x="12.1450%" y="463.50"></text></g><g><title>rlox::vm::VM::invoke (2 samples, 0.02%)</title><rect x="11.9050%" y="469" width="0.0200%" height="15" fill="rgb(209,103,24)" fg:x="1188" fg:w="2"/><text x="12.1550%" y="479.50"></text></g><g><title>rlox::vm::VM::popn (1 samples, 0.01%)</title><rect x="11.9250%" y="469" width="0.0100%" height="15" fill="rgb(229,88,8)" fg:x="1190" fg:w="1"/><text x="12.1750%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;rlox::value::Value&gt;&gt; (1 samples, 0.01%)</title><rect x="11.9250%" y="453" width="0.0100%" height="15" fill="rgb(213,181,19)" fg:x="1190" fg:w="1"/><text x="12.1750%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.10%)</title><rect x="11.9351%" y="469" width="0.1002%" height="15" fill="rgb(254,191,54)" fg:x="1191" fg:w="10"/><text x="12.1851%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.10%)</title><rect x="11.9351%" y="453" width="0.1002%" height="15" fill="rgb(241,83,37)" fg:x="1191" fg:w="10"/><text x="12.1851%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.10%)</title><rect x="11.9351%" y="437" width="0.1002%" height="15" fill="rgb(233,36,39)" fg:x="1191" fg:w="10"/><text x="12.1851%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.10%)</title><rect x="11.9351%" y="421" width="0.1002%" height="15" fill="rgb(226,3,54)" fg:x="1191" fg:w="10"/><text x="12.1851%" y="431.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (10 samples, 0.10%)</title><rect x="11.9351%" y="405" width="0.1002%" height="15" fill="rgb(245,192,40)" fg:x="1191" fg:w="10"/><text x="12.1851%" y="415.50"></text></g><g><title>[[stack]] (1,019 samples, 10.21%)</title><rect x="1.8940%" y="501" width="10.2114%" height="15" fill="rgb(238,167,29)" fg:x="189" fg:w="1019"/><text x="2.1440%" y="511.50">[[stack]]</text></g><g><title>rlox::vm::VM::run (241 samples, 2.42%)</title><rect x="9.6903%" y="485" width="2.4151%" height="15" fill="rgb(232,182,51)" fg:x="967" fg:w="241"/><text x="9.9403%" y="495.50">rl..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.07%)</title><rect x="12.0353%" y="469" width="0.0701%" height="15" fill="rgb(231,60,39)" fg:x="1201" fg:w="7"/><text x="12.2853%" y="479.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (20 samples, 0.20%)</title><rect x="12.1054%" y="485" width="0.2004%" height="15" fill="rgb(208,69,12)" fg:x="1208" fg:w="20"/><text x="12.3554%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (2 samples, 0.02%)</title><rect x="12.3058%" y="485" width="0.0200%" height="15" fill="rgb(235,93,37)" fg:x="1228" fg:w="2"/><text x="12.5558%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (1 samples, 0.01%)</title><rect x="12.3259%" y="485" width="0.0100%" height="15" fill="rgb(213,116,39)" fg:x="1230" fg:w="1"/><text x="12.5759%" y="495.50"></text></g><g><title>[anon] (24 samples, 0.24%)</title><rect x="12.1054%" y="501" width="0.2405%" height="15" fill="rgb(222,207,29)" fg:x="1208" fg:w="24"/><text x="12.3554%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.01%)</title><rect x="12.3359%" y="485" width="0.0100%" height="15" fill="rgb(206,96,30)" fg:x="1231" fg:w="1"/><text x="12.5859%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (7 samples, 0.07%)</title><rect x="12.3459%" y="485" width="0.0701%" height="15" fill="rgb(218,138,4)" fg:x="1232" fg:w="7"/><text x="12.5959%" y="495.50"></text></g><g><title>[rlox] (17 samples, 0.17%)</title><rect x="12.3459%" y="501" width="0.1704%" height="15" fill="rgb(250,191,14)" fg:x="1232" fg:w="17"/><text x="12.5959%" y="511.50"></text></g><g><title>rlox::vm::VM::push (10 samples, 0.10%)</title><rect x="12.4161%" y="485" width="0.1002%" height="15" fill="rgb(239,60,40)" fg:x="1239" fg:w="10"/><text x="12.6661%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (3 samples, 0.03%)</title><rect x="12.5163%" y="485" width="0.0301%" height="15" fill="rgb(206,27,48)" fg:x="1249" fg:w="3"/><text x="12.7663%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.59%)</title><rect x="12.5463%" y="485" width="0.5912%" height="15" fill="rgb(225,35,8)" fg:x="1252" fg:w="59"/><text x="12.7963%" y="495.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (66 samples, 0.66%)</title><rect x="13.1376%" y="485" width="0.6614%" height="15" fill="rgb(250,213,24)" fg:x="1311" fg:w="66"/><text x="13.3876%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.01%)</title><rect x="13.7990%" y="485" width="0.0100%" height="15" fill="rgb(247,123,22)" fg:x="1377" fg:w="1"/><text x="14.0490%" y="495.50"></text></g><g><title>rlox::vm::VM::close_upvalues (4 samples, 0.04%)</title><rect x="13.8090%" y="485" width="0.0401%" height="15" fill="rgb(231,138,38)" fg:x="1378" fg:w="4"/><text x="14.0590%" y="495.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (40 samples, 0.40%)</title><rect x="13.8491%" y="485" width="0.4008%" height="15" fill="rgb(231,145,46)" fg:x="1382" fg:w="40"/><text x="14.0991%" y="495.50"></text></g><g><title>[unknown] (187 samples, 1.87%)</title><rect x="12.5163%" y="501" width="1.8739%" height="15" fill="rgb(251,118,11)" fg:x="1249" fg:w="187"/><text x="12.7663%" y="511.50">[..</text></g><g><title>rlox::vm::VM::push (14 samples, 0.14%)</title><rect x="14.2499%" y="485" width="0.1403%" height="15" fill="rgb(217,147,25)" fg:x="1422" fg:w="14"/><text x="14.4999%" y="495.50"></text></g><g><title>__GI_exit (1 samples, 0.01%)</title><rect x="14.4503%" y="469" width="0.0100%" height="15" fill="rgb(247,81,37)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="479.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.01%)</title><rect x="14.4503%" y="453" width="0.0100%" height="15" fill="rgb(209,12,38)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="463.50"></text></g><g><title>__GI___call_tls_dtors (1 samples, 0.01%)</title><rect x="14.4503%" y="437" width="0.0100%" height="15" fill="rgb(227,1,9)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="447.50"></text></g><g><title>std::thread::local::fast::destroy_value (1 samples, 0.01%)</title><rect x="14.4503%" y="421" width="0.0100%" height="15" fill="rgb(248,47,43)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="431.50"></text></g><g><title>core::mem::drop (1 samples, 0.01%)</title><rect x="14.4503%" y="405" width="0.0100%" height="15" fill="rgb(221,10,30)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::cell::RefCell&lt;string_interner::interner::StringInterner&gt;&gt;&gt; (1 samples, 0.01%)</title><rect x="14.4503%" y="389" width="0.0100%" height="15" fill="rgb(210,229,1)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;string_interner::interner::StringInterner&gt;&gt; (1 samples, 0.01%)</title><rect x="14.4503%" y="373" width="0.0100%" height="15" fill="rgb(222,148,37)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;string_interner::interner::StringInterner&gt;&gt; (1 samples, 0.01%)</title><rect x="14.4503%" y="357" width="0.0100%" height="15" fill="rgb(234,67,33)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;string_interner::interner::StringInterner&gt; (1 samples, 0.01%)</title><rect x="14.4503%" y="341" width="0.0100%" height="15" fill="rgb(247,98,35)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;string_interner::symbol::SymbolU32,(),()&gt;&gt; (1 samples, 0.01%)</title><rect x="14.4503%" y="325" width="0.0100%" height="15" fill="rgb(247,138,52)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(string_interner::symbol::SymbolU32,())&gt;&gt; (1 samples, 0.01%)</title><rect x="14.4503%" y="309" width="0.0100%" height="15" fill="rgb(213,79,30)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="14.4503%" y="293" width="0.0100%" height="15" fill="rgb(246,177,23)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::free_buckets (1 samples, 0.01%)</title><rect x="14.4503%" y="277" width="0.0100%" height="15" fill="rgb(230,62,27)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.01%)</title><rect x="14.4503%" y="261" width="0.0100%" height="15" fill="rgb(216,154,8)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="271.50"></text></g><g><title>__GI___libc_free (1 samples, 0.01%)</title><rect x="14.4503%" y="245" width="0.0100%" height="15" fill="rgb(244,35,45)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="255.50"></text></g><g><title>__GI_munmap (1 samples, 0.01%)</title><rect x="14.4503%" y="229" width="0.0100%" height="15" fill="rgb(251,115,12)" fg:x="1442" fg:w="1"/><text x="14.7003%" y="239.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (90 samples, 0.90%)</title><rect x="23.2789%" y="245" width="0.9019%" height="15" fill="rgb(240,54,50)" fg:x="2323" fg:w="90"/><text x="23.5289%" y="255.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&lt;&amp;f64&gt;&gt;::add (32 samples, 0.32%)</title><rect x="23.8601%" y="229" width="0.3207%" height="15" fill="rgb(233,84,52)" fg:x="2381" fg:w="32"/><text x="24.1101%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (32 samples, 0.32%)</title><rect x="23.8601%" y="213" width="0.3207%" height="15" fill="rgb(207,117,47)" fg:x="2381" fg:w="32"/><text x="24.1101%" y="223.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::bit::Not&gt;::not (6 samples, 0.06%)</title><rect x="24.1808%" y="245" width="0.0601%" height="15" fill="rgb(249,43,39)" fg:x="2413" fg:w="6"/><text x="24.4308%" y="255.50"></text></g><g><title>&lt;&amp;bool as core::ops::bit::Not&gt;::not (2 samples, 0.02%)</title><rect x="24.2209%" y="229" width="0.0200%" height="15" fill="rgb(209,38,44)" fg:x="2417" fg:w="2"/><text x="24.4709%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (43 samples, 0.43%)</title><rect x="24.2409%" y="245" width="0.4309%" height="15" fill="rgb(236,212,23)" fg:x="2419" fg:w="43"/><text x="24.4909%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (43 samples, 0.43%)</title><rect x="24.2409%" y="229" width="0.4309%" height="15" fill="rgb(242,79,21)" fg:x="2419" fg:w="43"/><text x="24.4909%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (39 samples, 0.39%)</title><rect x="24.6718%" y="245" width="0.3908%" height="15" fill="rgb(211,96,35)" fg:x="2462" fg:w="39"/><text x="24.9218%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (39 samples, 0.39%)</title><rect x="24.6718%" y="229" width="0.3908%" height="15" fill="rgb(253,215,40)" fg:x="2462" fg:w="39"/><text x="24.9218%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 0.39%)</title><rect x="24.6718%" y="213" width="0.3908%" height="15" fill="rgb(211,81,21)" fg:x="2462" fg:w="39"/><text x="24.9218%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="25.0626%" y="245" width="0.0100%" height="15" fill="rgb(208,190,38)" fg:x="2501" fg:w="1"/><text x="25.3126%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.01%)</title><rect x="25.0626%" y="229" width="0.0100%" height="15" fill="rgb(235,213,38)" fg:x="2501" fg:w="1"/><text x="25.3126%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.01%)</title><rect x="25.0626%" y="213" width="0.0100%" height="15" fill="rgb(237,122,38)" fg:x="2501" fg:w="1"/><text x="25.3126%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (106 samples, 1.06%)</title><rect x="25.0727%" y="245" width="1.0622%" height="15" fill="rgb(244,218,35)" fg:x="2502" fg:w="106"/><text x="25.3227%" y="255.50"></text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (313 samples, 3.14%)</title><rect x="26.1349%" y="245" width="3.1366%" height="15" fill="rgb(240,68,47)" fg:x="2608" fg:w="313"/><text x="26.3849%" y="255.50">&lt;rl..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (21 samples, 0.21%)</title><rect x="29.0610%" y="229" width="0.2104%" height="15" fill="rgb(210,16,53)" fg:x="2900" fg:w="21"/><text x="29.3110%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (21 samples, 0.21%)</title><rect x="29.0610%" y="213" width="0.2104%" height="15" fill="rgb(235,124,12)" fg:x="2900" fg:w="21"/><text x="29.3110%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="29.2614%" y="197" width="0.0100%" height="15" fill="rgb(224,169,11)" fg:x="2920" fg:w="1"/><text x="29.5114%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="29.2614%" y="181" width="0.0100%" height="15" fill="rgb(250,166,2)" fg:x="2920" fg:w="1"/><text x="29.5114%" y="191.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="29.2614%" y="165" width="0.0100%" height="15" fill="rgb(242,216,29)" fg:x="2920" fg:w="1"/><text x="29.5114%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="29.2614%" y="149" width="0.0100%" height="15" fill="rgb(230,116,27)" fg:x="2920" fg:w="1"/><text x="29.5114%" y="159.50"></text></g><g><title>&lt;rlox::vm::OpCode as core::clone::Clone&gt;::clone (534 samples, 5.35%)</title><rect x="29.2715%" y="245" width="5.3512%" height="15" fill="rgb(228,99,48)" fg:x="2921" fg:w="534"/><text x="29.5215%" y="255.50">&lt;rlox::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (24 samples, 0.24%)</title><rect x="34.6227%" y="245" width="0.2405%" height="15" fill="rgb(253,11,6)" fg:x="3455" fg:w="24"/><text x="34.8727%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (24 samples, 0.24%)</title><rect x="34.8632%" y="245" width="0.2405%" height="15" fill="rgb(247,143,39)" fg:x="3479" fg:w="24"/><text x="35.1132%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13 samples, 0.13%)</title><rect x="34.9734%" y="229" width="0.1303%" height="15" fill="rgb(236,97,10)" fg:x="3490" fg:w="13"/><text x="35.2234%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (13 samples, 0.13%)</title><rect x="34.9734%" y="213" width="0.1303%" height="15" fill="rgb(233,208,19)" fg:x="3490" fg:w="13"/><text x="35.2234%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (16 samples, 0.16%)</title><rect x="35.2139%" y="229" width="0.1603%" height="15" fill="rgb(216,164,2)" fg:x="3514" fg:w="16"/><text x="35.4639%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (32 samples, 0.32%)</title><rect x="35.1037%" y="245" width="0.3207%" height="15" fill="rgb(220,129,5)" fg:x="3503" fg:w="32"/><text x="35.3537%" y="255.50"></text></g><g><title>core::mem::drop (5 samples, 0.05%)</title><rect x="35.3743%" y="229" width="0.0501%" height="15" fill="rgb(242,17,10)" fg:x="3530" fg:w="5"/><text x="35.6243%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjUpvalue&gt;&gt;,alloc::alloc::Global&gt;&gt; (5 samples, 0.05%)</title><rect x="35.3743%" y="213" width="0.0501%" height="15" fill="rgb(242,107,0)" fg:x="3530" fg:w="5"/><text x="35.6243%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.05%)</title><rect x="35.3743%" y="197" width="0.0501%" height="15" fill="rgb(251,28,31)" fg:x="3530" fg:w="5"/><text x="35.6243%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (5 samples, 0.05%)</title><rect x="35.3743%" y="181" width="0.0501%" height="15" fill="rgb(233,223,10)" fg:x="3530" fg:w="5"/><text x="35.6243%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (9 samples, 0.09%)</title><rect x="35.4244%" y="245" width="0.0902%" height="15" fill="rgb(215,21,27)" fg:x="3535" fg:w="9"/><text x="35.6744%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (9 samples, 0.09%)</title><rect x="35.4244%" y="229" width="0.0902%" height="15" fill="rgb(232,23,21)" fg:x="3535" fg:w="9"/><text x="35.6744%" y="239.50"></text></g><g><title>core::cell::BorrowRef::new (9 samples, 0.09%)</title><rect x="35.4244%" y="213" width="0.0902%" height="15" fill="rgb(244,5,23)" fg:x="3535" fg:w="9"/><text x="35.6744%" y="223.50"></text></g><g><title>core::cell::is_reading (9 samples, 0.09%)</title><rect x="35.4244%" y="197" width="0.0902%" height="15" fill="rgb(226,81,46)" fg:x="3535" fg:w="9"/><text x="35.6744%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (22 samples, 0.22%)</title><rect x="35.5146%" y="245" width="0.2205%" height="15" fill="rgb(247,70,30)" fg:x="3544" fg:w="22"/><text x="35.7646%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (47 samples, 0.47%)</title><rect x="35.7350%" y="245" width="0.4710%" height="15" fill="rgb(212,68,19)" fg:x="3566" fg:w="47"/><text x="35.9850%" y="255.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.36%)</title><rect x="35.8453%" y="229" width="0.3608%" height="15" fill="rgb(240,187,13)" fg:x="3577" fg:w="36"/><text x="36.0953%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (13 samples, 0.13%)</title><rect x="36.0758%" y="213" width="0.1303%" height="15" fill="rgb(223,113,26)" fg:x="3600" fg:w="13"/><text x="36.3258%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (13 samples, 0.13%)</title><rect x="36.0758%" y="197" width="0.1303%" height="15" fill="rgb(206,192,2)" fg:x="3600" fg:w="13"/><text x="36.3258%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.13%)</title><rect x="36.0758%" y="181" width="0.1303%" height="15" fill="rgb(241,108,4)" fg:x="3600" fg:w="13"/><text x="36.3258%" y="191.50"></text></g><g><title>core::mem::replace (13 samples, 0.13%)</title><rect x="36.0758%" y="165" width="0.1303%" height="15" fill="rgb(247,173,49)" fg:x="3600" fg:w="13"/><text x="36.3258%" y="175.50"></text></g><g><title>core::ptr::write (13 samples, 0.13%)</title><rect x="36.0758%" y="149" width="0.1303%" height="15" fill="rgb(224,114,35)" fg:x="3600" fg:w="13"/><text x="36.3258%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (32 samples, 0.32%)</title><rect x="36.2060%" y="245" width="0.3207%" height="15" fill="rgb(245,159,27)" fg:x="3613" fg:w="32"/><text x="36.4560%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (32 samples, 0.32%)</title><rect x="36.2060%" y="229" width="0.3207%" height="15" fill="rgb(245,172,44)" fg:x="3613" fg:w="32"/><text x="36.4560%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (32 samples, 0.32%)</title><rect x="36.2060%" y="213" width="0.3207%" height="15" fill="rgb(236,23,11)" fg:x="3613" fg:w="32"/><text x="36.4560%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rlox::value::Value&gt;&gt; (15 samples, 0.15%)</title><rect x="36.5267%" y="245" width="0.1503%" height="15" fill="rgb(205,117,38)" fg:x="3645" fg:w="15"/><text x="36.7767%" y="255.50"></text></g><g><title>rlox::vm::VM::run (9 samples, 0.09%)</title><rect x="36.5868%" y="229" width="0.0902%" height="15" fill="rgb(237,72,25)" fg:x="3651" fg:w="9"/><text x="36.8368%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (96 samples, 0.96%)</title><rect x="36.6770%" y="245" width="0.9620%" height="15" fill="rgb(244,70,9)" fg:x="3660" fg:w="96"/><text x="36.9270%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (88 samples, 0.88%)</title><rect x="36.7572%" y="229" width="0.8819%" height="15" fill="rgb(217,125,39)" fg:x="3668" fg:w="88"/><text x="37.0072%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.57%)</title><rect x="37.0678%" y="213" width="0.5712%" height="15" fill="rgb(235,36,10)" fg:x="3699" fg:w="57"/><text x="37.3178%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (7 samples, 0.07%)</title><rect x="37.5689%" y="197" width="0.0701%" height="15" fill="rgb(251,123,47)" fg:x="3749" fg:w="7"/><text x="37.8189%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7 samples, 0.07%)</title><rect x="37.5689%" y="181" width="0.0701%" height="15" fill="rgb(221,13,13)" fg:x="3749" fg:w="7"/><text x="37.8189%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.07%)</title><rect x="37.5689%" y="165" width="0.0701%" height="15" fill="rgb(238,131,9)" fg:x="3749" fg:w="7"/><text x="37.8189%" y="175.50"></text></g><g><title>core::mem::replace (7 samples, 0.07%)</title><rect x="37.5689%" y="149" width="0.0701%" height="15" fill="rgb(211,50,8)" fg:x="3749" fg:w="7"/><text x="37.8189%" y="159.50"></text></g><g><title>core::ptr::write (7 samples, 0.07%)</title><rect x="37.5689%" y="133" width="0.0701%" height="15" fill="rgb(245,182,24)" fg:x="3749" fg:w="7"/><text x="37.8189%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::CallFrame&gt; (53 samples, 0.53%)</title><rect x="37.6390%" y="245" width="0.5311%" height="15" fill="rgb(242,14,37)" fg:x="3756" fg:w="53"/><text x="37.8890%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;rlox::object::ObjClosure&gt;&gt; (53 samples, 0.53%)</title><rect x="37.6390%" y="229" width="0.5311%" height="15" fill="rgb(246,228,12)" fg:x="3756" fg:w="53"/><text x="37.8890%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.33%)</title><rect x="37.8395%" y="213" width="0.3307%" height="15" fill="rgb(213,55,15)" fg:x="3776" fg:w="33"/><text x="38.0895%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (14 samples, 0.14%)</title><rect x="38.0299%" y="197" width="0.1403%" height="15" fill="rgb(209,9,3)" fg:x="3795" fg:w="14"/><text x="38.2799%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (14 samples, 0.14%)</title><rect x="38.0299%" y="181" width="0.1403%" height="15" fill="rgb(230,59,30)" fg:x="3795" fg:w="14"/><text x="38.2799%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (14 samples, 0.14%)</title><rect x="38.0299%" y="165" width="0.1403%" height="15" fill="rgb(209,121,21)" fg:x="3795" fg:w="14"/><text x="38.2799%" y="175.50"></text></g><g><title>core::mem::replace (14 samples, 0.14%)</title><rect x="38.0299%" y="149" width="0.1403%" height="15" fill="rgb(220,109,13)" fg:x="3795" fg:w="14"/><text x="38.2799%" y="159.50"></text></g><g><title>core::ptr::write (14 samples, 0.14%)</title><rect x="38.0299%" y="133" width="0.1403%" height="15" fill="rgb(232,18,1)" fg:x="3795" fg:w="14"/><text x="38.2799%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::OpCode&gt; (192 samples, 1.92%)</title><rect x="38.1702%" y="245" width="1.9240%" height="15" fill="rgb(215,41,42)" fg:x="3809" fg:w="192"/><text x="38.4202%" y="255.50">c..</text></g><g><title>rlox::value::Value::as_str (67 samples, 0.67%)</title><rect x="40.0942%" y="245" width="0.6714%" height="15" fill="rgb(224,123,36)" fg:x="4001" fg:w="67"/><text x="40.3442%" y="255.50"></text></g><g><title>rlox::value::Value::is_instance (25 samples, 0.25%)</title><rect x="40.7656%" y="245" width="0.2505%" height="15" fill="rgb(240,125,3)" fg:x="4068" fg:w="25"/><text x="41.0156%" y="255.50"></text></g><g><title>rlox::value::Value::lt (11 samples, 0.11%)</title><rect x="41.0161%" y="245" width="0.1102%" height="15" fill="rgb(205,98,50)" fg:x="4093" fg:w="11"/><text x="41.2661%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (3 samples, 0.03%)</title><rect x="41.0963%" y="229" width="0.0301%" height="15" fill="rgb(205,185,37)" fg:x="4101" fg:w="3"/><text x="41.3463%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (3 samples, 0.03%)</title><rect x="41.0963%" y="213" width="0.0301%" height="15" fill="rgb(238,207,15)" fg:x="4101" fg:w="3"/><text x="41.3463%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.01%)</title><rect x="41.3568%" y="229" width="0.0100%" height="15" fill="rgb(213,199,42)" fg:x="4127" fg:w="1"/><text x="41.6068%" y="239.50"></text></g><g><title>rlox::vm::VM::close_upvalues (27 samples, 0.27%)</title><rect x="41.1264%" y="245" width="0.2706%" height="15" fill="rgb(235,201,11)" fg:x="4104" fg:w="27"/><text x="41.3764%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (3 samples, 0.03%)</title><rect x="41.3669%" y="229" width="0.0301%" height="15" fill="rgb(207,46,11)" fg:x="4128" fg:w="3"/><text x="41.6169%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (3 samples, 0.03%)</title><rect x="41.3669%" y="213" width="0.0301%" height="15" fill="rgb(241,35,35)" fg:x="4128" fg:w="3"/><text x="41.6169%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.03%)</title><rect x="41.3669%" y="197" width="0.0301%" height="15" fill="rgb(243,32,47)" fg:x="4128" fg:w="3"/><text x="41.6169%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.03%)</title><rect x="41.3669%" y="181" width="0.0301%" height="15" fill="rgb(247,202,23)" fg:x="4128" fg:w="3"/><text x="41.6169%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (46 samples, 0.46%)</title><rect x="41.3969%" y="229" width="0.4610%" height="15" fill="rgb(219,102,11)" fg:x="4131" fg:w="46"/><text x="41.6469%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (33 samples, 0.33%)</title><rect x="41.5272%" y="213" width="0.3307%" height="15" fill="rgb(243,110,44)" fg:x="4144" fg:w="33"/><text x="41.7772%" y="223.50"></text></g><g><title>rlox::vm::VM::frame (47 samples, 0.47%)</title><rect x="41.3969%" y="245" width="0.4710%" height="15" fill="rgb(222,74,54)" fg:x="4131" fg:w="47"/><text x="41.6469%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.01%)</title><rect x="41.8579%" y="229" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="4177" fg:w="1"/><text x="42.1079%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.01%)</title><rect x="41.8679%" y="229" width="0.0100%" height="15" fill="rgb(226,22,26)" fg:x="4178" fg:w="1"/><text x="42.1179%" y="239.50"></text></g><g><title>rlox::vm::VM::frame_mut (12 samples, 0.12%)</title><rect x="41.8679%" y="245" width="0.1203%" height="15" fill="rgb(217,163,10)" fg:x="4178" fg:w="12"/><text x="42.1179%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (11 samples, 0.11%)</title><rect x="41.8779%" y="229" width="0.1102%" height="15" fill="rgb(213,25,53)" fg:x="4179" fg:w="11"/><text x="42.1279%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (44 samples, 0.44%)</title><rect x="42.1786%" y="229" width="0.4409%" height="15" fill="rgb(252,105,26)" fg:x="4209" fg:w="44"/><text x="42.4286%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (44 samples, 0.44%)</title><rect x="42.1786%" y="213" width="0.4409%" height="15" fill="rgb(220,39,43)" fg:x="4209" fg:w="44"/><text x="42.4286%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="42.5995%" y="197" width="0.0200%" height="15" fill="rgb(229,68,48)" fg:x="4251" fg:w="2"/><text x="42.8495%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.02%)</title><rect x="42.5995%" y="181" width="0.0200%" height="15" fill="rgb(252,8,32)" fg:x="4251" fg:w="2"/><text x="42.8495%" y="191.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="42.5995%" y="165" width="0.0200%" height="15" fill="rgb(223,20,43)" fg:x="4251" fg:w="2"/><text x="42.8495%" y="175.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="42.5995%" y="149" width="0.0200%" height="15" fill="rgb(229,81,49)" fg:x="4251" fg:w="2"/><text x="42.8495%" y="159.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.01%)</title><rect x="42.6195%" y="181" width="0.0100%" height="15" fill="rgb(236,28,36)" fg:x="4253" fg:w="1"/><text x="42.8695%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.01%)</title><rect x="42.6195%" y="165" width="0.0100%" height="15" fill="rgb(249,185,26)" fg:x="4253" fg:w="1"/><text x="42.8695%" y="175.50"></text></g><g><title>core::mem::replace (1 samples, 0.01%)</title><rect x="42.6195%" y="149" width="0.0100%" height="15" fill="rgb(249,174,33)" fg:x="4253" fg:w="1"/><text x="42.8695%" y="159.50"></text></g><g><title>core::ptr::write (1 samples, 0.01%)</title><rect x="42.6195%" y="133" width="0.0100%" height="15" fill="rgb(233,201,37)" fg:x="4253" fg:w="1"/><text x="42.8695%" y="143.50"></text></g><g><title>core::cell::is_reading (3 samples, 0.03%)</title><rect x="42.6295%" y="181" width="0.0301%" height="15" fill="rgb(221,78,26)" fg:x="4254" fg:w="3"/><text x="42.8795%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (17 samples, 0.17%)</title><rect x="42.6195%" y="229" width="0.1704%" height="15" fill="rgb(250,127,30)" fg:x="4253" fg:w="17"/><text x="42.8695%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (17 samples, 0.17%)</title><rect x="42.6195%" y="213" width="0.1704%" height="15" fill="rgb(230,49,44)" fg:x="4253" fg:w="17"/><text x="42.8695%" y="223.50"></text></g><g><title>core::cell::BorrowRef::new (17 samples, 0.17%)</title><rect x="42.6195%" y="197" width="0.1704%" height="15" fill="rgb(229,67,23)" fg:x="4253" fg:w="17"/><text x="42.8695%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (13 samples, 0.13%)</title><rect x="42.6596%" y="181" width="0.1303%" height="15" fill="rgb(249,83,47)" fg:x="4257" fg:w="13"/><text x="42.9096%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (47 samples, 0.47%)</title><rect x="42.7899%" y="229" width="0.4710%" height="15" fill="rgb(215,43,3)" fg:x="4270" fg:w="47"/><text x="43.0399%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.47%)</title><rect x="42.7899%" y="213" width="0.4710%" height="15" fill="rgb(238,154,13)" fg:x="4270" fg:w="47"/><text x="43.0399%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (15 samples, 0.15%)</title><rect x="43.1105%" y="197" width="0.1503%" height="15" fill="rgb(219,56,2)" fg:x="4302" fg:w="15"/><text x="43.3605%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (15 samples, 0.15%)</title><rect x="43.1105%" y="181" width="0.1503%" height="15" fill="rgb(233,0,4)" fg:x="4302" fg:w="15"/><text x="43.3605%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (15 samples, 0.15%)</title><rect x="43.1105%" y="165" width="0.1503%" height="15" fill="rgb(235,30,7)" fg:x="4302" fg:w="15"/><text x="43.3605%" y="175.50"></text></g><g><title>core::mem::replace (15 samples, 0.15%)</title><rect x="43.1105%" y="149" width="0.1503%" height="15" fill="rgb(250,79,13)" fg:x="4302" fg:w="15"/><text x="43.3605%" y="159.50"></text></g><g><title>core::ptr::write (15 samples, 0.15%)</title><rect x="43.1105%" y="133" width="0.1503%" height="15" fill="rgb(211,146,34)" fg:x="4302" fg:w="15"/><text x="43.3605%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (32 samples, 0.32%)</title><rect x="43.2608%" y="229" width="0.3207%" height="15" fill="rgb(228,22,38)" fg:x="4317" fg:w="32"/><text x="43.5108%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (32 samples, 0.32%)</title><rect x="43.2608%" y="213" width="0.3207%" height="15" fill="rgb(235,168,5)" fg:x="4317" fg:w="32"/><text x="43.5108%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (32 samples, 0.32%)</title><rect x="43.2608%" y="197" width="0.3207%" height="15" fill="rgb(221,155,16)" fg:x="4317" fg:w="32"/><text x="43.5108%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (32 samples, 0.32%)</title><rect x="43.2608%" y="181" width="0.3207%" height="15" fill="rgb(215,215,53)" fg:x="4317" fg:w="32"/><text x="43.5108%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (32 samples, 0.32%)</title><rect x="43.2608%" y="165" width="0.3207%" height="15" fill="rgb(223,4,10)" fg:x="4317" fg:w="32"/><text x="43.5108%" y="175.50"></text></g><g><title>core::mem::replace (32 samples, 0.32%)</title><rect x="43.2608%" y="149" width="0.3207%" height="15" fill="rgb(234,103,6)" fg:x="4317" fg:w="32"/><text x="43.5108%" y="159.50"></text></g><g><title>core::ptr::write (32 samples, 0.32%)</title><rect x="43.2608%" y="133" width="0.3207%" height="15" fill="rgb(227,97,0)" fg:x="4317" fg:w="32"/><text x="43.5108%" y="143.50"></text></g><g><title>rlox::value::Value::as_instance (19 samples, 0.19%)</title><rect x="43.5815%" y="229" width="0.1904%" height="15" fill="rgb(234,150,53)" fg:x="4349" fg:w="19"/><text x="43.8315%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (45 samples, 0.45%)</title><rect x="44.7039%" y="213" width="0.4509%" height="15" fill="rgb(228,201,54)" fg:x="4461" fg:w="45"/><text x="44.9539%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (45 samples, 0.45%)</title><rect x="44.7039%" y="197" width="0.4509%" height="15" fill="rgb(222,22,37)" fg:x="4461" fg:w="45"/><text x="44.9539%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.02%)</title><rect x="45.1348%" y="181" width="0.0200%" height="15" fill="rgb(237,53,32)" fg:x="4504" fg:w="2"/><text x="45.3848%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.02%)</title><rect x="45.1348%" y="165" width="0.0200%" height="15" fill="rgb(233,25,53)" fg:x="4504" fg:w="2"/><text x="45.3848%" y="175.50"></text></g><g><title>core::mem::replace (2 samples, 0.02%)</title><rect x="45.1348%" y="149" width="0.0200%" height="15" fill="rgb(210,40,34)" fg:x="4504" fg:w="2"/><text x="45.3848%" y="159.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="45.1348%" y="133" width="0.0200%" height="15" fill="rgb(241,220,44)" fg:x="4504" fg:w="2"/><text x="45.3848%" y="143.50"></text></g><g><title>core::cell::BorrowRef::new (19 samples, 0.19%)</title><rect x="45.1548%" y="181" width="0.1904%" height="15" fill="rgb(235,28,35)" fg:x="4506" fg:w="19"/><text x="45.4048%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (19 samples, 0.19%)</title><rect x="45.1548%" y="165" width="0.1904%" height="15" fill="rgb(210,56,17)" fg:x="4506" fg:w="19"/><text x="45.4048%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (19 samples, 0.19%)</title><rect x="45.1548%" y="149" width="0.1904%" height="15" fill="rgb(224,130,29)" fg:x="4506" fg:w="19"/><text x="45.4048%" y="159.50"></text></g><g><title>core::mem::replace (19 samples, 0.19%)</title><rect x="45.1548%" y="133" width="0.1904%" height="15" fill="rgb(235,212,8)" fg:x="4506" fg:w="19"/><text x="45.4048%" y="143.50"></text></g><g><title>core::ptr::write (19 samples, 0.19%)</title><rect x="45.1548%" y="117" width="0.1904%" height="15" fill="rgb(223,33,50)" fg:x="4506" fg:w="19"/><text x="45.4048%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (30 samples, 0.30%)</title><rect x="45.1548%" y="213" width="0.3006%" height="15" fill="rgb(219,149,13)" fg:x="4506" fg:w="30"/><text x="45.4048%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (30 samples, 0.30%)</title><rect x="45.1548%" y="197" width="0.3006%" height="15" fill="rgb(250,156,29)" fg:x="4506" fg:w="30"/><text x="45.4048%" y="207.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (11 samples, 0.11%)</title><rect x="45.3452%" y="181" width="0.1102%" height="15" fill="rgb(216,193,19)" fg:x="4525" fg:w="11"/><text x="45.5952%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (31 samples, 0.31%)</title><rect x="46.6379%" y="181" width="0.3107%" height="15" fill="rgb(216,135,14)" fg:x="4654" fg:w="31"/><text x="46.8879%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.31%)</title><rect x="46.6379%" y="165" width="0.3107%" height="15" fill="rgb(241,47,5)" fg:x="4654" fg:w="31"/><text x="46.8879%" y="175.50"></text></g><g><title>rlox::vm::VM::call_closure (221 samples, 2.21%)</title><rect x="45.4555%" y="213" width="2.2147%" height="15" fill="rgb(233,42,35)" fg:x="4536" fg:w="221"/><text x="45.7055%" y="223.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (104 samples, 1.04%)</title><rect x="46.6279%" y="197" width="1.0422%" height="15" fill="rgb(231,13,6)" fg:x="4653" fg:w="104"/><text x="46.8779%" y="207.50"></text></g><g><title>core::ptr::write (72 samples, 0.72%)</title><rect x="46.9486%" y="181" width="0.7215%" height="15" fill="rgb(207,181,40)" fg:x="4685" fg:w="72"/><text x="47.1986%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22 samples, 0.22%)</title><rect x="48.2613%" y="85" width="0.2205%" height="15" fill="rgb(254,173,49)" fg:x="4816" fg:w="22"/><text x="48.5113%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (40 samples, 0.40%)</title><rect x="48.2012%" y="101" width="0.4008%" height="15" fill="rgb(221,1,38)" fg:x="4810" fg:w="40"/><text x="48.4512%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (12 samples, 0.12%)</title><rect x="48.4818%" y="85" width="0.1203%" height="15" fill="rgb(206,124,46)" fg:x="4838" fg:w="12"/><text x="48.7318%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (69 samples, 0.69%)</title><rect x="48.9829%" y="85" width="0.6915%" height="15" fill="rgb(249,21,11)" fg:x="4888" fg:w="69"/><text x="49.2329%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (225 samples, 2.25%)</title><rect x="47.7202%" y="149" width="2.2547%" height="15" fill="rgb(222,201,40)" fg:x="4762" fg:w="225"/><text x="47.9702%" y="159.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (225 samples, 2.25%)</title><rect x="47.7202%" y="133" width="2.2547%" height="15" fill="rgb(235,61,29)" fg:x="4762" fg:w="225"/><text x="47.9702%" y="143.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (225 samples, 2.25%)</title><rect x="47.7202%" y="117" width="2.2547%" height="15" fill="rgb(219,207,3)" fg:x="4762" fg:w="225"/><text x="47.9702%" y="127.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (137 samples, 1.37%)</title><rect x="48.6021%" y="101" width="1.3729%" height="15" fill="rgb(222,56,46)" fg:x="4850" fg:w="137"/><text x="48.8521%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (30 samples, 0.30%)</title><rect x="49.6743%" y="85" width="0.3006%" height="15" fill="rgb(239,76,54)" fg:x="4957" fg:w="30"/><text x="49.9243%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (68 samples, 0.68%)</title><rect x="49.9749%" y="149" width="0.6814%" height="15" fill="rgb(231,124,27)" fg:x="4987" fg:w="68"/><text x="50.2249%" y="159.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (31 samples, 0.31%)</title><rect x="50.3457%" y="133" width="0.3107%" height="15" fill="rgb(249,195,6)" fg:x="5024" fg:w="31"/><text x="50.5957%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (30 samples, 0.30%)</title><rect x="50.3557%" y="117" width="0.3006%" height="15" fill="rgb(237,174,47)" fg:x="5025" fg:w="30"/><text x="50.6057%" y="127.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (30 samples, 0.30%)</title><rect x="50.3557%" y="101" width="0.3006%" height="15" fill="rgb(206,201,31)" fg:x="5025" fg:w="30"/><text x="50.6057%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (399 samples, 4.00%)</title><rect x="47.6801%" y="165" width="3.9984%" height="15" fill="rgb(231,57,52)" fg:x="4758" fg:w="399"/><text x="47.9301%" y="175.50">hash..</text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (102 samples, 1.02%)</title><rect x="50.6564%" y="149" width="1.0221%" height="15" fill="rgb(248,177,22)" fg:x="5055" fg:w="102"/><text x="50.9064%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (102 samples, 1.02%)</title><rect x="50.6564%" y="133" width="1.0221%" height="15" fill="rgb(215,211,37)" fg:x="5055" fg:w="102"/><text x="50.9064%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (89 samples, 0.89%)</title><rect x="50.7867%" y="117" width="0.8919%" height="15" fill="rgb(241,128,51)" fg:x="5068" fg:w="89"/><text x="51.0367%" y="127.50"></text></g><g><title>core::hash::Hasher::write_u32 (89 samples, 0.89%)</title><rect x="50.7867%" y="101" width="0.8919%" height="15" fill="rgb(227,165,31)" fg:x="5068" fg:w="89"/><text x="51.0367%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (89 samples, 0.89%)</title><rect x="50.7867%" y="85" width="0.8919%" height="15" fill="rgb(228,167,24)" fg:x="5068" fg:w="89"/><text x="51.0367%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (89 samples, 0.89%)</title><rect x="50.7867%" y="69" width="0.8919%" height="15" fill="rgb(228,143,12)" fg:x="5068" fg:w="89"/><text x="51.0367%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (89 samples, 0.89%)</title><rect x="50.7867%" y="53" width="0.8919%" height="15" fill="rgb(249,149,8)" fg:x="5068" fg:w="89"/><text x="51.0367%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (56 samples, 0.56%)</title><rect x="51.1173%" y="37" width="0.5612%" height="15" fill="rgb(243,35,44)" fg:x="5101" fg:w="56"/><text x="51.3673%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.29%)</title><rect x="52.0393%" y="117" width="0.2906%" height="15" fill="rgb(246,89,9)" fg:x="5193" fg:w="29"/><text x="52.2893%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.22%)</title><rect x="52.1094%" y="101" width="0.2205%" height="15" fill="rgb(233,213,13)" fg:x="5200" fg:w="22"/><text x="52.3594%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (22 samples, 0.22%)</title><rect x="52.1094%" y="85" width="0.2205%" height="15" fill="rgb(233,141,41)" fg:x="5200" fg:w="22"/><text x="52.3594%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.38%)</title><rect x="52.0393%" y="133" width="0.3808%" height="15" fill="rgb(239,167,4)" fg:x="5193" fg:w="38"/><text x="52.2893%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (9 samples, 0.09%)</title><rect x="52.3299%" y="117" width="0.0902%" height="15" fill="rgb(209,217,16)" fg:x="5222" fg:w="9"/><text x="52.5799%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (9 samples, 0.09%)</title><rect x="52.3299%" y="101" width="0.0902%" height="15" fill="rgb(219,88,35)" fg:x="5222" fg:w="9"/><text x="52.5799%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9 samples, 0.09%)</title><rect x="52.3299%" y="85" width="0.0902%" height="15" fill="rgb(220,193,23)" fg:x="5222" fg:w="9"/><text x="52.5799%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.09%)</title><rect x="52.3299%" y="69" width="0.0902%" height="15" fill="rgb(230,90,52)" fg:x="5222" fg:w="9"/><text x="52.5799%" y="79.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (17 samples, 0.17%)</title><rect x="52.4201%" y="133" width="0.1704%" height="15" fill="rgb(252,106,19)" fg:x="5231" fg:w="17"/><text x="52.6701%" y="143.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (17 samples, 0.17%)</title><rect x="52.4201%" y="117" width="0.1704%" height="15" fill="rgb(206,74,20)" fg:x="5231" fg:w="17"/><text x="52.6701%" y="127.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (17 samples, 0.17%)</title><rect x="52.4201%" y="101" width="0.1704%" height="15" fill="rgb(230,138,44)" fg:x="5231" fg:w="17"/><text x="52.6701%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (5 samples, 0.05%)</title><rect x="52.6405%" y="85" width="0.0501%" height="15" fill="rgb(235,182,43)" fg:x="5253" fg:w="5"/><text x="52.8905%" y="95.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.05%)</title><rect x="52.6907%" y="85" width="0.0501%" height="15" fill="rgb(242,16,51)" fg:x="5258" fg:w="5"/><text x="52.9407%" y="95.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (911 samples, 9.13%)</title><rect x="43.7719%" y="229" width="9.1292%" height="15" fill="rgb(248,9,4)" fg:x="4368" fg:w="911"/><text x="44.0219%" y="239.50">rlox::vm::VM:..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (522 samples, 5.23%)</title><rect x="47.6701%" y="213" width="5.2310%" height="15" fill="rgb(210,31,22)" fg:x="4757" fg:w="522"/><text x="47.9201%" y="223.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (522 samples, 5.23%)</title><rect x="47.6701%" y="197" width="5.2310%" height="15" fill="rgb(239,54,39)" fg:x="4757" fg:w="522"/><text x="47.9201%" y="207.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (522 samples, 5.23%)</title><rect x="47.6701%" y="181" width="5.2310%" height="15" fill="rgb(230,99,41)" fg:x="4757" fg:w="522"/><text x="47.9201%" y="191.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (122 samples, 1.22%)</title><rect x="51.6785%" y="165" width="1.2226%" height="15" fill="rgb(253,106,12)" fg:x="5157" fg:w="122"/><text x="51.9285%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (122 samples, 1.22%)</title><rect x="51.6785%" y="149" width="1.2226%" height="15" fill="rgb(213,46,41)" fg:x="5157" fg:w="122"/><text x="51.9285%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (31 samples, 0.31%)</title><rect x="52.5904%" y="133" width="0.3107%" height="15" fill="rgb(215,133,35)" fg:x="5248" fg:w="31"/><text x="52.8404%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (31 samples, 0.31%)</title><rect x="52.5904%" y="117" width="0.3107%" height="15" fill="rgb(213,28,5)" fg:x="5248" fg:w="31"/><text x="52.8404%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (31 samples, 0.31%)</title><rect x="52.5904%" y="101" width="0.3107%" height="15" fill="rgb(215,77,49)" fg:x="5248" fg:w="31"/><text x="52.8404%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (16 samples, 0.16%)</title><rect x="52.7408%" y="85" width="0.1603%" height="15" fill="rgb(248,100,22)" fg:x="5263" fg:w="16"/><text x="52.9908%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.16%)</title><rect x="52.7408%" y="69" width="0.1603%" height="15" fill="rgb(208,67,9)" fg:x="5263" fg:w="16"/><text x="52.9908%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.16%)</title><rect x="52.7408%" y="53" width="0.1603%" height="15" fill="rgb(219,133,21)" fg:x="5263" fg:w="16"/><text x="52.9908%" y="63.50"></text></g><g><title>rlox::vm::VM::peek (48 samples, 0.48%)</title><rect x="52.9011%" y="229" width="0.4810%" height="15" fill="rgb(246,46,29)" fg:x="5279" fg:w="48"/><text x="53.1511%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.23%)</title><rect x="53.1516%" y="213" width="0.2305%" height="15" fill="rgb(246,185,52)" fg:x="5304" fg:w="23"/><text x="53.4016%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (23 samples, 0.23%)</title><rect x="53.1516%" y="197" width="0.2305%" height="15" fill="rgb(252,136,11)" fg:x="5304" fg:w="23"/><text x="53.4016%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25 samples, 0.25%)</title><rect x="54.1437%" y="101" width="0.2505%" height="15" fill="rgb(219,138,53)" fg:x="5403" fg:w="25"/><text x="54.3937%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (45 samples, 0.45%)</title><rect x="54.0034%" y="117" width="0.4509%" height="15" fill="rgb(211,51,23)" fg:x="5389" fg:w="45"/><text x="54.2534%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.06%)</title><rect x="54.3942%" y="101" width="0.0601%" height="15" fill="rgb(247,221,28)" fg:x="5428" fg:w="6"/><text x="54.6442%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (69 samples, 0.69%)</title><rect x="54.8452%" y="101" width="0.6915%" height="15" fill="rgb(251,222,45)" fg:x="5473" fg:w="69"/><text x="55.0952%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (213 samples, 2.13%)</title><rect x="53.6627%" y="165" width="2.1345%" height="15" fill="rgb(217,162,53)" fg:x="5355" fg:w="213"/><text x="53.9127%" y="175.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (213 samples, 2.13%)</title><rect x="53.6627%" y="149" width="2.1345%" height="15" fill="rgb(229,93,14)" fg:x="5355" fg:w="213"/><text x="53.9127%" y="159.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (213 samples, 2.13%)</title><rect x="53.6627%" y="133" width="2.1345%" height="15" fill="rgb(209,67,49)" fg:x="5355" fg:w="213"/><text x="53.9127%" y="143.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (134 samples, 1.34%)</title><rect x="54.4544%" y="117" width="1.3428%" height="15" fill="rgb(213,87,29)" fg:x="5434" fg:w="134"/><text x="54.7044%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.26%)</title><rect x="55.5366%" y="101" width="0.2605%" height="15" fill="rgb(205,151,52)" fg:x="5542" fg:w="26"/><text x="55.7866%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (48 samples, 0.48%)</title><rect x="55.7972%" y="165" width="0.4810%" height="15" fill="rgb(253,215,39)" fg:x="5568" fg:w="48"/><text x="56.0472%" y="175.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (19 samples, 0.19%)</title><rect x="56.0878%" y="149" width="0.1904%" height="15" fill="rgb(221,220,41)" fg:x="5597" fg:w="19"/><text x="56.3378%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12 samples, 0.12%)</title><rect x="56.1579%" y="133" width="0.1203%" height="15" fill="rgb(218,133,21)" fg:x="5604" fg:w="12"/><text x="56.4079%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12 samples, 0.12%)</title><rect x="56.1579%" y="117" width="0.1203%" height="15" fill="rgb(221,193,43)" fg:x="5604" fg:w="12"/><text x="56.4079%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (63 samples, 0.63%)</title><rect x="56.4185%" y="69" width="0.6313%" height="15" fill="rgb(240,128,52)" fg:x="5630" fg:w="63"/><text x="56.6685%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (33 samples, 0.33%)</title><rect x="56.7191%" y="53" width="0.3307%" height="15" fill="rgb(253,114,12)" fg:x="5660" fg:w="33"/><text x="56.9691%" y="63.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="57.0398%" y="37" width="0.0100%" height="15" fill="rgb(215,223,47)" fg:x="5692" fg:w="1"/><text x="57.2898%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (354 samples, 3.55%)</title><rect x="53.5324%" y="181" width="3.5474%" height="15" fill="rgb(248,225,23)" fg:x="5342" fg:w="354"/><text x="53.7824%" y="191.50">hash..</text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (80 samples, 0.80%)</title><rect x="56.2782%" y="165" width="0.8017%" height="15" fill="rgb(250,108,0)" fg:x="5616" fg:w="80"/><text x="56.5282%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (80 samples, 0.80%)</title><rect x="56.2782%" y="149" width="0.8017%" height="15" fill="rgb(228,208,7)" fg:x="5616" fg:w="80"/><text x="56.5282%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (66 samples, 0.66%)</title><rect x="56.4185%" y="133" width="0.6614%" height="15" fill="rgb(244,45,10)" fg:x="5630" fg:w="66"/><text x="56.6685%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u32 (66 samples, 0.66%)</title><rect x="56.4185%" y="117" width="0.6614%" height="15" fill="rgb(207,125,25)" fg:x="5630" fg:w="66"/><text x="56.6685%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (66 samples, 0.66%)</title><rect x="56.4185%" y="101" width="0.6614%" height="15" fill="rgb(210,195,18)" fg:x="5630" fg:w="66"/><text x="56.6685%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (66 samples, 0.66%)</title><rect x="56.4185%" y="85" width="0.6614%" height="15" fill="rgb(249,80,12)" fg:x="5630" fg:w="66"/><text x="56.6685%" y="95.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (3 samples, 0.03%)</title><rect x="57.0498%" y="69" width="0.0301%" height="15" fill="rgb(221,65,9)" fg:x="5693" fg:w="3"/><text x="57.2998%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.09%)</title><rect x="57.4406%" y="149" width="0.0902%" height="15" fill="rgb(235,49,36)" fg:x="5732" fg:w="9"/><text x="57.6906%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.09%)</title><rect x="57.4406%" y="133" width="0.0902%" height="15" fill="rgb(225,32,20)" fg:x="5732" fg:w="9"/><text x="57.6906%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.02%)</title><rect x="57.5909%" y="101" width="0.0200%" height="15" fill="rgb(215,141,46)" fg:x="5747" fg:w="2"/><text x="57.8409%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (5 samples, 0.05%)</title><rect x="57.6110%" y="101" width="0.0501%" height="15" fill="rgb(250,160,47)" fg:x="5749" fg:w="5"/><text x="57.8610%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (22 samples, 0.22%)</title><rect x="57.6611%" y="101" width="0.2205%" height="15" fill="rgb(216,222,40)" fg:x="5754" fg:w="22"/><text x="57.9111%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (22 samples, 0.22%)</title><rect x="57.6611%" y="85" width="0.2205%" height="15" fill="rgb(234,217,39)" fg:x="5754" fg:w="22"/><text x="57.9111%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.22%)</title><rect x="57.6611%" y="69" width="0.2205%" height="15" fill="rgb(207,178,40)" fg:x="5754" fg:w="22"/><text x="57.9111%" y="79.50"></text></g><g><title>rlox::vm::VM::invoke (1,589 samples, 15.92%)</title><rect x="41.9882%" y="245" width="15.9234%" height="15" fill="rgb(221,136,13)" fg:x="4190" fg:w="1589"/><text x="42.2382%" y="255.50">rlox::vm::VM::invoke</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (452 samples, 4.53%)</title><rect x="53.3821%" y="229" width="4.5295%" height="15" fill="rgb(249,199,10)" fg:x="5327" fg:w="452"/><text x="53.6321%" y="239.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (452 samples, 4.53%)</title><rect x="53.3821%" y="213" width="4.5295%" height="15" fill="rgb(249,222,13)" fg:x="5327" fg:w="452"/><text x="53.6321%" y="223.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (452 samples, 4.53%)</title><rect x="53.3821%" y="197" width="4.5295%" height="15" fill="rgb(244,185,38)" fg:x="5327" fg:w="452"/><text x="53.6321%" y="207.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (83 samples, 0.83%)</title><rect x="57.0799%" y="181" width="0.8317%" height="15" fill="rgb(236,202,9)" fg:x="5696" fg:w="83"/><text x="57.3299%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (83 samples, 0.83%)</title><rect x="57.0799%" y="165" width="0.8317%" height="15" fill="rgb(250,229,37)" fg:x="5696" fg:w="83"/><text x="57.3299%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (38 samples, 0.38%)</title><rect x="57.5308%" y="149" width="0.3808%" height="15" fill="rgb(206,174,23)" fg:x="5741" fg:w="38"/><text x="57.7808%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (38 samples, 0.38%)</title><rect x="57.5308%" y="133" width="0.3808%" height="15" fill="rgb(211,33,43)" fg:x="5741" fg:w="38"/><text x="57.7808%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (38 samples, 0.38%)</title><rect x="57.5308%" y="117" width="0.3808%" height="15" fill="rgb(245,58,50)" fg:x="5741" fg:w="38"/><text x="57.7808%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.03%)</title><rect x="57.8816%" y="101" width="0.0301%" height="15" fill="rgb(244,68,36)" fg:x="5776" fg:w="3"/><text x="58.1316%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.03%)</title><rect x="57.8816%" y="85" width="0.0301%" height="15" fill="rgb(232,229,15)" fg:x="5776" fg:w="3"/><text x="58.1316%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.03%)</title><rect x="57.8816%" y="69" width="0.0301%" height="15" fill="rgb(254,30,23)" fg:x="5776" fg:w="3"/><text x="58.1316%" y="79.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.03%)</title><rect x="57.8816%" y="53" width="0.0301%" height="15" fill="rgb(235,160,14)" fg:x="5776" fg:w="3"/><text x="58.1316%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (138 samples, 1.38%)</title><rect x="62.5313%" y="197" width="1.3829%" height="15" fill="rgb(212,155,44)" fg:x="6240" fg:w="138"/><text x="62.7813%" y="207.50"></text></g><g><title>rlox::chunk::Chunk::read_instruction (326 samples, 3.27%)</title><rect x="62.5313%" y="229" width="3.2669%" height="15" fill="rgb(226,2,50)" fg:x="6240" fg:w="326"/><text x="62.7813%" y="239.50">rlo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (326 samples, 3.27%)</title><rect x="62.5313%" y="213" width="3.2669%" height="15" fill="rgb(234,177,6)" fg:x="6240" fg:w="326"/><text x="62.7813%" y="223.50">&lt;al..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (188 samples, 1.88%)</title><rect x="63.9142%" y="197" width="1.8840%" height="15" fill="rgb(217,24,9)" fg:x="6378" fg:w="188"/><text x="64.1642%" y="207.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (188 samples, 1.88%)</title><rect x="63.9142%" y="181" width="1.8840%" height="15" fill="rgb(220,13,46)" fg:x="6378" fg:w="188"/><text x="64.1642%" y="191.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.03%)</title><rect x="65.7982%" y="213" width="0.0301%" height="15" fill="rgb(239,221,27)" fg:x="6566" fg:w="3"/><text x="66.0482%" y="223.50"></text></g><g><title>rlox::vm::VM::frame_mut (82 samples, 0.82%)</title><rect x="65.7982%" y="229" width="0.8217%" height="15" fill="rgb(222,198,25)" fg:x="6566" fg:w="82"/><text x="66.0482%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (79 samples, 0.79%)</title><rect x="65.8282%" y="213" width="0.7917%" height="15" fill="rgb(211,99,13)" fg:x="6569" fg:w="79"/><text x="66.0782%" y="223.50"></text></g><g><title>rlox::vm::VM::next_instruction (1,029 samples, 10.31%)</title><rect x="57.9116%" y="245" width="10.3117%" height="15" fill="rgb(232,111,31)" fg:x="5779" fg:w="1029"/><text x="58.1616%" y="255.50">rlox::vm::VM::n..</text></g><g><title>rlox::vm::VM::run (160 samples, 1.60%)</title><rect x="66.6199%" y="229" width="1.6034%" height="15" fill="rgb(245,82,37)" fg:x="6648" fg:w="160"/><text x="66.8699%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.07%)</title><rect x="68.2333%" y="229" width="0.0701%" height="15" fill="rgb(227,149,46)" fg:x="6809" fg:w="7"/><text x="68.4833%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.03%)</title><rect x="68.2734%" y="213" width="0.0301%" height="15" fill="rgb(218,36,50)" fg:x="6813" fg:w="3"/><text x="68.5234%" y="223.50"></text></g><g><title>rlox::vm::VM::peek (46 samples, 0.46%)</title><rect x="68.2233%" y="245" width="0.4610%" height="15" fill="rgb(226,80,48)" fg:x="6808" fg:w="46"/><text x="68.4733%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (38 samples, 0.38%)</title><rect x="68.3034%" y="229" width="0.3808%" height="15" fill="rgb(238,224,15)" fg:x="6816" fg:w="38"/><text x="68.5534%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (38 samples, 0.38%)</title><rect x="68.3034%" y="213" width="0.3808%" height="15" fill="rgb(241,136,10)" fg:x="6816" fg:w="38"/><text x="68.5534%" y="223.50"></text></g><g><title>rlox::vm::VM::peek_mut (40 samples, 0.40%)</title><rect x="68.6842%" y="245" width="0.4008%" height="15" fill="rgb(208,32,45)" fg:x="6854" fg:w="40"/><text x="68.9342%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (39 samples, 0.39%)</title><rect x="68.6943%" y="229" width="0.3908%" height="15" fill="rgb(207,135,9)" fg:x="6855" fg:w="39"/><text x="68.9443%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (39 samples, 0.39%)</title><rect x="68.6943%" y="213" width="0.3908%" height="15" fill="rgb(206,86,44)" fg:x="6855" fg:w="39"/><text x="68.9443%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="69.5160%" y="213" width="0.0100%" height="15" fill="rgb(245,177,15)" fg:x="6937" fg:w="1"/><text x="69.7660%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (113 samples, 1.13%)</title><rect x="69.0851%" y="229" width="1.1324%" height="15" fill="rgb(206,64,50)" fg:x="6894" fg:w="113"/><text x="69.3351%" y="239.50"></text></g><g><title>core::ptr::read (69 samples, 0.69%)</title><rect x="69.5260%" y="213" width="0.6915%" height="15" fill="rgb(234,36,40)" fg:x="6938" fg:w="69"/><text x="69.7760%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.67%)</title><rect x="69.5460%" y="197" width="0.6714%" height="15" fill="rgb(213,64,8)" fg:x="6940" fg:w="67"/><text x="69.7960%" y="207.50"></text></g><g><title>rlox::vm::VM::pop (338 samples, 3.39%)</title><rect x="69.0851%" y="245" width="3.3871%" height="15" fill="rgb(210,75,36)" fg:x="6894" fg:w="338"/><text x="69.3351%" y="255.50">rlo..</text></g><g><title>core::option::Option&lt;T&gt;::expect (225 samples, 2.25%)</title><rect x="70.2175%" y="229" width="2.2547%" height="15" fill="rgb(229,88,21)" fg:x="7007" fg:w="225"/><text x="70.4675%" y="239.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.01%)</title><rect x="72.7628%" y="213" width="0.0100%" height="15" fill="rgb(252,204,47)" fg:x="7261" fg:w="1"/><text x="73.0128%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.01%)</title><rect x="72.7728%" y="213" width="0.0100%" height="15" fill="rgb(208,77,27)" fg:x="7262" fg:w="1"/><text x="73.0228%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.11%)</title><rect x="72.7828%" y="213" width="0.1102%" height="15" fill="rgb(221,76,26)" fg:x="7263" fg:w="11"/><text x="73.0328%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.11%)</title><rect x="72.7828%" y="197" width="0.1102%" height="15" fill="rgb(225,139,18)" fg:x="7263" fg:w="11"/><text x="73.0328%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (2 samples, 0.02%)</title><rect x="72.8931%" y="213" width="0.0200%" height="15" fill="rgb(230,137,11)" fg:x="7274" fg:w="2"/><text x="73.1431%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="72.8931%" y="197" width="0.0200%" height="15" fill="rgb(212,28,1)" fg:x="7274" fg:w="2"/><text x="73.1431%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.02%)</title><rect x="72.8931%" y="181" width="0.0200%" height="15" fill="rgb(248,164,17)" fg:x="7274" fg:w="2"/><text x="73.1431%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.02%)</title><rect x="72.8931%" y="165" width="0.0200%" height="15" fill="rgb(222,171,42)" fg:x="7274" fg:w="2"/><text x="73.1431%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (63 samples, 0.63%)</title><rect x="72.4722%" y="229" width="0.6313%" height="15" fill="rgb(243,84,45)" fg:x="7232" fg:w="63"/><text x="72.7222%" y="239.50"></text></g><g><title>core::slice::index::range (19 samples, 0.19%)</title><rect x="72.9131%" y="213" width="0.1904%" height="15" fill="rgb(252,49,23)" fg:x="7276" fg:w="19"/><text x="73.1631%" y="223.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.33%)</title><rect x="73.5244%" y="197" width="0.3307%" height="15" fill="rgb(215,19,7)" fg:x="7337" fg:w="33"/><text x="73.7744%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.33%)</title><rect x="73.5244%" y="181" width="0.3307%" height="15" fill="rgb(238,81,41)" fg:x="7337" fg:w="33"/><text x="73.7744%" y="191.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.17%)</title><rect x="73.8551%" y="181" width="0.1704%" height="15" fill="rgb(210,199,37)" fg:x="7370" fg:w="17"/><text x="74.1051%" y="191.50"></text></g><g><title>core::mem::drop (96 samples, 0.96%)</title><rect x="73.8551%" y="197" width="0.9620%" height="15" fill="rgb(244,192,49)" fg:x="7370" fg:w="96"/><text x="74.1051%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (79 samples, 0.79%)</title><rect x="74.0255%" y="181" width="0.7917%" height="15" fill="rgb(226,211,11)" fg:x="7387" fg:w="79"/><text x="74.2755%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (53 samples, 0.53%)</title><rect x="74.2860%" y="165" width="0.5311%" height="15" fill="rgb(236,162,54)" fg:x="7413" fg:w="53"/><text x="74.5360%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.53%)</title><rect x="74.2860%" y="149" width="0.5311%" height="15" fill="rgb(220,229,9)" fg:x="7413" fg:w="53"/><text x="74.5360%" y="159.50"></text></g><g><title>rlox::vm::VM::popn (280 samples, 2.81%)</title><rect x="72.4722%" y="245" width="2.8059%" height="15" fill="rgb(250,87,22)" fg:x="7232" fg:w="280"/><text x="72.7222%" y="255.50">rl..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;rlox::value::Value&gt;&gt; (217 samples, 2.17%)</title><rect x="73.1035%" y="229" width="2.1746%" height="15" fill="rgb(239,43,17)" fg:x="7295" fg:w="217"/><text x="73.3535%" y="239.50">c..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (217 samples, 2.17%)</title><rect x="73.1035%" y="213" width="2.1746%" height="15" fill="rgb(231,177,25)" fg:x="7295" fg:w="217"/><text x="73.3535%" y="223.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (46 samples, 0.46%)</title><rect x="74.8171%" y="197" width="0.4610%" height="15" fill="rgb(219,179,1)" fg:x="7466" fg:w="46"/><text x="75.0671%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.44%)</title><rect x="74.8372%" y="181" width="0.4409%" height="15" fill="rgb(238,219,53)" fg:x="7468" fg:w="44"/><text x="75.0872%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (30 samples, 0.30%)</title><rect x="74.9775%" y="165" width="0.3006%" height="15" fill="rgb(232,167,36)" fg:x="7482" fg:w="30"/><text x="75.2275%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (30 samples, 0.30%)</title><rect x="74.9775%" y="149" width="0.3006%" height="15" fill="rgb(244,19,51)" fg:x="7482" fg:w="30"/><text x="75.2275%" y="159.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.30%)</title><rect x="74.9775%" y="133" width="0.3006%" height="15" fill="rgb(224,6,22)" fg:x="7482" fg:w="30"/><text x="75.2275%" y="143.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.30%)</title><rect x="74.9775%" y="117" width="0.3006%" height="15" fill="rgb(224,145,5)" fg:x="7482" fg:w="30"/><text x="75.2275%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.30%)</title><rect x="74.9775%" y="101" width="0.3006%" height="15" fill="rgb(234,130,49)" fg:x="7482" fg:w="30"/><text x="75.2275%" y="111.50"></text></g><g><title>rlox::vm::VM::push (698 samples, 6.99%)</title><rect x="75.2781%" y="245" width="6.9947%" height="15" fill="rgb(254,6,2)" fg:x="7512" fg:w="698"/><text x="75.5281%" y="255.50">rlox::vm:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (274 samples, 2.75%)</title><rect x="79.5270%" y="229" width="2.7458%" height="15" fill="rgb(208,96,46)" fg:x="7936" fg:w="274"/><text x="79.7770%" y="239.50">al..</text></g><g><title>core::ptr::write (273 samples, 2.74%)</title><rect x="79.5370%" y="213" width="2.7357%" height="15" fill="rgb(239,3,39)" fg:x="7937" fg:w="273"/><text x="79.7870%" y="223.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.31%)</title><rect x="83.0344%" y="197" width="0.3107%" height="15" fill="rgb(233,210,1)" fg:x="8286" fg:w="31"/><text x="83.2844%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (26 samples, 0.26%)</title><rect x="83.0845%" y="181" width="0.2605%" height="15" fill="rgb(244,137,37)" fg:x="8291" fg:w="26"/><text x="83.3345%" y="191.50"></text></g><g><title>rlox::chunk::Chunk::read_const (69 samples, 0.69%)</title><rect x="83.0344%" y="229" width="0.6915%" height="15" fill="rgb(240,136,2)" fg:x="8286" fg:w="69"/><text x="83.2844%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (69 samples, 0.69%)</title><rect x="83.0344%" y="213" width="0.6915%" height="15" fill="rgb(239,18,37)" fg:x="8286" fg:w="69"/><text x="83.2844%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.38%)</title><rect x="83.3450%" y="197" width="0.3808%" height="15" fill="rgb(218,185,22)" fg:x="8317" fg:w="38"/><text x="83.5950%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.38%)</title><rect x="83.3450%" y="181" width="0.3808%" height="15" fill="rgb(225,218,4)" fg:x="8317" fg:w="38"/><text x="83.5950%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.31%)</title><rect x="83.7258%" y="213" width="0.3107%" height="15" fill="rgb(230,182,32)" fg:x="8355" fg:w="31"/><text x="83.9758%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.01%)</title><rect x="84.0265%" y="197" width="0.0100%" height="15" fill="rgb(242,56,43)" fg:x="8385" fg:w="1"/><text x="84.2765%" y="207.50"></text></g><g><title>rlox::vm::VM::read_const (203 samples, 2.03%)</title><rect x="82.2728%" y="245" width="2.0343%" height="15" fill="rgb(233,99,24)" fg:x="8210" fg:w="203"/><text x="82.5228%" y="255.50">r..</text></g><g><title>rlox::vm::VM::frame (58 samples, 0.58%)</title><rect x="83.7258%" y="229" width="0.5812%" height="15" fill="rgb(234,209,42)" fg:x="8355" fg:w="58"/><text x="83.9758%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (27 samples, 0.27%)</title><rect x="84.0365%" y="213" width="0.2706%" height="15" fill="rgb(227,7,12)" fg:x="8386" fg:w="27"/><text x="84.2865%" y="223.50"></text></g><g><title>rlox::vm::VM::run (136 samples, 1.36%)</title><rect x="84.3070%" y="245" width="1.3629%" height="15" fill="rgb(245,203,43)" fg:x="8413" fg:w="136"/><text x="84.5570%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.06%)</title><rect x="85.7801%" y="117" width="0.0601%" height="15" fill="rgb(238,205,33)" fg:x="8560" fg:w="6"/><text x="86.0301%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 0.14%)</title><rect x="85.7601%" y="133" width="0.1403%" height="15" fill="rgb(231,56,7)" fg:x="8558" fg:w="14"/><text x="86.0101%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.06%)</title><rect x="85.8403%" y="117" width="0.0601%" height="15" fill="rgb(244,186,29)" fg:x="8566" fg:w="6"/><text x="86.0903%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (13 samples, 0.13%)</title><rect x="86.0707%" y="117" width="0.1303%" height="15" fill="rgb(234,111,31)" fg:x="8589" fg:w="13"/><text x="86.3207%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (56 samples, 0.56%)</title><rect x="85.7100%" y="181" width="0.5612%" height="15" fill="rgb(241,149,10)" fg:x="8553" fg:w="56"/><text x="85.9600%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (56 samples, 0.56%)</title><rect x="85.7100%" y="165" width="0.5612%" height="15" fill="rgb(249,206,44)" fg:x="8553" fg:w="56"/><text x="85.9600%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (56 samples, 0.56%)</title><rect x="85.7100%" y="149" width="0.5612%" height="15" fill="rgb(251,153,30)" fg:x="8553" fg:w="56"/><text x="85.9600%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (37 samples, 0.37%)</title><rect x="85.9004%" y="133" width="0.3708%" height="15" fill="rgb(239,152,38)" fg:x="8572" fg:w="37"/><text x="86.1504%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.07%)</title><rect x="86.2010%" y="117" width="0.0701%" height="15" fill="rgb(249,139,47)" fg:x="8602" fg:w="7"/><text x="86.4510%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (17 samples, 0.17%)</title><rect x="86.2712%" y="181" width="0.1704%" height="15" fill="rgb(244,64,35)" fg:x="8609" fg:w="17"/><text x="86.5212%" y="191.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 0.09%)</title><rect x="86.3513%" y="165" width="0.0902%" height="15" fill="rgb(216,46,15)" fg:x="8617" fg:w="9"/><text x="86.6013%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (7 samples, 0.07%)</title><rect x="86.3714%" y="149" width="0.0701%" height="15" fill="rgb(250,74,19)" fg:x="8619" fg:w="7"/><text x="86.6214%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (7 samples, 0.07%)</title><rect x="86.3714%" y="133" width="0.0701%" height="15" fill="rgb(249,42,33)" fg:x="8619" fg:w="7"/><text x="86.6214%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (98 samples, 0.98%)</title><rect x="85.7100%" y="197" width="0.9821%" height="15" fill="rgb(242,149,17)" fg:x="8553" fg:w="98"/><text x="85.9600%" y="207.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (25 samples, 0.25%)</title><rect x="86.4415%" y="181" width="0.2505%" height="15" fill="rgb(244,29,21)" fg:x="8626" fg:w="25"/><text x="86.6915%" y="191.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (25 samples, 0.25%)</title><rect x="86.4415%" y="165" width="0.2505%" height="15" fill="rgb(220,130,37)" fg:x="8626" fg:w="25"/><text x="86.6915%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (21 samples, 0.21%)</title><rect x="86.4816%" y="149" width="0.2104%" height="15" fill="rgb(211,67,2)" fg:x="8630" fg:w="21"/><text x="86.7316%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u32 (21 samples, 0.21%)</title><rect x="86.4816%" y="133" width="0.2104%" height="15" fill="rgb(235,68,52)" fg:x="8630" fg:w="21"/><text x="86.7316%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.18%)</title><rect x="86.5117%" y="117" width="0.1804%" height="15" fill="rgb(246,142,3)" fg:x="8633" fg:w="18"/><text x="86.7617%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (18 samples, 0.18%)</title><rect x="86.5117%" y="101" width="0.1804%" height="15" fill="rgb(241,25,7)" fg:x="8633" fg:w="18"/><text x="86.7617%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.18%)</title><rect x="86.5117%" y="85" width="0.1804%" height="15" fill="rgb(242,119,39)" fg:x="8633" fg:w="18"/><text x="86.7617%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (12 samples, 0.12%)</title><rect x="86.5718%" y="69" width="0.1203%" height="15" fill="rgb(241,98,45)" fg:x="8639" fg:w="12"/><text x="86.8218%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="86.6720%" y="53" width="0.0200%" height="15" fill="rgb(254,28,30)" fg:x="8649" fg:w="2"/><text x="86.9220%" y="63.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="86.7422%" y="149" width="0.0401%" height="15" fill="rgb(241,142,54)" fg:x="8656" fg:w="4"/><text x="86.9922%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="86.7522%" y="133" width="0.0301%" height="15" fill="rgb(222,85,15)" fg:x="8657" fg:w="3"/><text x="87.0022%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.03%)</title><rect x="86.7522%" y="117" width="0.0301%" height="15" fill="rgb(210,85,47)" fg:x="8657" fg:w="3"/><text x="87.0022%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.08%)</title><rect x="86.7422%" y="165" width="0.0802%" height="15" fill="rgb(224,206,25)" fg:x="8656" fg:w="8"/><text x="86.9922%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (4 samples, 0.04%)</title><rect x="86.7822%" y="149" width="0.0401%" height="15" fill="rgb(243,201,19)" fg:x="8660" fg:w="4"/><text x="87.0322%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (4 samples, 0.04%)</title><rect x="86.7822%" y="133" width="0.0401%" height="15" fill="rgb(236,59,4)" fg:x="8660" fg:w="4"/><text x="87.0322%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (4 samples, 0.04%)</title><rect x="86.7822%" y="117" width="0.0401%" height="15" fill="rgb(254,179,45)" fg:x="8660" fg:w="4"/><text x="87.0322%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.04%)</title><rect x="86.7822%" y="101" width="0.0401%" height="15" fill="rgb(226,14,10)" fg:x="8660" fg:w="4"/><text x="87.0322%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.04%)</title><rect x="86.8223%" y="165" width="0.0401%" height="15" fill="rgb(244,27,41)" fg:x="8664" fg:w="4"/><text x="87.0723%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.04%)</title><rect x="86.8223%" y="149" width="0.0401%" height="15" fill="rgb(235,35,32)" fg:x="8664" fg:w="4"/><text x="87.0723%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.04%)</title><rect x="86.8223%" y="133" width="0.0401%" height="15" fill="rgb(218,68,31)" fg:x="8664" fg:w="4"/><text x="87.0723%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.01%)</title><rect x="86.8624%" y="117" width="0.0100%" height="15" fill="rgb(207,120,37)" fg:x="8668" fg:w="1"/><text x="87.1124%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (125 samples, 1.25%)</title><rect x="85.6699%" y="245" width="1.2526%" height="15" fill="rgb(227,98,0)" fg:x="8549" fg:w="125"/><text x="85.9199%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (125 samples, 1.25%)</title><rect x="85.6699%" y="229" width="1.2526%" height="15" fill="rgb(207,7,3)" fg:x="8549" fg:w="125"/><text x="85.9199%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (121 samples, 1.21%)</title><rect x="85.7100%" y="213" width="1.2125%" height="15" fill="rgb(206,98,19)" fg:x="8553" fg:w="121"/><text x="85.9600%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (23 samples, 0.23%)</title><rect x="86.6921%" y="197" width="0.2305%" height="15" fill="rgb(217,5,26)" fg:x="8651" fg:w="23"/><text x="86.9421%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (23 samples, 0.23%)</title><rect x="86.6921%" y="181" width="0.2305%" height="15" fill="rgb(235,190,38)" fg:x="8651" fg:w="23"/><text x="86.9421%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (6 samples, 0.06%)</title><rect x="86.8624%" y="165" width="0.0601%" height="15" fill="rgb(247,86,24)" fg:x="8668" fg:w="6"/><text x="87.1124%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (6 samples, 0.06%)</title><rect x="86.8624%" y="149" width="0.0601%" height="15" fill="rgb(205,101,16)" fg:x="8668" fg:w="6"/><text x="87.1124%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (6 samples, 0.06%)</title><rect x="86.8624%" y="133" width="0.0601%" height="15" fill="rgb(246,168,33)" fg:x="8668" fg:w="6"/><text x="87.1124%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.05%)</title><rect x="86.8724%" y="117" width="0.0501%" height="15" fill="rgb(231,114,1)" fg:x="8669" fg:w="5"/><text x="87.1224%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.05%)</title><rect x="86.8724%" y="101" width="0.0501%" height="15" fill="rgb(207,184,53)" fg:x="8669" fg:w="5"/><text x="87.1224%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.05%)</title><rect x="86.8724%" y="85" width="0.0501%" height="15" fill="rgb(224,95,51)" fg:x="8669" fg:w="5"/><text x="87.1224%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (57 samples, 0.57%)</title><rect x="88.6261%" y="117" width="0.5712%" height="15" fill="rgb(212,188,45)" fg:x="8844" fg:w="57"/><text x="88.8761%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (116 samples, 1.16%)</title><rect x="88.2453%" y="133" width="1.1624%" height="15" fill="rgb(223,154,38)" fg:x="8806" fg:w="116"/><text x="88.4953%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (21 samples, 0.21%)</title><rect x="89.1973%" y="117" width="0.2104%" height="15" fill="rgb(251,22,52)" fg:x="8901" fg:w="21"/><text x="89.4473%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (160 samples, 1.60%)</title><rect x="90.1092%" y="117" width="1.6034%" height="15" fill="rgb(229,209,22)" fg:x="8992" fg:w="160"/><text x="90.3592%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (503 samples, 5.04%)</title><rect x="87.3935%" y="181" width="5.0406%" height="15" fill="rgb(234,138,34)" fg:x="8721" fg:w="503"/><text x="87.6435%" y="191.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (503 samples, 5.04%)</title><rect x="87.3935%" y="165" width="5.0406%" height="15" fill="rgb(212,95,11)" fg:x="8721" fg:w="503"/><text x="87.6435%" y="175.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (503 samples, 5.04%)</title><rect x="87.3935%" y="149" width="5.0406%" height="15" fill="rgb(240,179,47)" fg:x="8721" fg:w="503"/><text x="87.6435%" y="159.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (302 samples, 3.03%)</title><rect x="89.4078%" y="133" width="3.0264%" height="15" fill="rgb(240,163,11)" fg:x="8922" fg:w="302"/><text x="89.6578%" y="143.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (72 samples, 0.72%)</title><rect x="91.7126%" y="117" width="0.7215%" height="15" fill="rgb(236,37,12)" fg:x="9152" fg:w="72"/><text x="91.9626%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (167 samples, 1.67%)</title><rect x="92.4341%" y="181" width="1.6735%" height="15" fill="rgb(232,164,16)" fg:x="9224" fg:w="167"/><text x="92.6841%" y="191.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (98 samples, 0.98%)</title><rect x="93.1256%" y="165" width="0.9821%" height="15" fill="rgb(244,205,15)" fg:x="9293" fg:w="98"/><text x="93.3756%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (84 samples, 0.84%)</title><rect x="93.2659%" y="149" width="0.8418%" height="15" fill="rgb(223,117,47)" fg:x="9307" fg:w="84"/><text x="93.5159%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (84 samples, 0.84%)</title><rect x="93.2659%" y="133" width="0.8418%" height="15" fill="rgb(244,107,35)" fg:x="9307" fg:w="84"/><text x="93.5159%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (169 samples, 1.69%)</title><rect x="94.3982%" y="85" width="1.6936%" height="15" fill="rgb(205,140,8)" fg:x="9420" fg:w="169"/><text x="94.6482%" y="95.50"></text></g><g><title>core::hash::sip::u8to64_le (107 samples, 1.07%)</title><rect x="95.0195%" y="69" width="1.0723%" height="15" fill="rgb(228,84,46)" fg:x="9482" fg:w="107"/><text x="95.2695%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="96.0718%" y="53" width="0.0200%" height="15" fill="rgb(254,188,9)" fg:x="9587" fg:w="2"/><text x="96.3218%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (878 samples, 8.80%)</title><rect x="87.3134%" y="197" width="8.7985%" height="15" fill="rgb(206,112,54)" fg:x="8713" fg:w="878"/><text x="87.5634%" y="207.50">hashbrown::m..</text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (200 samples, 2.00%)</title><rect x="94.1076%" y="181" width="2.0042%" height="15" fill="rgb(216,84,49)" fg:x="9391" fg:w="200"/><text x="94.3576%" y="191.50">&lt;..</text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (200 samples, 2.00%)</title><rect x="94.1076%" y="165" width="2.0042%" height="15" fill="rgb(214,194,35)" fg:x="9391" fg:w="200"/><text x="94.3576%" y="175.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (179 samples, 1.79%)</title><rect x="94.3181%" y="149" width="1.7938%" height="15" fill="rgb(249,28,3)" fg:x="9412" fg:w="179"/><text x="94.5681%" y="159.50">c..</text></g><g><title>core::hash::Hasher::write_u32 (179 samples, 1.79%)</title><rect x="94.3181%" y="133" width="1.7938%" height="15" fill="rgb(222,56,52)" fg:x="9412" fg:w="179"/><text x="94.5681%" y="143.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (171 samples, 1.71%)</title><rect x="94.3982%" y="117" width="1.7136%" height="15" fill="rgb(245,217,50)" fg:x="9420" fg:w="171"/><text x="94.6482%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (171 samples, 1.71%)</title><rect x="94.3982%" y="101" width="1.7136%" height="15" fill="rgb(213,201,24)" fg:x="9420" fg:w="171"/><text x="94.6482%" y="111.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="96.0918%" y="85" width="0.0200%" height="15" fill="rgb(248,116,28)" fg:x="9589" fg:w="2"/><text x="96.3418%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.49%)</title><rect x="96.6430%" y="149" width="0.4910%" height="15" fill="rgb(219,72,43)" fg:x="9644" fg:w="49"/><text x="96.8930%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.36%)</title><rect x="96.7732%" y="133" width="0.3608%" height="15" fill="rgb(209,138,14)" fg:x="9657" fg:w="36"/><text x="97.0232%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (36 samples, 0.36%)</title><rect x="96.7732%" y="117" width="0.3608%" height="15" fill="rgb(222,18,33)" fg:x="9657" fg:w="36"/><text x="97.0232%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (86 samples, 0.86%)</title><rect x="96.6430%" y="165" width="0.8618%" height="15" fill="rgb(213,199,7)" fg:x="9644" fg:w="86"/><text x="96.8930%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (37 samples, 0.37%)</title><rect x="97.1340%" y="149" width="0.3708%" height="15" fill="rgb(250,110,10)" fg:x="9693" fg:w="37"/><text x="97.3840%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (37 samples, 0.37%)</title><rect x="97.1340%" y="133" width="0.3708%" height="15" fill="rgb(248,123,6)" fg:x="9693" fg:w="37"/><text x="97.3840%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (37 samples, 0.37%)</title><rect x="97.1340%" y="117" width="0.3708%" height="15" fill="rgb(206,91,31)" fg:x="9693" fg:w="37"/><text x="97.3840%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (37 samples, 0.37%)</title><rect x="97.1340%" y="101" width="0.3708%" height="15" fill="rgb(211,154,13)" fg:x="9693" fg:w="37"/><text x="97.3840%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (30 samples, 0.30%)</title><rect x="97.5048%" y="165" width="0.3006%" height="15" fill="rgb(225,148,7)" fg:x="9730" fg:w="30"/><text x="97.7548%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (30 samples, 0.30%)</title><rect x="97.5048%" y="149" width="0.3006%" height="15" fill="rgb(220,160,43)" fg:x="9730" fg:w="30"/><text x="97.7548%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (30 samples, 0.30%)</title><rect x="97.5048%" y="133" width="0.3006%" height="15" fill="rgb(213,52,39)" fg:x="9730" fg:w="30"/><text x="97.7548%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (4 samples, 0.04%)</title><rect x="98.0459%" y="117" width="0.0401%" height="15" fill="rgb(243,137,7)" fg:x="9784" fg:w="4"/><text x="98.2959%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (7 samples, 0.07%)</title><rect x="98.0860%" y="117" width="0.0701%" height="15" fill="rgb(230,79,13)" fg:x="9788" fg:w="7"/><text x="98.3360%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (21 samples, 0.21%)</title><rect x="98.1561%" y="117" width="0.2104%" height="15" fill="rgb(247,105,23)" fg:x="9795" fg:w="21"/><text x="98.4061%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (21 samples, 0.21%)</title><rect x="98.1561%" y="101" width="0.2104%" height="15" fill="rgb(223,179,41)" fg:x="9795" fg:w="21"/><text x="98.4061%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.21%)</title><rect x="98.1561%" y="85" width="0.2104%" height="15" fill="rgb(218,9,34)" fg:x="9795" fg:w="21"/><text x="98.4061%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (240 samples, 2.41%)</title><rect x="96.1118%" y="181" width="2.4051%" height="15" fill="rgb(222,106,8)" fg:x="9591" fg:w="240"/><text x="96.3618%" y="191.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (71 samples, 0.71%)</title><rect x="97.8054%" y="165" width="0.7115%" height="15" fill="rgb(211,220,0)" fg:x="9760" fg:w="71"/><text x="98.0554%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (71 samples, 0.71%)</title><rect x="97.8054%" y="149" width="0.7115%" height="15" fill="rgb(229,52,16)" fg:x="9760" fg:w="71"/><text x="98.0554%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (71 samples, 0.71%)</title><rect x="97.8054%" y="133" width="0.7115%" height="15" fill="rgb(212,155,18)" fg:x="9760" fg:w="71"/><text x="98.0554%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (15 samples, 0.15%)</title><rect x="98.3666%" y="117" width="0.1503%" height="15" fill="rgb(242,21,14)" fg:x="9816" fg:w="15"/><text x="98.6166%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (15 samples, 0.15%)</title><rect x="98.3666%" y="101" width="0.1503%" height="15" fill="rgb(222,19,48)" fg:x="9816" fg:w="15"/><text x="98.6166%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (15 samples, 0.15%)</title><rect x="98.3666%" y="85" width="0.1503%" height="15" fill="rgb(232,45,27)" fg:x="9816" fg:w="15"/><text x="98.6166%" y="95.50"></text></g><g><title>core::core_arch::simd::i8x16::new (15 samples, 0.15%)</title><rect x="98.3666%" y="69" width="0.1503%" height="15" fill="rgb(249,103,42)" fg:x="9816" fg:w="15"/><text x="98.6166%" y="79.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1,158 samples, 11.60%)</title><rect x="86.9225%" y="245" width="11.6044%" height="15" fill="rgb(246,81,33)" fg:x="8674" fg:w="1158"/><text x="87.1725%" y="255.50">std::collections:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,158 samples, 11.60%)</title><rect x="86.9225%" y="229" width="11.6044%" height="15" fill="rgb(252,33,42)" fg:x="8674" fg:w="1158"/><text x="87.1725%" y="239.50">hashbrown::map::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,144 samples, 11.46%)</title><rect x="87.0628%" y="213" width="11.4641%" height="15" fill="rgb(209,212,41)" fg:x="8688" fg:w="1144"/><text x="87.3128%" y="223.50">hashbrown::map::H..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (241 samples, 2.42%)</title><rect x="96.1118%" y="197" width="2.4151%" height="15" fill="rgb(207,154,6)" fg:x="9591" fg:w="241"/><text x="96.3618%" y="207.50">ha..</text></g><g><title>rlox::vm::VM::run (1 samples, 0.01%)</title><rect x="98.5169%" y="181" width="0.0100%" height="15" fill="rgb(223,64,47)" fg:x="9831" fg:w="1"/><text x="98.7669%" y="191.50"></text></g><g><title>core::mem::replace (5 samples, 0.05%)</title><rect x="98.6171%" y="213" width="0.0501%" height="15" fill="rgb(211,161,38)" fg:x="9841" fg:w="5"/><text x="98.8671%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="98.7373%" y="133" width="0.0200%" height="15" fill="rgb(219,138,40)" fg:x="9853" fg:w="2"/><text x="98.9873%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.09%)</title><rect x="98.7273%" y="149" width="0.0902%" height="15" fill="rgb(241,228,46)" fg:x="9852" fg:w="9"/><text x="98.9773%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.06%)</title><rect x="98.7574%" y="133" width="0.0601%" height="15" fill="rgb(223,209,38)" fg:x="9855" fg:w="6"/><text x="99.0074%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.19%)</title><rect x="98.8376%" y="133" width="0.1904%" height="15" fill="rgb(236,164,45)" fg:x="9863" fg:w="19"/><text x="99.0876%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (39 samples, 0.39%)</title><rect x="98.6672%" y="197" width="0.3908%" height="15" fill="rgb(231,15,5)" fg:x="9846" fg:w="39"/><text x="98.9172%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (39 samples, 0.39%)</title><rect x="98.6672%" y="181" width="0.3908%" height="15" fill="rgb(252,35,15)" fg:x="9846" fg:w="39"/><text x="98.9172%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (39 samples, 0.39%)</title><rect x="98.6672%" y="165" width="0.3908%" height="15" fill="rgb(248,181,18)" fg:x="9846" fg:w="39"/><text x="98.9172%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (24 samples, 0.24%)</title><rect x="98.8175%" y="149" width="0.2405%" height="15" fill="rgb(233,39,42)" fg:x="9861" fg:w="24"/><text x="99.0675%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.03%)</title><rect x="99.0280%" y="133" width="0.0301%" height="15" fill="rgb(238,110,33)" fg:x="9882" fg:w="3"/><text x="99.2780%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (24 samples, 0.24%)</title><rect x="99.0580%" y="197" width="0.2405%" height="15" fill="rgb(233,195,10)" fg:x="9885" fg:w="24"/><text x="99.3080%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (12 samples, 0.12%)</title><rect x="99.1783%" y="181" width="0.1203%" height="15" fill="rgb(254,105,3)" fg:x="9897" fg:w="12"/><text x="99.4283%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12 samples, 0.12%)</title><rect x="99.1783%" y="165" width="0.1203%" height="15" fill="rgb(221,225,9)" fg:x="9897" fg:w="12"/><text x="99.4283%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (12 samples, 0.12%)</title><rect x="99.1783%" y="149" width="0.1203%" height="15" fill="rgb(224,227,45)" fg:x="9897" fg:w="12"/><text x="99.4283%" y="159.50"></text></g><g><title>hashbrown::map::make_insert_hash (91 samples, 0.91%)</title><rect x="98.6672%" y="213" width="0.9119%" height="15" fill="rgb(229,198,43)" fg:x="9846" fg:w="91"/><text x="98.9172%" y="223.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (28 samples, 0.28%)</title><rect x="99.2985%" y="197" width="0.2806%" height="15" fill="rgb(206,209,35)" fg:x="9909" fg:w="28"/><text x="99.5485%" y="207.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (28 samples, 0.28%)</title><rect x="99.2985%" y="181" width="0.2806%" height="15" fill="rgb(245,195,53)" fg:x="9909" fg:w="28"/><text x="99.5485%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (23 samples, 0.23%)</title><rect x="99.3486%" y="165" width="0.2305%" height="15" fill="rgb(240,92,26)" fg:x="9914" fg:w="23"/><text x="99.5986%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u32 (23 samples, 0.23%)</title><rect x="99.3486%" y="149" width="0.2305%" height="15" fill="rgb(207,40,23)" fg:x="9914" fg:w="23"/><text x="99.5986%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.23%)</title><rect x="99.3486%" y="133" width="0.2305%" height="15" fill="rgb(223,111,35)" fg:x="9914" fg:w="23"/><text x="99.5986%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (23 samples, 0.23%)</title><rect x="99.3486%" y="117" width="0.2305%" height="15" fill="rgb(229,147,28)" fg:x="9914" fg:w="23"/><text x="99.5986%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.23%)</title><rect x="99.3486%" y="101" width="0.2305%" height="15" fill="rgb(211,29,28)" fg:x="9914" fg:w="23"/><text x="99.5986%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (11 samples, 0.11%)</title><rect x="99.4689%" y="85" width="0.1102%" height="15" fill="rgb(228,72,33)" fg:x="9926" fg:w="11"/><text x="99.7189%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="99.6392%" y="165" width="0.0501%" height="15" fill="rgb(205,214,31)" fg:x="9943" fg:w="5"/><text x="99.8892%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="99.6392%" y="149" width="0.0501%" height="15" fill="rgb(224,111,15)" fg:x="9943" fg:w="5"/><text x="99.8892%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.05%)</title><rect x="99.6392%" y="133" width="0.0501%" height="15" fill="rgb(253,21,26)" fg:x="9943" fg:w="5"/><text x="99.8892%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.07%)</title><rect x="99.6392%" y="181" width="0.0701%" height="15" fill="rgb(245,139,43)" fg:x="9943" fg:w="7"/><text x="99.8892%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (2 samples, 0.02%)</title><rect x="99.6893%" y="165" width="0.0200%" height="15" fill="rgb(252,170,7)" fg:x="9948" fg:w="2"/><text x="99.9393%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.02%)</title><rect x="99.6893%" y="149" width="0.0200%" height="15" fill="rgb(231,118,14)" fg:x="9948" fg:w="2"/><text x="99.9393%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.02%)</title><rect x="99.6893%" y="133" width="0.0200%" height="15" fill="rgb(238,83,0)" fg:x="9948" fg:w="2"/><text x="99.9393%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.02%)</title><rect x="99.6893%" y="117" width="0.0200%" height="15" fill="rgb(221,39,39)" fg:x="9948" fg:w="2"/><text x="99.9393%" y="127.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (6 samples, 0.06%)</title><rect x="99.7094%" y="181" width="0.0601%" height="15" fill="rgb(222,119,46)" fg:x="9950" fg:w="6"/><text x="99.9594%" y="191.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (6 samples, 0.06%)</title><rect x="99.7094%" y="165" width="0.0601%" height="15" fill="rgb(222,165,49)" fg:x="9950" fg:w="6"/><text x="99.9594%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (6 samples, 0.06%)</title><rect x="99.7094%" y="149" width="0.0601%" height="15" fill="rgb(219,113,52)" fg:x="9950" fg:w="6"/><text x="99.9594%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.01%)</title><rect x="99.7695%" y="133" width="0.0100%" height="15" fill="rgb(214,7,15)" fg:x="9956" fg:w="1"/><text x="100.0195%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.01%)</title><rect x="99.7795%" y="133" width="0.0100%" height="15" fill="rgb(235,32,4)" fg:x="9957" fg:w="1"/><text x="100.0295%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.01%)</title><rect x="99.7795%" y="117" width="0.0100%" height="15" fill="rgb(238,90,54)" fg:x="9957" fg:w="1"/><text x="100.0295%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.01%)</title><rect x="99.7795%" y="101" width="0.0100%" height="15" fill="rgb(213,208,19)" fg:x="9957" fg:w="1"/><text x="100.0295%" y="111.50"></text></g><g><title>__libc_start_main (8,517 samples, 85.35%)</title><rect x="14.4503%" y="485" width="85.3492%" height="15" fill="rgb(233,156,4)" fg:x="1442" fg:w="8517"/><text x="14.7003%" y="495.50">__libc_start_main</text></g><g><title>main (8,516 samples, 85.34%)</title><rect x="14.4604%" y="469" width="85.3392%" height="15" fill="rgb(207,194,5)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (8,516 samples, 85.34%)</title><rect x="14.4604%" y="453" width="85.3392%" height="15" fill="rgb(206,111,30)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,516 samples, 85.34%)</title><rect x="14.4604%" y="437" width="85.3392%" height="15" fill="rgb(243,70,54)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,516 samples, 85.34%)</title><rect x="14.4604%" y="421" width="85.3392%" height="15" fill="rgb(242,28,8)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,516 samples, 85.34%)</title><rect x="14.4604%" y="405" width="85.3392%" height="15" fill="rgb(219,106,18)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,516 samples, 85.34%)</title><rect x="14.4604%" y="389" width="85.3392%" height="15" fill="rgb(244,222,10)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (8,516 samples, 85.34%)</title><rect x="14.4604%" y="373" width="85.3392%" height="15" fill="rgb(236,179,52)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,516 samples, 85.34%)</title><rect x="14.4604%" y="357" width="85.3392%" height="15" fill="rgb(213,23,39)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,516 samples, 85.34%)</title><rect x="14.4604%" y="341" width="85.3392%" height="15" fill="rgb(238,48,10)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>rlox::main (8,516 samples, 85.34%)</title><rect x="14.4604%" y="325" width="85.3392%" height="15" fill="rgb(251,196,23)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="335.50">rlox::main</text></g><g><title>rlox::run_file (8,516 samples, 85.34%)</title><rect x="14.4604%" y="309" width="85.3392%" height="15" fill="rgb(250,152,24)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="319.50">rlox::run_file</text></g><g><title>rlox::vm::VM::interpret (8,516 samples, 85.34%)</title><rect x="14.4604%" y="293" width="85.3392%" height="15" fill="rgb(209,150,17)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="303.50">rlox::vm::VM::interpret</text></g><g><title>rlox::vm::VM::interpret::{{closure}} (8,516 samples, 85.34%)</title><rect x="14.4604%" y="277" width="85.3392%" height="15" fill="rgb(234,202,34)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="287.50">rlox::vm::VM::interpret::{{closure}}</text></g><g><title>rlox::vm::VM::run (8,516 samples, 85.34%)</title><rect x="14.4604%" y="261" width="85.3392%" height="15" fill="rgb(253,148,53)" fg:x="1443" fg:w="8516"/><text x="14.7104%" y="271.50">rlox::vm::VM::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (127 samples, 1.27%)</title><rect x="98.5269%" y="245" width="1.2727%" height="15" fill="rgb(218,129,16)" fg:x="9832" fg:w="127"/><text x="98.7769%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (122 samples, 1.22%)</title><rect x="98.5770%" y="229" width="1.2226%" height="15" fill="rgb(216,85,19)" fg:x="9837" fg:w="122"/><text x="98.8270%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (22 samples, 0.22%)</title><rect x="99.5791%" y="213" width="0.2205%" height="15" fill="rgb(235,228,7)" fg:x="9937" fg:w="22"/><text x="99.8291%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (22 samples, 0.22%)</title><rect x="99.5791%" y="197" width="0.2205%" height="15" fill="rgb(245,175,0)" fg:x="9937" fg:w="22"/><text x="99.8291%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (3 samples, 0.03%)</title><rect x="99.7695%" y="181" width="0.0301%" height="15" fill="rgb(208,168,36)" fg:x="9956" fg:w="3"/><text x="100.0195%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (3 samples, 0.03%)</title><rect x="99.7695%" y="165" width="0.0301%" height="15" fill="rgb(246,171,24)" fg:x="9956" fg:w="3"/><text x="100.0195%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (3 samples, 0.03%)</title><rect x="99.7695%" y="149" width="0.0301%" height="15" fill="rgb(215,142,24)" fg:x="9956" fg:w="3"/><text x="100.0195%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.01%)</title><rect x="99.7896%" y="133" width="0.0100%" height="15" fill="rgb(250,187,7)" fg:x="9958" fg:w="1"/><text x="100.0396%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.01%)</title><rect x="99.7896%" y="117" width="0.0100%" height="15" fill="rgb(228,66,33)" fg:x="9958" fg:w="1"/><text x="100.0396%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.01%)</title><rect x="99.7896%" y="101" width="0.0100%" height="15" fill="rgb(234,215,21)" fg:x="9958" fg:w="1"/><text x="100.0396%" y="111.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.01%)</title><rect x="99.7896%" y="85" width="0.0100%" height="15" fill="rgb(222,191,20)" fg:x="9958" fg:w="1"/><text x="100.0396%" y="95.50"></text></g><g><title>_start (8,524 samples, 85.42%)</title><rect x="14.3902%" y="501" width="85.4194%" height="15" fill="rgb(245,79,54)" fg:x="1436" fg:w="8524"/><text x="14.6402%" y="511.50">_start</text></g><g><title>_dl_start (1 samples, 0.01%)</title><rect x="99.7996%" y="485" width="0.0100%" height="15" fill="rgb(240,10,37)" fg:x="9959" fg:w="1"/><text x="100.0496%" y="495.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.01%)</title><rect x="99.7996%" y="469" width="0.0100%" height="15" fill="rgb(214,192,32)" fg:x="9959" fg:w="1"/><text x="100.0496%" y="479.50"></text></g><g><title>dl_main (1 samples, 0.01%)</title><rect x="99.7996%" y="453" width="0.0100%" height="15" fill="rgb(209,36,54)" fg:x="9959" fg:w="1"/><text x="100.0496%" y="463.50"></text></g><g><title>access (1 samples, 0.01%)</title><rect x="99.7996%" y="437" width="0.0100%" height="15" fill="rgb(220,10,11)" fg:x="9959" fg:w="1"/><text x="100.0496%" y="447.50"></text></g><g><title>all (9,979 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(221,106,17)" fg:x="0" fg:w="9979"/><text x="0.2500%" y="543.50"></text></g><g><title>rlox (9,979 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(251,142,44)" fg:x="0" fg:w="9979"/><text x="0.2500%" y="527.50">rlox</text></g><g><title>rlox::vm::VM::push (19 samples, 0.19%)</title><rect x="99.8096%" y="501" width="0.1904%" height="15" fill="rgb(238,13,15)" fg:x="9960" fg:w="19"/><text x="100.0596%" y="511.50"></text></g></svg></svg>
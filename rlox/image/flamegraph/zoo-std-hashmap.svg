<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="2722"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.51%)</title><rect x="0.0000%" y="485" width="0.5143%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="14"/><text x="0.2500%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.55%)</title><rect x="0.5143%" y="485" width="0.5511%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="15"/><text x="0.7643%" y="495.50"></text></g><g><title>core::mem::drop (2 samples, 0.07%)</title><rect x="0.9919%" y="469" width="0.0735%" height="15" fill="rgb(221,193,54)" fg:x="27" fg:w="2"/><text x="1.2419%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (2 samples, 0.07%)</title><rect x="0.9919%" y="453" width="0.0735%" height="15" fill="rgb(248,212,6)" fg:x="27" fg:w="2"/><text x="1.2419%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (2 samples, 0.07%)</title><rect x="0.9919%" y="437" width="0.0735%" height="15" fill="rgb(208,68,35)" fg:x="27" fg:w="2"/><text x="1.2419%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (1 samples, 0.04%)</title><rect x="1.0654%" y="485" width="0.0367%" height="15" fill="rgb(232,128,0)" fg:x="29" fg:w="1"/><text x="1.3154%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="1.1021%" y="485" width="0.0367%" height="15" fill="rgb(207,160,47)" fg:x="30" fg:w="1"/><text x="1.3521%" y="495.50"></text></g><g><title>[[heap]] (44 samples, 1.62%)</title><rect x="0.0000%" y="501" width="1.6165%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="44"/><text x="0.2500%" y="511.50"></text></g><g><title>rlox::vm::VM::push (13 samples, 0.48%)</title><rect x="1.1389%" y="485" width="0.4776%" height="15" fill="rgb(218,30,26)" fg:x="31" fg:w="13"/><text x="1.3889%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (32 samples, 1.18%)</title><rect x="1.6165%" y="485" width="1.1756%" height="15" fill="rgb(220,122,19)" fg:x="44" fg:w="32"/><text x="1.8665%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.62%)</title><rect x="2.7921%" y="485" width="0.6245%" height="15" fill="rgb(250,228,42)" fg:x="76" fg:w="17"/><text x="3.0421%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.33%)</title><rect x="3.4166%" y="485" width="0.3306%" height="15" fill="rgb(240,193,28)" fg:x="93" fg:w="9"/><text x="3.6666%" y="495.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (11 samples, 0.40%)</title><rect x="3.7472%" y="485" width="0.4041%" height="15" fill="rgb(216,20,37)" fg:x="102" fg:w="11"/><text x="3.9972%" y="495.50"></text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (11 samples, 0.40%)</title><rect x="4.1514%" y="485" width="0.4041%" height="15" fill="rgb(206,188,39)" fg:x="113" fg:w="11"/><text x="4.4014%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (13 samples, 0.48%)</title><rect x="4.5555%" y="485" width="0.4776%" height="15" fill="rgb(217,207,13)" fg:x="124" fg:w="13"/><text x="4.8055%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (26 samples, 0.96%)</title><rect x="5.0331%" y="485" width="0.9552%" height="15" fill="rgb(231,73,38)" fg:x="137" fg:w="26"/><text x="5.2831%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.11%)</title><rect x="5.9882%" y="485" width="0.1102%" height="15" fill="rgb(225,20,46)" fg:x="163" fg:w="3"/><text x="6.2382%" y="495.50"></text></g><g><title>rlox::vm::VM::call_closure (7 samples, 0.26%)</title><rect x="6.0985%" y="485" width="0.2572%" height="15" fill="rgb(210,31,41)" fg:x="166" fg:w="7"/><text x="6.3485%" y="495.50"></text></g><g><title>rlox::vm::VM::close_upvalues (15 samples, 0.55%)</title><rect x="6.3556%" y="485" width="0.5511%" height="15" fill="rgb(221,200,47)" fg:x="173" fg:w="15"/><text x="6.6056%" y="495.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (19 samples, 0.70%)</title><rect x="6.9067%" y="485" width="0.6980%" height="15" fill="rgb(226,26,5)" fg:x="188" fg:w="19"/><text x="7.1567%" y="495.50"></text></g><g><title>rlox::vm::VM::push (39 samples, 1.43%)</title><rect x="7.6047%" y="485" width="1.4328%" height="15" fill="rgb(249,33,26)" fg:x="207" fg:w="39"/><text x="7.8547%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (15 samples, 0.55%)</title><rect x="10.2131%" y="469" width="0.5511%" height="15" fill="rgb(235,183,28)" fg:x="278" fg:w="15"/><text x="10.4631%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (9 samples, 0.33%)</title><rect x="10.7641%" y="469" width="0.3306%" height="15" fill="rgb(221,5,38)" fg:x="293" fg:w="9"/><text x="11.0141%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (9 samples, 0.33%)</title><rect x="10.7641%" y="453" width="0.3306%" height="15" fill="rgb(247,18,42)" fg:x="293" fg:w="9"/><text x="11.0141%" y="463.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (4 samples, 0.15%)</title><rect x="11.0948%" y="469" width="0.1470%" height="15" fill="rgb(241,131,45)" fg:x="302" fg:w="4"/><text x="11.3448%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (4 samples, 0.15%)</title><rect x="11.0948%" y="453" width="0.1470%" height="15" fill="rgb(249,31,29)" fg:x="302" fg:w="4"/><text x="11.3448%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (4 samples, 0.15%)</title><rect x="11.0948%" y="437" width="0.1470%" height="15" fill="rgb(225,111,53)" fg:x="302" fg:w="4"/><text x="11.3448%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.15%)</title><rect x="11.0948%" y="421" width="0.1470%" height="15" fill="rgb(238,160,17)" fg:x="302" fg:w="4"/><text x="11.3448%" y="431.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (4 samples, 0.15%)</title><rect x="11.0948%" y="405" width="0.1470%" height="15" fill="rgb(214,148,48)" fg:x="302" fg:w="4"/><text x="11.3448%" y="415.50"></text></g><g><title>[[stack]] (263 samples, 9.66%)</title><rect x="1.6165%" y="501" width="9.6620%" height="15" fill="rgb(232,36,49)" fg:x="44" fg:w="263"/><text x="1.8665%" y="511.50">[[stack]]</text></g><g><title>rlox::vm::VM::run (61 samples, 2.24%)</title><rect x="9.0375%" y="485" width="2.2410%" height="15" fill="rgb(209,103,24)" fg:x="246" fg:w="61"/><text x="9.2875%" y="495.50">r..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="11.2417%" y="469" width="0.0367%" height="15" fill="rgb(229,88,8)" fg:x="306" fg:w="1"/><text x="11.4917%" y="479.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (5 samples, 0.18%)</title><rect x="11.2785%" y="485" width="0.1837%" height="15" fill="rgb(213,181,19)" fg:x="307" fg:w="5"/><text x="11.5285%" y="495.50"></text></g><g><title>[anon] (6 samples, 0.22%)</title><rect x="11.2785%" y="501" width="0.2204%" height="15" fill="rgb(254,191,54)" fg:x="307" fg:w="6"/><text x="11.5285%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.04%)</title><rect x="11.4622%" y="485" width="0.0367%" height="15" fill="rgb(241,83,37)" fg:x="312" fg:w="1"/><text x="11.7122%" y="495.50"></text></g><g><title>[rlox] (6 samples, 0.22%)</title><rect x="11.4989%" y="501" width="0.2204%" height="15" fill="rgb(233,36,39)" fg:x="313" fg:w="6"/><text x="11.7489%" y="511.50"></text></g><g><title>rlox::vm::VM::push (6 samples, 0.22%)</title><rect x="11.4989%" y="485" width="0.2204%" height="15" fill="rgb(226,3,54)" fg:x="313" fg:w="6"/><text x="11.7489%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (1 samples, 0.04%)</title><rect x="11.7193%" y="485" width="0.0367%" height="15" fill="rgb(245,192,40)" fg:x="319" fg:w="1"/><text x="11.9693%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.59%)</title><rect x="11.7561%" y="485" width="0.5878%" height="15" fill="rgb(238,167,29)" fg:x="320" fg:w="16"/><text x="12.0061%" y="495.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (14 samples, 0.51%)</title><rect x="12.3439%" y="485" width="0.5143%" height="15" fill="rgb(232,182,51)" fg:x="336" fg:w="14"/><text x="12.5939%" y="495.50"></text></g><g><title>[rlox] (5 samples, 0.18%)</title><rect x="12.8582%" y="485" width="0.1837%" height="15" fill="rgb(231,60,39)" fg:x="350" fg:w="5"/><text x="13.1082%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (5 samples, 0.18%)</title><rect x="12.8582%" y="469" width="0.1837%" height="15" fill="rgb(208,69,12)" fg:x="350" fg:w="5"/><text x="13.1082%" y="479.50"></text></g><g><title>rlox::vm::VM::call_closure (1 samples, 0.04%)</title><rect x="13.0419%" y="485" width="0.0367%" height="15" fill="rgb(235,93,37)" fg:x="355" fg:w="1"/><text x="13.2919%" y="495.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (14 samples, 0.51%)</title><rect x="13.0786%" y="485" width="0.5143%" height="15" fill="rgb(213,116,39)" fg:x="356" fg:w="14"/><text x="13.3286%" y="495.50"></text></g><g><title>[unknown] (53 samples, 1.95%)</title><rect x="11.7193%" y="501" width="1.9471%" height="15" fill="rgb(222,207,29)" fg:x="319" fg:w="53"/><text x="11.9693%" y="511.50">[..</text></g><g><title>rlox::vm::VM::push (2 samples, 0.07%)</title><rect x="13.5929%" y="485" width="0.0735%" height="15" fill="rgb(206,96,30)" fg:x="370" fg:w="2"/><text x="13.8429%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (18 samples, 0.66%)</title><rect x="21.3079%" y="245" width="0.6613%" height="15" fill="rgb(218,138,4)" fg:x="580" fg:w="18"/><text x="21.5579%" y="255.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&lt;&amp;f64&gt;&gt;::add (6 samples, 0.22%)</title><rect x="21.7487%" y="229" width="0.2204%" height="15" fill="rgb(250,191,14)" fg:x="592" fg:w="6"/><text x="21.9987%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (6 samples, 0.22%)</title><rect x="21.7487%" y="213" width="0.2204%" height="15" fill="rgb(239,60,40)" fg:x="592" fg:w="6"/><text x="21.9987%" y="223.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::bit::Not&gt;::not (2 samples, 0.07%)</title><rect x="21.9691%" y="245" width="0.0735%" height="15" fill="rgb(206,27,48)" fg:x="598" fg:w="2"/><text x="22.2191%" y="255.50"></text></g><g><title>&lt;&amp;bool as core::ops::bit::Not&gt;::not (2 samples, 0.07%)</title><rect x="21.9691%" y="229" width="0.0735%" height="15" fill="rgb(225,35,8)" fg:x="598" fg:w="2"/><text x="22.2191%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.33%)</title><rect x="22.0426%" y="245" width="0.3306%" height="15" fill="rgb(250,213,24)" fg:x="600" fg:w="9"/><text x="22.2926%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (9 samples, 0.33%)</title><rect x="22.0426%" y="229" width="0.3306%" height="15" fill="rgb(247,123,22)" fg:x="600" fg:w="9"/><text x="22.2926%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.33%)</title><rect x="22.3733%" y="245" width="0.3306%" height="15" fill="rgb(231,138,38)" fg:x="609" fg:w="9"/><text x="22.6233%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.33%)</title><rect x="22.3733%" y="229" width="0.3306%" height="15" fill="rgb(231,145,46)" fg:x="609" fg:w="9"/><text x="22.6233%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.33%)</title><rect x="22.3733%" y="213" width="0.3306%" height="15" fill="rgb(251,118,11)" fg:x="609" fg:w="9"/><text x="22.6233%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (28 samples, 1.03%)</title><rect x="22.7039%" y="245" width="1.0287%" height="15" fill="rgb(217,147,25)" fg:x="618" fg:w="28"/><text x="22.9539%" y="255.50"></text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (80 samples, 2.94%)</title><rect x="23.7325%" y="245" width="2.9390%" height="15" fill="rgb(247,81,37)" fg:x="646" fg:w="80"/><text x="23.9825%" y="255.50">&lt;r..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.15%)</title><rect x="26.5246%" y="229" width="0.1470%" height="15" fill="rgb(209,12,38)" fg:x="722" fg:w="4"/><text x="26.7746%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.15%)</title><rect x="26.5246%" y="213" width="0.1470%" height="15" fill="rgb(227,1,9)" fg:x="722" fg:w="4"/><text x="26.7746%" y="223.50"></text></g><g><title>&lt;rlox::vm::OpCode as core::clone::Clone&gt;::clone (127 samples, 4.67%)</title><rect x="26.6716%" y="245" width="4.6657%" height="15" fill="rgb(248,47,43)" fg:x="726" fg:w="127"/><text x="26.9216%" y="255.50">&lt;rlox..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (2 samples, 0.07%)</title><rect x="31.3373%" y="245" width="0.0735%" height="15" fill="rgb(221,10,30)" fg:x="853" fg:w="2"/><text x="31.5873%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (6 samples, 0.22%)</title><rect x="31.4107%" y="245" width="0.2204%" height="15" fill="rgb(210,229,1)" fg:x="855" fg:w="6"/><text x="31.6607%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.11%)</title><rect x="31.5209%" y="229" width="0.1102%" height="15" fill="rgb(222,148,37)" fg:x="858" fg:w="3"/><text x="31.7709%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (3 samples, 0.11%)</title><rect x="31.5209%" y="213" width="0.1102%" height="15" fill="rgb(234,67,33)" fg:x="858" fg:w="3"/><text x="31.7709%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (3 samples, 0.11%)</title><rect x="31.8883%" y="229" width="0.1102%" height="15" fill="rgb(247,98,35)" fg:x="868" fg:w="3"/><text x="32.1383%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (17 samples, 0.62%)</title><rect x="31.6312%" y="245" width="0.6245%" height="15" fill="rgb(247,138,52)" fg:x="861" fg:w="17"/><text x="31.8812%" y="255.50"></text></g><g><title>core::mem::drop (7 samples, 0.26%)</title><rect x="31.9985%" y="229" width="0.2572%" height="15" fill="rgb(213,79,30)" fg:x="871" fg:w="7"/><text x="32.2485%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjUpvalue&gt;&gt;,alloc::alloc::Global&gt;&gt; (7 samples, 0.26%)</title><rect x="31.9985%" y="213" width="0.2572%" height="15" fill="rgb(246,177,23)" fg:x="871" fg:w="7"/><text x="32.2485%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.26%)</title><rect x="31.9985%" y="197" width="0.2572%" height="15" fill="rgb(230,62,27)" fg:x="871" fg:w="7"/><text x="32.2485%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (7 samples, 0.26%)</title><rect x="31.9985%" y="181" width="0.2572%" height="15" fill="rgb(216,154,8)" fg:x="871" fg:w="7"/><text x="32.2485%" y="191.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (4 samples, 0.15%)</title><rect x="32.2557%" y="245" width="0.1470%" height="15" fill="rgb(244,35,45)" fg:x="878" fg:w="4"/><text x="32.5057%" y="255.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (4 samples, 0.15%)</title><rect x="32.2557%" y="229" width="0.1470%" height="15" fill="rgb(251,115,12)" fg:x="878" fg:w="4"/><text x="32.5057%" y="239.50"></text></g><g><title>core::cell::BorrowRef::new (4 samples, 0.15%)</title><rect x="32.2557%" y="213" width="0.1470%" height="15" fill="rgb(240,54,50)" fg:x="878" fg:w="4"/><text x="32.5057%" y="223.50"></text></g><g><title>core::cell::is_reading (4 samples, 0.15%)</title><rect x="32.2557%" y="197" width="0.1470%" height="15" fill="rgb(233,84,52)" fg:x="878" fg:w="4"/><text x="32.5057%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (3 samples, 0.11%)</title><rect x="32.4026%" y="245" width="0.1102%" height="15" fill="rgb(207,117,47)" fg:x="882" fg:w="3"/><text x="32.6526%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (24 samples, 0.88%)</title><rect x="32.5129%" y="245" width="0.8817%" height="15" fill="rgb(249,43,39)" fg:x="885" fg:w="24"/><text x="32.7629%" y="255.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.40%)</title><rect x="32.9904%" y="229" width="0.4041%" height="15" fill="rgb(209,38,44)" fg:x="898" fg:w="11"/><text x="33.2404%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (2 samples, 0.07%)</title><rect x="33.3211%" y="213" width="0.0735%" height="15" fill="rgb(236,212,23)" fg:x="907" fg:w="2"/><text x="33.5711%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.07%)</title><rect x="33.3211%" y="197" width="0.0735%" height="15" fill="rgb(242,79,21)" fg:x="907" fg:w="2"/><text x="33.5711%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.07%)</title><rect x="33.3211%" y="181" width="0.0735%" height="15" fill="rgb(211,96,35)" fg:x="907" fg:w="2"/><text x="33.5711%" y="191.50"></text></g><g><title>core::mem::replace (2 samples, 0.07%)</title><rect x="33.3211%" y="165" width="0.0735%" height="15" fill="rgb(253,215,40)" fg:x="907" fg:w="2"/><text x="33.5711%" y="175.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="33.3211%" y="149" width="0.0735%" height="15" fill="rgb(211,81,21)" fg:x="907" fg:w="2"/><text x="33.5711%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (4 samples, 0.15%)</title><rect x="33.3946%" y="245" width="0.1470%" height="15" fill="rgb(208,190,38)" fg:x="909" fg:w="4"/><text x="33.6446%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (4 samples, 0.15%)</title><rect x="33.3946%" y="229" width="0.1470%" height="15" fill="rgb(235,213,38)" fg:x="909" fg:w="4"/><text x="33.6446%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (4 samples, 0.15%)</title><rect x="33.3946%" y="213" width="0.1470%" height="15" fill="rgb(237,122,38)" fg:x="909" fg:w="4"/><text x="33.6446%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rlox::value::Value&gt;&gt; (1 samples, 0.04%)</title><rect x="33.5415%" y="245" width="0.0367%" height="15" fill="rgb(244,218,35)" fg:x="913" fg:w="1"/><text x="33.7915%" y="255.50"></text></g><g><title>rlox::vm::VM::run (1 samples, 0.04%)</title><rect x="33.5415%" y="229" width="0.0367%" height="15" fill="rgb(240,68,47)" fg:x="913" fg:w="1"/><text x="33.7915%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (45 samples, 1.65%)</title><rect x="33.5783%" y="245" width="1.6532%" height="15" fill="rgb(210,16,53)" fg:x="914" fg:w="45"/><text x="33.8283%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (44 samples, 1.62%)</title><rect x="33.6150%" y="229" width="1.6165%" height="15" fill="rgb(235,124,12)" fg:x="915" fg:w="44"/><text x="33.8650%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 1.14%)</title><rect x="34.0926%" y="213" width="1.1389%" height="15" fill="rgb(224,169,11)" fg:x="928" fg:w="31"/><text x="34.3426%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (6 samples, 0.22%)</title><rect x="35.0110%" y="197" width="0.2204%" height="15" fill="rgb(250,166,2)" fg:x="953" fg:w="6"/><text x="35.2610%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.22%)</title><rect x="35.0110%" y="181" width="0.2204%" height="15" fill="rgb(242,216,29)" fg:x="953" fg:w="6"/><text x="35.2610%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.22%)</title><rect x="35.0110%" y="165" width="0.2204%" height="15" fill="rgb(230,116,27)" fg:x="953" fg:w="6"/><text x="35.2610%" y="175.50"></text></g><g><title>core::mem::replace (6 samples, 0.22%)</title><rect x="35.0110%" y="149" width="0.2204%" height="15" fill="rgb(228,99,48)" fg:x="953" fg:w="6"/><text x="35.2610%" y="159.50"></text></g><g><title>core::ptr::write (6 samples, 0.22%)</title><rect x="35.0110%" y="133" width="0.2204%" height="15" fill="rgb(253,11,6)" fg:x="953" fg:w="6"/><text x="35.2610%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::CallFrame&gt; (11 samples, 0.40%)</title><rect x="35.2314%" y="245" width="0.4041%" height="15" fill="rgb(247,143,39)" fg:x="959" fg:w="11"/><text x="35.4814%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;rlox::object::ObjClosure&gt;&gt; (11 samples, 0.40%)</title><rect x="35.2314%" y="229" width="0.4041%" height="15" fill="rgb(236,97,10)" fg:x="959" fg:w="11"/><text x="35.4814%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.29%)</title><rect x="35.3417%" y="213" width="0.2939%" height="15" fill="rgb(233,208,19)" fg:x="962" fg:w="8"/><text x="35.5917%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (4 samples, 0.15%)</title><rect x="35.4886%" y="197" width="0.1470%" height="15" fill="rgb(216,164,2)" fg:x="966" fg:w="4"/><text x="35.7386%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.15%)</title><rect x="35.4886%" y="181" width="0.1470%" height="15" fill="rgb(220,129,5)" fg:x="966" fg:w="4"/><text x="35.7386%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.15%)</title><rect x="35.4886%" y="165" width="0.1470%" height="15" fill="rgb(242,17,10)" fg:x="966" fg:w="4"/><text x="35.7386%" y="175.50"></text></g><g><title>core::mem::replace (4 samples, 0.15%)</title><rect x="35.4886%" y="149" width="0.1470%" height="15" fill="rgb(242,107,0)" fg:x="966" fg:w="4"/><text x="35.7386%" y="159.50"></text></g><g><title>core::ptr::write (4 samples, 0.15%)</title><rect x="35.4886%" y="133" width="0.1470%" height="15" fill="rgb(251,28,31)" fg:x="966" fg:w="4"/><text x="35.7386%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::OpCode&gt; (60 samples, 2.20%)</title><rect x="35.6356%" y="245" width="2.2043%" height="15" fill="rgb(233,223,10)" fg:x="970" fg:w="60"/><text x="35.8856%" y="255.50">c..</text></g><g><title>rlox::value::Value::as_str (31 samples, 1.14%)</title><rect x="37.8398%" y="245" width="1.1389%" height="15" fill="rgb(215,21,27)" fg:x="1030" fg:w="31"/><text x="38.0898%" y="255.50"></text></g><g><title>rlox::value::Value::is_instance (5 samples, 0.18%)</title><rect x="38.9787%" y="245" width="0.1837%" height="15" fill="rgb(232,23,21)" fg:x="1061" fg:w="5"/><text x="39.2287%" y="255.50"></text></g><g><title>rlox::value::Value::lt (4 samples, 0.15%)</title><rect x="39.1624%" y="245" width="0.1470%" height="15" fill="rgb(244,5,23)" fg:x="1066" fg:w="4"/><text x="39.4124%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::lt (3 samples, 0.11%)</title><rect x="39.1991%" y="229" width="0.1102%" height="15" fill="rgb(226,81,46)" fg:x="1067" fg:w="3"/><text x="39.4491%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (3 samples, 0.11%)</title><rect x="39.1991%" y="213" width="0.1102%" height="15" fill="rgb(247,70,30)" fg:x="1067" fg:w="3"/><text x="39.4491%" y="223.50"></text></g><g><title>rlox::vm::VM::close_upvalues (4 samples, 0.15%)</title><rect x="39.3093%" y="245" width="0.1470%" height="15" fill="rgb(212,68,19)" fg:x="1070" fg:w="4"/><text x="39.5593%" y="255.50"></text></g><g><title>rlox::vm::VM::frame (17 samples, 0.62%)</title><rect x="39.4563%" y="245" width="0.6245%" height="15" fill="rgb(240,187,13)" fg:x="1074" fg:w="17"/><text x="39.7063%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.62%)</title><rect x="39.4563%" y="229" width="0.6245%" height="15" fill="rgb(223,113,26)" fg:x="1074" fg:w="17"/><text x="39.7063%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (9 samples, 0.33%)</title><rect x="39.7502%" y="213" width="0.3306%" height="15" fill="rgb(206,192,2)" fg:x="1082" fg:w="9"/><text x="40.0002%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.48%)</title><rect x="40.2278%" y="229" width="0.4776%" height="15" fill="rgb(241,108,4)" fg:x="1095" fg:w="13"/><text x="40.4778%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (13 samples, 0.48%)</title><rect x="40.2278%" y="213" width="0.4776%" height="15" fill="rgb(247,173,49)" fg:x="1095" fg:w="13"/><text x="40.4778%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="40.6686%" y="197" width="0.0367%" height="15" fill="rgb(224,114,35)" fg:x="1107" fg:w="1"/><text x="40.9186%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="40.6686%" y="181" width="0.0367%" height="15" fill="rgb(245,159,27)" fg:x="1107" fg:w="1"/><text x="40.9186%" y="191.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="40.6686%" y="165" width="0.0367%" height="15" fill="rgb(245,172,44)" fg:x="1107" fg:w="1"/><text x="40.9186%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="40.6686%" y="149" width="0.0367%" height="15" fill="rgb(236,23,11)" fg:x="1107" fg:w="1"/><text x="40.9186%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.07%)</title><rect x="40.7054%" y="229" width="0.0735%" height="15" fill="rgb(205,117,38)" fg:x="1108" fg:w="2"/><text x="40.9554%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.07%)</title><rect x="40.7054%" y="213" width="0.0735%" height="15" fill="rgb(237,72,25)" fg:x="1108" fg:w="2"/><text x="40.9554%" y="223.50"></text></g><g><title>core::cell::BorrowRef::new (2 samples, 0.07%)</title><rect x="40.7054%" y="197" width="0.0735%" height="15" fill="rgb(244,70,9)" fg:x="1108" fg:w="2"/><text x="40.9554%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="40.7054%" y="181" width="0.0735%" height="15" fill="rgb(217,125,39)" fg:x="1108" fg:w="2"/><text x="40.9554%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (9 samples, 0.33%)</title><rect x="40.7788%" y="229" width="0.3306%" height="15" fill="rgb(235,36,10)" fg:x="1110" fg:w="9"/><text x="41.0288%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.33%)</title><rect x="40.7788%" y="213" width="0.3306%" height="15" fill="rgb(251,123,47)" fg:x="1110" fg:w="9"/><text x="41.0288%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (3 samples, 0.11%)</title><rect x="40.9993%" y="197" width="0.1102%" height="15" fill="rgb(221,13,13)" fg:x="1116" fg:w="3"/><text x="41.2493%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.11%)</title><rect x="40.9993%" y="181" width="0.1102%" height="15" fill="rgb(238,131,9)" fg:x="1116" fg:w="3"/><text x="41.2493%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.11%)</title><rect x="40.9993%" y="165" width="0.1102%" height="15" fill="rgb(211,50,8)" fg:x="1116" fg:w="3"/><text x="41.2493%" y="175.50"></text></g><g><title>core::mem::replace (3 samples, 0.11%)</title><rect x="40.9993%" y="149" width="0.1102%" height="15" fill="rgb(245,182,24)" fg:x="1116" fg:w="3"/><text x="41.2493%" y="159.50"></text></g><g><title>core::ptr::write (3 samples, 0.11%)</title><rect x="40.9993%" y="133" width="0.1102%" height="15" fill="rgb(242,14,37)" fg:x="1116" fg:w="3"/><text x="41.2493%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (11 samples, 0.40%)</title><rect x="41.1095%" y="229" width="0.4041%" height="15" fill="rgb(246,228,12)" fg:x="1119" fg:w="11"/><text x="41.3595%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (11 samples, 0.40%)</title><rect x="41.1095%" y="213" width="0.4041%" height="15" fill="rgb(213,55,15)" fg:x="1119" fg:w="11"/><text x="41.3595%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (11 samples, 0.40%)</title><rect x="41.1095%" y="197" width="0.4041%" height="15" fill="rgb(209,9,3)" fg:x="1119" fg:w="11"/><text x="41.3595%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (11 samples, 0.40%)</title><rect x="41.1095%" y="181" width="0.4041%" height="15" fill="rgb(230,59,30)" fg:x="1119" fg:w="11"/><text x="41.3595%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (11 samples, 0.40%)</title><rect x="41.1095%" y="165" width="0.4041%" height="15" fill="rgb(209,121,21)" fg:x="1119" fg:w="11"/><text x="41.3595%" y="175.50"></text></g><g><title>core::mem::replace (11 samples, 0.40%)</title><rect x="41.1095%" y="149" width="0.4041%" height="15" fill="rgb(220,109,13)" fg:x="1119" fg:w="11"/><text x="41.3595%" y="159.50"></text></g><g><title>core::ptr::write (11 samples, 0.40%)</title><rect x="41.1095%" y="133" width="0.4041%" height="15" fill="rgb(232,18,1)" fg:x="1119" fg:w="11"/><text x="41.3595%" y="143.50"></text></g><g><title>rlox::value::Value::as_instance (6 samples, 0.22%)</title><rect x="41.5136%" y="229" width="0.2204%" height="15" fill="rgb(215,41,42)" fg:x="1130" fg:w="6"/><text x="41.7636%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.55%)</title><rect x="42.8361%" y="213" width="0.5511%" height="15" fill="rgb(224,123,36)" fg:x="1166" fg:w="15"/><text x="43.0861%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (15 samples, 0.55%)</title><rect x="42.8361%" y="197" width="0.5511%" height="15" fill="rgb(240,125,3)" fg:x="1166" fg:w="15"/><text x="43.0861%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="43.3505%" y="181" width="0.0367%" height="15" fill="rgb(205,98,50)" fg:x="1180" fg:w="1"/><text x="43.6005%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="43.3505%" y="165" width="0.0367%" height="15" fill="rgb(205,185,37)" fg:x="1180" fg:w="1"/><text x="43.6005%" y="175.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="43.3505%" y="149" width="0.0367%" height="15" fill="rgb(238,207,15)" fg:x="1180" fg:w="1"/><text x="43.6005%" y="159.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="43.3505%" y="133" width="0.0367%" height="15" fill="rgb(213,199,42)" fg:x="1180" fg:w="1"/><text x="43.6005%" y="143.50"></text></g><g><title>core::cell::BorrowRef::new (9 samples, 0.33%)</title><rect x="43.3872%" y="181" width="0.3306%" height="15" fill="rgb(235,201,11)" fg:x="1181" fg:w="9"/><text x="43.6372%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (9 samples, 0.33%)</title><rect x="43.3872%" y="165" width="0.3306%" height="15" fill="rgb(207,46,11)" fg:x="1181" fg:w="9"/><text x="43.6372%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (9 samples, 0.33%)</title><rect x="43.3872%" y="149" width="0.3306%" height="15" fill="rgb(241,35,35)" fg:x="1181" fg:w="9"/><text x="43.6372%" y="159.50"></text></g><g><title>core::mem::replace (9 samples, 0.33%)</title><rect x="43.3872%" y="133" width="0.3306%" height="15" fill="rgb(243,32,47)" fg:x="1181" fg:w="9"/><text x="43.6372%" y="143.50"></text></g><g><title>core::ptr::write (9 samples, 0.33%)</title><rect x="43.3872%" y="117" width="0.3306%" height="15" fill="rgb(247,202,23)" fg:x="1181" fg:w="9"/><text x="43.6372%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (12 samples, 0.44%)</title><rect x="43.3872%" y="213" width="0.4409%" height="15" fill="rgb(219,102,11)" fg:x="1181" fg:w="12"/><text x="43.6372%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (12 samples, 0.44%)</title><rect x="43.3872%" y="197" width="0.4409%" height="15" fill="rgb(243,110,44)" fg:x="1181" fg:w="12"/><text x="43.6372%" y="207.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (3 samples, 0.11%)</title><rect x="43.7179%" y="181" width="0.1102%" height="15" fill="rgb(222,74,54)" fg:x="1190" fg:w="3"/><text x="43.9679%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.26%)</title><rect x="45.0037%" y="181" width="0.2572%" height="15" fill="rgb(216,99,12)" fg:x="1225" fg:w="7"/><text x="45.2537%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.26%)</title><rect x="45.0037%" y="165" width="0.2572%" height="15" fill="rgb(226,22,26)" fg:x="1225" fg:w="7"/><text x="45.2537%" y="175.50"></text></g><g><title>rlox::vm::VM::call_closure (71 samples, 2.61%)</title><rect x="43.8281%" y="213" width="2.6084%" height="15" fill="rgb(217,163,10)" fg:x="1193" fg:w="71"/><text x="44.0781%" y="223.50">rl..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (39 samples, 1.43%)</title><rect x="45.0037%" y="197" width="1.4328%" height="15" fill="rgb(213,25,53)" fg:x="1225" fg:w="39"/><text x="45.2537%" y="207.50"></text></g><g><title>core::ptr::write (32 samples, 1.18%)</title><rect x="45.2608%" y="181" width="1.1756%" height="15" fill="rgb(252,105,26)" fg:x="1232" fg:w="32"/><text x="45.5108%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.22%)</title><rect x="46.9508%" y="85" width="0.2204%" height="15" fill="rgb(220,39,43)" fg:x="1278" fg:w="6"/><text x="47.2008%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 0.51%)</title><rect x="46.8038%" y="101" width="0.5143%" height="15" fill="rgb(229,68,48)" fg:x="1274" fg:w="14"/><text x="47.0538%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.15%)</title><rect x="47.1712%" y="85" width="0.1470%" height="15" fill="rgb(252,8,32)" fg:x="1284" fg:w="4"/><text x="47.4212%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (25 samples, 0.92%)</title><rect x="47.5386%" y="85" width="0.9184%" height="15" fill="rgb(223,20,43)" fg:x="1294" fg:w="25"/><text x="47.7886%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (68 samples, 2.50%)</title><rect x="46.4732%" y="149" width="2.4982%" height="15" fill="rgb(229,81,49)" fg:x="1265" fg:w="68"/><text x="46.7232%" y="159.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (68 samples, 2.50%)</title><rect x="46.4732%" y="133" width="2.4982%" height="15" fill="rgb(236,28,36)" fg:x="1265" fg:w="68"/><text x="46.7232%" y="143.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (68 samples, 2.50%)</title><rect x="46.4732%" y="117" width="2.4982%" height="15" fill="rgb(249,185,26)" fg:x="1265" fg:w="68"/><text x="46.7232%" y="127.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (45 samples, 1.65%)</title><rect x="47.3181%" y="101" width="1.6532%" height="15" fill="rgb(249,174,33)" fg:x="1288" fg:w="45"/><text x="47.5681%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 0.51%)</title><rect x="48.4570%" y="85" width="0.5143%" height="15" fill="rgb(233,201,37)" fg:x="1319" fg:w="14"/><text x="48.7070%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (25 samples, 0.92%)</title><rect x="48.9713%" y="149" width="0.9184%" height="15" fill="rgb(221,78,26)" fg:x="1333" fg:w="25"/><text x="49.2213%" y="159.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (14 samples, 0.51%)</title><rect x="49.3755%" y="133" width="0.5143%" height="15" fill="rgb(250,127,30)" fg:x="1344" fg:w="14"/><text x="49.6255%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (14 samples, 0.51%)</title><rect x="49.3755%" y="117" width="0.5143%" height="15" fill="rgb(230,49,44)" fg:x="1344" fg:w="14"/><text x="49.6255%" y="127.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (14 samples, 0.51%)</title><rect x="49.3755%" y="101" width="0.5143%" height="15" fill="rgb(229,67,23)" fg:x="1344" fg:w="14"/><text x="49.6255%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (132 samples, 4.85%)</title><rect x="46.4732%" y="165" width="4.8494%" height="15" fill="rgb(249,83,47)" fg:x="1265" fg:w="132"/><text x="46.7232%" y="175.50">hashbr..</text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (39 samples, 1.43%)</title><rect x="49.8898%" y="149" width="1.4328%" height="15" fill="rgb(215,43,3)" fg:x="1358" fg:w="39"/><text x="50.1398%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (39 samples, 1.43%)</title><rect x="49.8898%" y="133" width="1.4328%" height="15" fill="rgb(238,154,13)" fg:x="1358" fg:w="39"/><text x="50.1398%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (29 samples, 1.07%)</title><rect x="50.2572%" y="117" width="1.0654%" height="15" fill="rgb(219,56,2)" fg:x="1368" fg:w="29"/><text x="50.5072%" y="127.50"></text></g><g><title>core::hash::Hasher::write_u32 (29 samples, 1.07%)</title><rect x="50.2572%" y="101" width="1.0654%" height="15" fill="rgb(233,0,4)" fg:x="1368" fg:w="29"/><text x="50.5072%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 1.07%)</title><rect x="50.2572%" y="85" width="1.0654%" height="15" fill="rgb(235,30,7)" fg:x="1368" fg:w="29"/><text x="50.5072%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (29 samples, 1.07%)</title><rect x="50.2572%" y="69" width="1.0654%" height="15" fill="rgb(250,79,13)" fg:x="1368" fg:w="29"/><text x="50.5072%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 1.07%)</title><rect x="50.2572%" y="53" width="1.0654%" height="15" fill="rgb(211,146,34)" fg:x="1368" fg:w="29"/><text x="50.5072%" y="63.50"></text></g><g><title>core::hash::sip::u8to64_le (15 samples, 0.55%)</title><rect x="50.7715%" y="37" width="0.5511%" height="15" fill="rgb(228,22,38)" fg:x="1382" fg:w="15"/><text x="51.0215%" y="47.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.37%)</title><rect x="51.6532%" y="117" width="0.3674%" height="15" fill="rgb(235,168,5)" fg:x="1406" fg:w="10"/><text x="51.9032%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="51.8736%" y="101" width="0.1470%" height="15" fill="rgb(221,155,16)" fg:x="1412" fg:w="4"/><text x="52.1236%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.15%)</title><rect x="51.8736%" y="85" width="0.1470%" height="15" fill="rgb(215,215,53)" fg:x="1412" fg:w="4"/><text x="52.1236%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.44%)</title><rect x="51.6532%" y="133" width="0.4409%" height="15" fill="rgb(223,4,10)" fg:x="1406" fg:w="12"/><text x="51.9032%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (2 samples, 0.07%)</title><rect x="52.0206%" y="117" width="0.0735%" height="15" fill="rgb(234,103,6)" fg:x="1416" fg:w="2"/><text x="52.2706%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.07%)</title><rect x="52.0206%" y="101" width="0.0735%" height="15" fill="rgb(227,97,0)" fg:x="1416" fg:w="2"/><text x="52.2706%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="52.0206%" y="85" width="0.0735%" height="15" fill="rgb(234,150,53)" fg:x="1416" fg:w="2"/><text x="52.2706%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.07%)</title><rect x="52.0206%" y="69" width="0.0735%" height="15" fill="rgb(228,201,54)" fg:x="1416" fg:w="2"/><text x="52.2706%" y="79.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (5 samples, 0.18%)</title><rect x="52.0940%" y="133" width="0.1837%" height="15" fill="rgb(222,22,37)" fg:x="1418" fg:w="5"/><text x="52.3440%" y="143.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (5 samples, 0.18%)</title><rect x="52.0940%" y="117" width="0.1837%" height="15" fill="rgb(237,53,32)" fg:x="1418" fg:w="5"/><text x="52.3440%" y="127.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (5 samples, 0.18%)</title><rect x="52.0940%" y="101" width="0.1837%" height="15" fill="rgb(233,25,53)" fg:x="1418" fg:w="5"/><text x="52.3440%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.04%)</title><rect x="52.3512%" y="85" width="0.0367%" height="15" fill="rgb(210,40,34)" fg:x="1425" fg:w="1"/><text x="52.6012%" y="95.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (296 samples, 10.87%)</title><rect x="41.7340%" y="229" width="10.8744%" height="15" fill="rgb(241,220,44)" fg:x="1136" fg:w="296"/><text x="41.9840%" y="239.50">rlox::vm::VM::in..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (168 samples, 6.17%)</title><rect x="46.4364%" y="213" width="6.1719%" height="15" fill="rgb(235,28,35)" fg:x="1264" fg:w="168"/><text x="46.6864%" y="223.50">std::col..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (168 samples, 6.17%)</title><rect x="46.4364%" y="197" width="6.1719%" height="15" fill="rgb(210,56,17)" fg:x="1264" fg:w="168"/><text x="46.6864%" y="207.50">hashbrow..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (168 samples, 6.17%)</title><rect x="46.4364%" y="181" width="6.1719%" height="15" fill="rgb(224,130,29)" fg:x="1264" fg:w="168"/><text x="46.6864%" y="191.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (35 samples, 1.29%)</title><rect x="51.3226%" y="165" width="1.2858%" height="15" fill="rgb(235,212,8)" fg:x="1397" fg:w="35"/><text x="51.5726%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (35 samples, 1.29%)</title><rect x="51.3226%" y="149" width="1.2858%" height="15" fill="rgb(223,33,50)" fg:x="1397" fg:w="35"/><text x="51.5726%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (9 samples, 0.33%)</title><rect x="52.2777%" y="133" width="0.3306%" height="15" fill="rgb(219,149,13)" fg:x="1423" fg:w="9"/><text x="52.5277%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (9 samples, 0.33%)</title><rect x="52.2777%" y="117" width="0.3306%" height="15" fill="rgb(250,156,29)" fg:x="1423" fg:w="9"/><text x="52.5277%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (9 samples, 0.33%)</title><rect x="52.2777%" y="101" width="0.3306%" height="15" fill="rgb(216,193,19)" fg:x="1423" fg:w="9"/><text x="52.5277%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.22%)</title><rect x="52.3880%" y="85" width="0.2204%" height="15" fill="rgb(216,135,14)" fg:x="1426" fg:w="6"/><text x="52.6380%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.22%)</title><rect x="52.3880%" y="69" width="0.2204%" height="15" fill="rgb(241,47,5)" fg:x="1426" fg:w="6"/><text x="52.6380%" y="79.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="52.3880%" y="53" width="0.2204%" height="15" fill="rgb(233,42,35)" fg:x="1426" fg:w="6"/><text x="52.6380%" y="63.50"></text></g><g><title>rlox::vm::VM::peek (9 samples, 0.33%)</title><rect x="52.6084%" y="229" width="0.3306%" height="15" fill="rgb(231,13,6)" fg:x="1432" fg:w="9"/><text x="52.8584%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.22%)</title><rect x="52.7186%" y="213" width="0.2204%" height="15" fill="rgb(207,181,40)" fg:x="1435" fg:w="6"/><text x="52.9686%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6 samples, 0.22%)</title><rect x="52.7186%" y="197" width="0.2204%" height="15" fill="rgb(254,173,49)" fg:x="1435" fg:w="6"/><text x="52.9686%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="53.5268%" y="101" width="0.1102%" height="15" fill="rgb(221,1,38)" fg:x="1457" fg:w="3"/><text x="53.7768%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.26%)</title><rect x="53.4533%" y="117" width="0.2572%" height="15" fill="rgb(206,124,46)" fg:x="1455" fg:w="7"/><text x="53.7033%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="53.6370%" y="101" width="0.0735%" height="15" fill="rgb(249,21,11)" fg:x="1460" fg:w="2"/><text x="53.8870%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.77%)</title><rect x="54.1146%" y="101" width="0.7715%" height="15" fill="rgb(222,201,40)" fg:x="1473" fg:w="21"/><text x="54.3646%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (54 samples, 1.98%)</title><rect x="53.2329%" y="165" width="1.9838%" height="15" fill="rgb(235,61,29)" fg:x="1449" fg:w="54"/><text x="53.4829%" y="175.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (54 samples, 1.98%)</title><rect x="53.2329%" y="149" width="1.9838%" height="15" fill="rgb(219,207,3)" fg:x="1449" fg:w="54"/><text x="53.4829%" y="159.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (54 samples, 1.98%)</title><rect x="53.2329%" y="133" width="1.9838%" height="15" fill="rgb(222,56,46)" fg:x="1449" fg:w="54"/><text x="53.4829%" y="143.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (41 samples, 1.51%)</title><rect x="53.7105%" y="117" width="1.5062%" height="15" fill="rgb(239,76,54)" fg:x="1462" fg:w="41"/><text x="53.9605%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (9 samples, 0.33%)</title><rect x="54.8861%" y="101" width="0.3306%" height="15" fill="rgb(231,124,27)" fg:x="1494" fg:w="9"/><text x="55.1361%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (18 samples, 0.66%)</title><rect x="55.2168%" y="165" width="0.6613%" height="15" fill="rgb(249,195,6)" fg:x="1503" fg:w="18"/><text x="55.4668%" y="175.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (13 samples, 0.48%)</title><rect x="55.4004%" y="149" width="0.4776%" height="15" fill="rgb(237,174,47)" fg:x="1508" fg:w="13"/><text x="55.6504%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (7 samples, 0.26%)</title><rect x="55.6209%" y="133" width="0.2572%" height="15" fill="rgb(206,201,31)" fg:x="1514" fg:w="7"/><text x="55.8709%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (7 samples, 0.26%)</title><rect x="55.6209%" y="117" width="0.2572%" height="15" fill="rgb(231,57,52)" fg:x="1514" fg:w="7"/><text x="55.8709%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.70%)</title><rect x="55.9148%" y="69" width="0.6980%" height="15" fill="rgb(248,177,22)" fg:x="1522" fg:w="19"/><text x="56.1648%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (12 samples, 0.44%)</title><rect x="56.1719%" y="53" width="0.4409%" height="15" fill="rgb(215,211,37)" fg:x="1529" fg:w="12"/><text x="56.4219%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (95 samples, 3.49%)</title><rect x="53.1594%" y="181" width="3.4901%" height="15" fill="rgb(241,128,51)" fg:x="1447" fg:w="95"/><text x="53.4094%" y="191.50">has..</text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (21 samples, 0.77%)</title><rect x="55.8780%" y="165" width="0.7715%" height="15" fill="rgb(227,165,31)" fg:x="1521" fg:w="21"/><text x="56.1280%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (21 samples, 0.77%)</title><rect x="55.8780%" y="149" width="0.7715%" height="15" fill="rgb(228,167,24)" fg:x="1521" fg:w="21"/><text x="56.1280%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (20 samples, 0.73%)</title><rect x="55.9148%" y="133" width="0.7348%" height="15" fill="rgb(228,143,12)" fg:x="1522" fg:w="20"/><text x="56.1648%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u32 (20 samples, 0.73%)</title><rect x="55.9148%" y="117" width="0.7348%" height="15" fill="rgb(249,149,8)" fg:x="1522" fg:w="20"/><text x="56.1648%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.73%)</title><rect x="55.9148%" y="101" width="0.7348%" height="15" fill="rgb(243,35,44)" fg:x="1522" fg:w="20"/><text x="56.1648%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.73%)</title><rect x="55.9148%" y="85" width="0.7348%" height="15" fill="rgb(246,89,9)" fg:x="1522" fg:w="20"/><text x="56.1648%" y="95.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (1 samples, 0.04%)</title><rect x="56.6128%" y="69" width="0.0367%" height="15" fill="rgb(233,213,13)" fg:x="1541" fg:w="1"/><text x="56.8628%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="57.0536%" y="149" width="0.1470%" height="15" fill="rgb(233,141,41)" fg:x="1553" fg:w="4"/><text x="57.3036%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.15%)</title><rect x="57.0536%" y="133" width="0.1470%" height="15" fill="rgb(239,167,4)" fg:x="1553" fg:w="4"/><text x="57.3036%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.04%)</title><rect x="57.3475%" y="101" width="0.0367%" height="15" fill="rgb(209,217,16)" fg:x="1561" fg:w="1"/><text x="57.5975%" y="111.50"></text></g><g><title>rlox::vm::VM::invoke (479 samples, 17.60%)</title><rect x="40.0808%" y="245" width="17.5974%" height="15" fill="rgb(219,88,35)" fg:x="1091" fg:w="479"/><text x="40.3308%" y="255.50">rlox::vm::VM::invoke</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (129 samples, 4.74%)</title><rect x="52.9390%" y="229" width="4.7392%" height="15" fill="rgb(220,193,23)" fg:x="1441" fg:w="129"/><text x="53.1890%" y="239.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (129 samples, 4.74%)</title><rect x="52.9390%" y="213" width="4.7392%" height="15" fill="rgb(230,90,52)" fg:x="1441" fg:w="129"/><text x="53.1890%" y="223.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (129 samples, 4.74%)</title><rect x="52.9390%" y="197" width="4.7392%" height="15" fill="rgb(252,106,19)" fg:x="1441" fg:w="129"/><text x="53.1890%" y="207.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (28 samples, 1.03%)</title><rect x="56.6495%" y="181" width="1.0287%" height="15" fill="rgb(206,74,20)" fg:x="1542" fg:w="28"/><text x="56.8995%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (28 samples, 1.03%)</title><rect x="56.6495%" y="165" width="1.0287%" height="15" fill="rgb(230,138,44)" fg:x="1542" fg:w="28"/><text x="56.8995%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (13 samples, 0.48%)</title><rect x="57.2006%" y="149" width="0.4776%" height="15" fill="rgb(235,182,43)" fg:x="1557" fg:w="13"/><text x="57.4506%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (13 samples, 0.48%)</title><rect x="57.2006%" y="133" width="0.4776%" height="15" fill="rgb(242,16,51)" fg:x="1557" fg:w="13"/><text x="57.4506%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (13 samples, 0.48%)</title><rect x="57.2006%" y="117" width="0.4776%" height="15" fill="rgb(248,9,4)" fg:x="1557" fg:w="13"/><text x="57.4506%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (8 samples, 0.29%)</title><rect x="57.3843%" y="101" width="0.2939%" height="15" fill="rgb(210,31,22)" fg:x="1562" fg:w="8"/><text x="57.6343%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (8 samples, 0.29%)</title><rect x="57.3843%" y="85" width="0.2939%" height="15" fill="rgb(239,54,39)" fg:x="1562" fg:w="8"/><text x="57.6343%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.29%)</title><rect x="57.3843%" y="69" width="0.2939%" height="15" fill="rgb(230,99,41)" fg:x="1562" fg:w="8"/><text x="57.6343%" y="79.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 1.40%)</title><rect x="62.2337%" y="197" width="1.3960%" height="15" fill="rgb(253,106,12)" fg:x="1694" fg:w="38"/><text x="62.4837%" y="207.50"></text></g><g><title>rlox::chunk::Chunk::read_instruction (77 samples, 2.83%)</title><rect x="62.2337%" y="229" width="2.8288%" height="15" fill="rgb(213,46,41)" fg:x="1694" fg:w="77"/><text x="62.4837%" y="239.50">rl..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (77 samples, 2.83%)</title><rect x="62.2337%" y="213" width="2.8288%" height="15" fill="rgb(215,133,35)" fg:x="1694" fg:w="77"/><text x="62.4837%" y="223.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (39 samples, 1.43%)</title><rect x="63.6297%" y="197" width="1.4328%" height="15" fill="rgb(213,28,5)" fg:x="1732" fg:w="39"/><text x="63.8797%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (39 samples, 1.43%)</title><rect x="63.6297%" y="181" width="1.4328%" height="15" fill="rgb(215,77,49)" fg:x="1732" fg:w="39"/><text x="63.8797%" y="191.50"></text></g><g><title>rlox::vm::VM::frame_mut (17 samples, 0.62%)</title><rect x="65.0625%" y="229" width="0.6245%" height="15" fill="rgb(248,100,22)" fg:x="1771" fg:w="17"/><text x="65.3125%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (17 samples, 0.62%)</title><rect x="65.0625%" y="213" width="0.6245%" height="15" fill="rgb(208,67,9)" fg:x="1771" fg:w="17"/><text x="65.3125%" y="223.50"></text></g><g><title>rlox::vm::VM::next_instruction (250 samples, 9.18%)</title><rect x="57.6782%" y="245" width="9.1844%" height="15" fill="rgb(219,133,21)" fg:x="1570" fg:w="250"/><text x="57.9282%" y="255.50">rlox::vm::VM:..</text></g><g><title>rlox::vm::VM::run (32 samples, 1.18%)</title><rect x="65.6870%" y="229" width="1.1756%" height="15" fill="rgb(246,46,29)" fg:x="1788" fg:w="32"/><text x="65.9370%" y="239.50"></text></g><g><title>rlox::vm::VM::peek (12 samples, 0.44%)</title><rect x="66.8626%" y="245" width="0.4409%" height="15" fill="rgb(246,185,52)" fg:x="1820" fg:w="12"/><text x="67.1126%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (12 samples, 0.44%)</title><rect x="66.8626%" y="229" width="0.4409%" height="15" fill="rgb(252,136,11)" fg:x="1820" fg:w="12"/><text x="67.1126%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (12 samples, 0.44%)</title><rect x="66.8626%" y="213" width="0.4409%" height="15" fill="rgb(219,138,53)" fg:x="1820" fg:w="12"/><text x="67.1126%" y="223.50"></text></g><g><title>rlox::vm::VM::peek_mut (14 samples, 0.51%)</title><rect x="67.3035%" y="245" width="0.5143%" height="15" fill="rgb(211,51,23)" fg:x="1832" fg:w="14"/><text x="67.5535%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (14 samples, 0.51%)</title><rect x="67.3035%" y="229" width="0.5143%" height="15" fill="rgb(247,221,28)" fg:x="1832" fg:w="14"/><text x="67.5535%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (14 samples, 0.51%)</title><rect x="67.3035%" y="213" width="0.5143%" height="15" fill="rgb(251,222,45)" fg:x="1832" fg:w="14"/><text x="67.5535%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (35 samples, 1.29%)</title><rect x="67.8178%" y="229" width="1.2858%" height="15" fill="rgb(217,162,53)" fg:x="1846" fg:w="35"/><text x="68.0678%" y="239.50"></text></g><g><title>core::ptr::read (21 samples, 0.77%)</title><rect x="68.3321%" y="213" width="0.7715%" height="15" fill="rgb(229,93,14)" fg:x="1860" fg:w="21"/><text x="68.5821%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.73%)</title><rect x="68.3688%" y="197" width="0.7348%" height="15" fill="rgb(209,67,49)" fg:x="1861" fg:w="20"/><text x="68.6188%" y="207.50"></text></g><g><title>rlox::vm::VM::pop (81 samples, 2.98%)</title><rect x="67.8178%" y="245" width="2.9758%" height="15" fill="rgb(213,87,29)" fg:x="1846" fg:w="81"/><text x="68.0678%" y="255.50">rlo..</text></g><g><title>core::option::Option&lt;T&gt;::expect (46 samples, 1.69%)</title><rect x="69.1036%" y="229" width="1.6899%" height="15" fill="rgb(205,151,52)" fg:x="1881" fg:w="46"/><text x="69.3536%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="71.0507%" y="213" width="0.0367%" height="15" fill="rgb(253,215,39)" fg:x="1934" fg:w="1"/><text x="71.3007%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (1 samples, 0.04%)</title><rect x="71.0874%" y="213" width="0.0367%" height="15" fill="rgb(221,220,41)" fg:x="1935" fg:w="1"/><text x="71.3374%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.15%)</title><rect x="71.1242%" y="213" width="0.1470%" height="15" fill="rgb(218,133,21)" fg:x="1936" fg:w="4"/><text x="71.3742%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (4 samples, 0.15%)</title><rect x="71.1242%" y="197" width="0.1470%" height="15" fill="rgb(221,193,43)" fg:x="1936" fg:w="4"/><text x="71.3742%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.04%)</title><rect x="71.2711%" y="213" width="0.0367%" height="15" fill="rgb(240,128,52)" fg:x="1940" fg:w="1"/><text x="71.5211%" y="223.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="71.2711%" y="197" width="0.0367%" height="15" fill="rgb(253,114,12)" fg:x="1940" fg:w="1"/><text x="71.5211%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="71.2711%" y="181" width="0.0367%" height="15" fill="rgb(215,223,47)" fg:x="1940" fg:w="1"/><text x="71.5211%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (1 samples, 0.04%)</title><rect x="71.2711%" y="165" width="0.0367%" height="15" fill="rgb(248,225,23)" fg:x="1940" fg:w="1"/><text x="71.5211%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (17 samples, 0.62%)</title><rect x="70.7935%" y="229" width="0.6245%" height="15" fill="rgb(250,108,0)" fg:x="1927" fg:w="17"/><text x="71.0435%" y="239.50"></text></g><g><title>core::slice::index::range (3 samples, 0.11%)</title><rect x="71.3079%" y="213" width="0.1102%" height="15" fill="rgb(228,208,7)" fg:x="1941" fg:w="3"/><text x="71.5579%" y="223.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.66%)</title><rect x="71.8589%" y="197" width="0.6613%" height="15" fill="rgb(244,45,10)" fg:x="1956" fg:w="18"/><text x="72.1089%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.66%)</title><rect x="71.8589%" y="181" width="0.6613%" height="15" fill="rgb(207,125,25)" fg:x="1956" fg:w="18"/><text x="72.1089%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.04%)</title><rect x="72.4835%" y="165" width="0.0367%" height="15" fill="rgb(210,195,18)" fg:x="1973" fg:w="1"/><text x="72.7335%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="72.4835%" y="149" width="0.0367%" height="15" fill="rgb(249,80,12)" fg:x="1973" fg:w="1"/><text x="72.7335%" y="159.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="72.5202%" y="181" width="0.0735%" height="15" fill="rgb(221,65,9)" fg:x="1974" fg:w="2"/><text x="72.7702%" y="191.50"></text></g><g><title>core::mem::drop (22 samples, 0.81%)</title><rect x="72.5202%" y="197" width="0.8082%" height="15" fill="rgb(235,49,36)" fg:x="1974" fg:w="22"/><text x="72.7702%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (20 samples, 0.73%)</title><rect x="72.5937%" y="181" width="0.7348%" height="15" fill="rgb(225,32,20)" fg:x="1976" fg:w="20"/><text x="72.8437%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (18 samples, 0.66%)</title><rect x="72.6672%" y="165" width="0.6613%" height="15" fill="rgb(215,141,46)" fg:x="1978" fg:w="18"/><text x="72.9172%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.66%)</title><rect x="72.6672%" y="149" width="0.6613%" height="15" fill="rgb(250,160,47)" fg:x="1978" fg:w="18"/><text x="72.9172%" y="159.50"></text></g><g><title>rlox::vm::VM::popn (82 samples, 3.01%)</title><rect x="70.7935%" y="245" width="3.0125%" height="15" fill="rgb(216,222,40)" fg:x="1927" fg:w="82"/><text x="71.0435%" y="255.50">rlo..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;rlox::value::Value&gt;&gt; (65 samples, 2.39%)</title><rect x="71.4181%" y="229" width="2.3880%" height="15" fill="rgb(234,217,39)" fg:x="1944" fg:w="65"/><text x="71.6681%" y="239.50">co..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 2.39%)</title><rect x="71.4181%" y="213" width="2.3880%" height="15" fill="rgb(207,178,40)" fg:x="1944" fg:w="65"/><text x="71.6681%" y="223.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (13 samples, 0.48%)</title><rect x="73.3284%" y="197" width="0.4776%" height="15" fill="rgb(221,136,13)" fg:x="1996" fg:w="13"/><text x="73.5784%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.44%)</title><rect x="73.3652%" y="181" width="0.4409%" height="15" fill="rgb(249,199,10)" fg:x="1997" fg:w="12"/><text x="73.6152%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.29%)</title><rect x="73.5121%" y="165" width="0.2939%" height="15" fill="rgb(249,222,13)" fg:x="2001" fg:w="8"/><text x="73.7621%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.29%)</title><rect x="73.5121%" y="149" width="0.2939%" height="15" fill="rgb(244,185,38)" fg:x="2001" fg:w="8"/><text x="73.7621%" y="159.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="73.5121%" y="133" width="0.2939%" height="15" fill="rgb(236,202,9)" fg:x="2001" fg:w="8"/><text x="73.7621%" y="143.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="73.5121%" y="117" width="0.2939%" height="15" fill="rgb(250,229,37)" fg:x="2001" fg:w="8"/><text x="73.7621%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="73.5121%" y="101" width="0.2939%" height="15" fill="rgb(206,174,23)" fg:x="2001" fg:w="8"/><text x="73.7621%" y="111.50"></text></g><g><title>rlox::vm::VM::push (215 samples, 7.90%)</title><rect x="73.8060%" y="245" width="7.8986%" height="15" fill="rgb(211,33,43)" fg:x="2009" fg:w="215"/><text x="74.0560%" y="255.50">rlox::vm::V..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (86 samples, 3.16%)</title><rect x="78.5452%" y="229" width="3.1594%" height="15" fill="rgb(245,58,50)" fg:x="2138" fg:w="86"/><text x="78.7952%" y="239.50">all..</text></g><g><title>core::ptr::write (86 samples, 3.16%)</title><rect x="78.5452%" y="213" width="3.1594%" height="15" fill="rgb(244,68,36)" fg:x="2138" fg:w="86"/><text x="78.7952%" y="223.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (15 samples, 0.55%)</title><rect x="82.3659%" y="197" width="0.5511%" height="15" fill="rgb(232,229,15)" fg:x="2242" fg:w="15"/><text x="82.6159%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.44%)</title><rect x="82.4761%" y="181" width="0.4409%" height="15" fill="rgb(254,30,23)" fg:x="2245" fg:w="12"/><text x="82.7261%" y="191.50"></text></g><g><title>rlox::chunk::Chunk::read_const (23 samples, 0.84%)</title><rect x="82.3659%" y="229" width="0.8450%" height="15" fill="rgb(235,160,14)" fg:x="2242" fg:w="23"/><text x="82.6159%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (23 samples, 0.84%)</title><rect x="82.3659%" y="213" width="0.8450%" height="15" fill="rgb(212,155,44)" fg:x="2242" fg:w="23"/><text x="82.6159%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.29%)</title><rect x="82.9170%" y="197" width="0.2939%" height="15" fill="rgb(226,2,50)" fg:x="2257" fg:w="8"/><text x="83.1670%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.29%)</title><rect x="82.9170%" y="181" width="0.2939%" height="15" fill="rgb(234,177,6)" fg:x="2257" fg:w="8"/><text x="83.1670%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.40%)</title><rect x="83.2109%" y="213" width="0.4041%" height="15" fill="rgb(217,24,9)" fg:x="2265" fg:w="11"/><text x="83.4609%" y="223.50"></text></g><g><title>rlox::vm::VM::read_const (57 samples, 2.09%)</title><rect x="81.7046%" y="245" width="2.0940%" height="15" fill="rgb(220,13,46)" fg:x="2224" fg:w="57"/><text x="81.9546%" y="255.50">r..</text></g><g><title>rlox::vm::VM::frame (16 samples, 0.59%)</title><rect x="83.2109%" y="229" width="0.5878%" height="15" fill="rgb(239,221,27)" fg:x="2265" fg:w="16"/><text x="83.4609%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (5 samples, 0.18%)</title><rect x="83.6150%" y="213" width="0.1837%" height="15" fill="rgb(222,198,25)" fg:x="2276" fg:w="5"/><text x="83.8650%" y="223.50"></text></g><g><title>rlox::vm::VM::run (23 samples, 0.84%)</title><rect x="83.7987%" y="245" width="0.8450%" height="15" fill="rgb(211,99,13)" fg:x="2281" fg:w="23"/><text x="84.0487%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.15%)</title><rect x="84.6436%" y="133" width="0.1470%" height="15" fill="rgb(232,111,31)" fg:x="2304" fg:w="4"/><text x="84.8936%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.15%)</title><rect x="84.6436%" y="117" width="0.1470%" height="15" fill="rgb(245,82,37)" fg:x="2304" fg:w="4"/><text x="84.8936%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.37%)</title><rect x="84.6436%" y="181" width="0.3674%" height="15" fill="rgb(227,149,46)" fg:x="2304" fg:w="10"/><text x="84.8936%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.37%)</title><rect x="84.6436%" y="165" width="0.3674%" height="15" fill="rgb(218,36,50)" fg:x="2304" fg:w="10"/><text x="84.8936%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.37%)</title><rect x="84.6436%" y="149" width="0.3674%" height="15" fill="rgb(226,80,48)" fg:x="2304" fg:w="10"/><text x="84.8936%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.22%)</title><rect x="84.7906%" y="133" width="0.2204%" height="15" fill="rgb(238,224,15)" fg:x="2308" fg:w="6"/><text x="85.0406%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.07%)</title><rect x="84.9375%" y="117" width="0.0735%" height="15" fill="rgb(241,136,10)" fg:x="2312" fg:w="2"/><text x="85.1875%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.15%)</title><rect x="85.0110%" y="181" width="0.1470%" height="15" fill="rgb(208,32,45)" fg:x="2314" fg:w="4"/><text x="85.2610%" y="191.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.07%)</title><rect x="85.0845%" y="165" width="0.0735%" height="15" fill="rgb(207,135,9)" fg:x="2316" fg:w="2"/><text x="85.3345%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.07%)</title><rect x="85.0845%" y="149" width="0.0735%" height="15" fill="rgb(206,86,44)" fg:x="2316" fg:w="2"/><text x="85.3345%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.07%)</title><rect x="85.0845%" y="133" width="0.0735%" height="15" fill="rgb(245,177,15)" fg:x="2316" fg:w="2"/><text x="85.3345%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.59%)</title><rect x="84.6436%" y="197" width="0.5878%" height="15" fill="rgb(206,64,50)" fg:x="2304" fg:w="16"/><text x="84.8936%" y="207.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (2 samples, 0.07%)</title><rect x="85.1580%" y="181" width="0.0735%" height="15" fill="rgb(234,36,40)" fg:x="2318" fg:w="2"/><text x="85.4080%" y="191.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (2 samples, 0.07%)</title><rect x="85.1580%" y="165" width="0.0735%" height="15" fill="rgb(213,64,8)" fg:x="2318" fg:w="2"/><text x="85.4080%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.04%)</title><rect x="85.1947%" y="149" width="0.0367%" height="15" fill="rgb(210,75,36)" fg:x="2319" fg:w="1"/><text x="85.4447%" y="159.50"></text></g><g><title>core::hash::Hasher::write_u32 (1 samples, 0.04%)</title><rect x="85.1947%" y="133" width="0.0367%" height="15" fill="rgb(229,88,21)" fg:x="2319" fg:w="1"/><text x="85.4447%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="85.1947%" y="117" width="0.0367%" height="15" fill="rgb(252,204,47)" fg:x="2319" fg:w="1"/><text x="85.4447%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="85.1947%" y="101" width="0.0367%" height="15" fill="rgb(208,77,27)" fg:x="2319" fg:w="1"/><text x="85.4447%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="85.1947%" y="85" width="0.0367%" height="15" fill="rgb(221,76,26)" fg:x="2319" fg:w="1"/><text x="85.4447%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="85.3049%" y="149" width="0.0735%" height="15" fill="rgb(225,139,18)" fg:x="2322" fg:w="2"/><text x="85.5549%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="85.3417%" y="133" width="0.0367%" height="15" fill="rgb(230,137,11)" fg:x="2323" fg:w="1"/><text x="85.5917%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="85.3417%" y="117" width="0.0367%" height="15" fill="rgb(212,28,1)" fg:x="2323" fg:w="1"/><text x="85.5917%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="85.3049%" y="165" width="0.1102%" height="15" fill="rgb(248,164,17)" fg:x="2322" fg:w="3"/><text x="85.5549%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.04%)</title><rect x="85.3784%" y="149" width="0.0367%" height="15" fill="rgb(222,171,42)" fg:x="2324" fg:w="1"/><text x="85.6284%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.04%)</title><rect x="85.3784%" y="133" width="0.0367%" height="15" fill="rgb(243,84,45)" fg:x="2324" fg:w="1"/><text x="85.6284%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="85.3784%" y="117" width="0.0367%" height="15" fill="rgb(252,49,23)" fg:x="2324" fg:w="1"/><text x="85.6284%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="85.3784%" y="101" width="0.0367%" height="15" fill="rgb(215,19,7)" fg:x="2324" fg:w="1"/><text x="85.6284%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.07%)</title><rect x="85.4151%" y="165" width="0.0735%" height="15" fill="rgb(238,81,41)" fg:x="2325" fg:w="2"/><text x="85.6651%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="85.4151%" y="149" width="0.0735%" height="15" fill="rgb(210,199,37)" fg:x="2325" fg:w="2"/><text x="85.6651%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="85.4151%" y="133" width="0.0735%" height="15" fill="rgb(244,192,49)" fg:x="2325" fg:w="2"/><text x="85.6651%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="85.4886%" y="117" width="0.0367%" height="15" fill="rgb(226,211,11)" fg:x="2327" fg:w="1"/><text x="85.7386%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (28 samples, 1.03%)</title><rect x="84.6436%" y="245" width="1.0287%" height="15" fill="rgb(236,162,54)" fg:x="2304" fg:w="28"/><text x="84.8936%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (28 samples, 1.03%)</title><rect x="84.6436%" y="229" width="1.0287%" height="15" fill="rgb(220,229,9)" fg:x="2304" fg:w="28"/><text x="84.8936%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (28 samples, 1.03%)</title><rect x="84.6436%" y="213" width="1.0287%" height="15" fill="rgb(250,87,22)" fg:x="2304" fg:w="28"/><text x="84.8936%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (12 samples, 0.44%)</title><rect x="85.2314%" y="197" width="0.4409%" height="15" fill="rgb(239,43,17)" fg:x="2320" fg:w="12"/><text x="85.4814%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (12 samples, 0.44%)</title><rect x="85.2314%" y="181" width="0.4409%" height="15" fill="rgb(231,177,25)" fg:x="2320" fg:w="12"/><text x="85.4814%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (5 samples, 0.18%)</title><rect x="85.4886%" y="165" width="0.1837%" height="15" fill="rgb(219,179,1)" fg:x="2327" fg:w="5"/><text x="85.7386%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (5 samples, 0.18%)</title><rect x="85.4886%" y="149" width="0.1837%" height="15" fill="rgb(238,219,53)" fg:x="2327" fg:w="5"/><text x="85.7386%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (5 samples, 0.18%)</title><rect x="85.4886%" y="133" width="0.1837%" height="15" fill="rgb(232,167,36)" fg:x="2327" fg:w="5"/><text x="85.7386%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.15%)</title><rect x="85.5253%" y="117" width="0.1470%" height="15" fill="rgb(244,19,51)" fg:x="2328" fg:w="4"/><text x="85.7753%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.15%)</title><rect x="85.5253%" y="101" width="0.1470%" height="15" fill="rgb(224,6,22)" fg:x="2328" fg:w="4"/><text x="85.7753%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.15%)</title><rect x="85.5253%" y="85" width="0.1470%" height="15" fill="rgb(224,145,5)" fg:x="2328" fg:w="4"/><text x="85.7753%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (21 samples, 0.77%)</title><rect x="87.5827%" y="117" width="0.7715%" height="15" fill="rgb(234,130,49)" fg:x="2384" fg:w="21"/><text x="87.8327%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (40 samples, 1.47%)</title><rect x="87.1051%" y="133" width="1.4695%" height="15" fill="rgb(254,6,2)" fg:x="2371" fg:w="40"/><text x="87.3551%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.22%)</title><rect x="88.3542%" y="117" width="0.2204%" height="15" fill="rgb(208,96,46)" fg:x="2405" fg:w="6"/><text x="88.6042%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (50 samples, 1.84%)</title><rect x="89.1991%" y="117" width="1.8369%" height="15" fill="rgb(239,3,39)" fg:x="2428" fg:w="50"/><text x="89.4491%" y="127.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (161 samples, 5.91%)</title><rect x="86.0397%" y="181" width="5.9148%" height="15" fill="rgb(233,210,1)" fg:x="2342" fg:w="161"/><text x="86.2897%" y="191.50">&lt;std::co..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (161 samples, 5.91%)</title><rect x="86.0397%" y="165" width="5.9148%" height="15" fill="rgb(244,137,37)" fg:x="2342" fg:w="161"/><text x="86.2897%" y="175.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (161 samples, 5.91%)</title><rect x="86.0397%" y="149" width="5.9148%" height="15" fill="rgb(240,136,2)" fg:x="2342" fg:w="161"/><text x="86.2897%" y="159.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (92 samples, 3.38%)</title><rect x="88.5746%" y="133" width="3.3799%" height="15" fill="rgb(239,18,37)" fg:x="2411" fg:w="92"/><text x="88.8246%" y="143.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.92%)</title><rect x="91.0360%" y="117" width="0.9184%" height="15" fill="rgb(218,185,22)" fg:x="2478" fg:w="25"/><text x="91.2860%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (40 samples, 1.47%)</title><rect x="91.9544%" y="181" width="1.4695%" height="15" fill="rgb(225,218,4)" fg:x="2503" fg:w="40"/><text x="92.2044%" y="191.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (21 samples, 0.77%)</title><rect x="92.6525%" y="165" width="0.7715%" height="15" fill="rgb(230,182,32)" fg:x="2522" fg:w="21"/><text x="92.9025%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (18 samples, 0.66%)</title><rect x="92.7627%" y="149" width="0.6613%" height="15" fill="rgb(242,56,43)" fg:x="2525" fg:w="18"/><text x="93.0127%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (18 samples, 0.66%)</title><rect x="92.7627%" y="133" width="0.6613%" height="15" fill="rgb(233,99,24)" fg:x="2525" fg:w="18"/><text x="93.0127%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (261 samples, 9.59%)</title><rect x="85.9295%" y="197" width="9.5885%" height="15" fill="rgb(234,209,42)" fg:x="2339" fg:w="261"/><text x="86.1795%" y="207.50">hashbrown::map..</text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (57 samples, 2.09%)</title><rect x="93.4240%" y="181" width="2.0940%" height="15" fill="rgb(227,7,12)" fg:x="2543" fg:w="57"/><text x="93.6740%" y="191.50">&lt;..</text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (57 samples, 2.09%)</title><rect x="93.4240%" y="165" width="2.0940%" height="15" fill="rgb(245,203,43)" fg:x="2543" fg:w="57"/><text x="93.6740%" y="175.50">&lt;..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (54 samples, 1.98%)</title><rect x="93.5342%" y="149" width="1.9838%" height="15" fill="rgb(238,205,33)" fg:x="2546" fg:w="54"/><text x="93.7842%" y="159.50">c..</text></g><g><title>core::hash::Hasher::write_u32 (54 samples, 1.98%)</title><rect x="93.5342%" y="133" width="1.9838%" height="15" fill="rgb(231,56,7)" fg:x="2546" fg:w="54"/><text x="93.7842%" y="143.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (52 samples, 1.91%)</title><rect x="93.6076%" y="117" width="1.9104%" height="15" fill="rgb(244,186,29)" fg:x="2548" fg:w="52"/><text x="93.8576%" y="127.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (52 samples, 1.91%)</title><rect x="93.6076%" y="101" width="1.9104%" height="15" fill="rgb(234,111,31)" fg:x="2548" fg:w="52"/><text x="93.8576%" y="111.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (52 samples, 1.91%)</title><rect x="93.6076%" y="85" width="1.9104%" height="15" fill="rgb(241,149,10)" fg:x="2548" fg:w="52"/><text x="93.8576%" y="95.50">&lt;..</text></g><g><title>core::hash::sip::u8to64_le (31 samples, 1.14%)</title><rect x="94.3791%" y="69" width="1.1389%" height="15" fill="rgb(249,206,44)" fg:x="2569" fg:w="31"/><text x="94.6291%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.44%)</title><rect x="96.1058%" y="149" width="0.4409%" height="15" fill="rgb(251,153,30)" fg:x="2616" fg:w="12"/><text x="96.3558%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.29%)</title><rect x="96.2528%" y="133" width="0.2939%" height="15" fill="rgb(239,152,38)" fg:x="2620" fg:w="8"/><text x="96.5028%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.29%)</title><rect x="96.2528%" y="117" width="0.2939%" height="15" fill="rgb(249,139,47)" fg:x="2620" fg:w="8"/><text x="96.5028%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.92%)</title><rect x="96.1058%" y="165" width="0.9184%" height="15" fill="rgb(244,64,35)" fg:x="2616" fg:w="25"/><text x="96.3558%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (13 samples, 0.48%)</title><rect x="96.5467%" y="149" width="0.4776%" height="15" fill="rgb(216,46,15)" fg:x="2628" fg:w="13"/><text x="96.7967%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13 samples, 0.48%)</title><rect x="96.5467%" y="133" width="0.4776%" height="15" fill="rgb(250,74,19)" fg:x="2628" fg:w="13"/><text x="96.7967%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.48%)</title><rect x="96.5467%" y="117" width="0.4776%" height="15" fill="rgb(249,42,33)" fg:x="2628" fg:w="13"/><text x="96.7967%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (13 samples, 0.48%)</title><rect x="96.5467%" y="101" width="0.4776%" height="15" fill="rgb(242,149,17)" fg:x="2628" fg:w="13"/><text x="96.7967%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (11 samples, 0.40%)</title><rect x="97.0242%" y="165" width="0.4041%" height="15" fill="rgb(244,29,21)" fg:x="2641" fg:w="11"/><text x="97.2742%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (11 samples, 0.40%)</title><rect x="97.0242%" y="149" width="0.4041%" height="15" fill="rgb(220,130,37)" fg:x="2641" fg:w="11"/><text x="97.2742%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (11 samples, 0.40%)</title><rect x="97.0242%" y="133" width="0.4041%" height="15" fill="rgb(211,67,2)" fg:x="2641" fg:w="11"/><text x="97.2742%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.07%)</title><rect x="97.6488%" y="117" width="0.0735%" height="15" fill="rgb(235,68,52)" fg:x="2658" fg:w="2"/><text x="97.8988%" y="127.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="97.7223%" y="117" width="0.0367%" height="15" fill="rgb(246,142,3)" fg:x="2660" fg:w="1"/><text x="97.9723%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.07%)</title><rect x="97.7590%" y="117" width="0.0735%" height="15" fill="rgb(241,25,7)" fg:x="2661" fg:w="2"/><text x="98.0090%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.07%)</title><rect x="97.7590%" y="101" width="0.0735%" height="15" fill="rgb(242,119,39)" fg:x="2661" fg:w="2"/><text x="98.0090%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="97.7590%" y="85" width="0.0735%" height="15" fill="rgb(241,98,45)" fg:x="2661" fg:w="2"/><text x="98.0090%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (66 samples, 2.42%)</title><rect x="95.5180%" y="181" width="2.4247%" height="15" fill="rgb(254,28,30)" fg:x="2600" fg:w="66"/><text x="95.7680%" y="191.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (14 samples, 0.51%)</title><rect x="97.4284%" y="165" width="0.5143%" height="15" fill="rgb(241,142,54)" fg:x="2652" fg:w="14"/><text x="97.6784%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (14 samples, 0.51%)</title><rect x="97.4284%" y="149" width="0.5143%" height="15" fill="rgb(222,85,15)" fg:x="2652" fg:w="14"/><text x="97.6784%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (14 samples, 0.51%)</title><rect x="97.4284%" y="133" width="0.5143%" height="15" fill="rgb(210,85,47)" fg:x="2652" fg:w="14"/><text x="97.6784%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.11%)</title><rect x="97.8325%" y="117" width="0.1102%" height="15" fill="rgb(224,206,25)" fg:x="2663" fg:w="3"/><text x="98.0825%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (3 samples, 0.11%)</title><rect x="97.8325%" y="101" width="0.1102%" height="15" fill="rgb(243,201,19)" fg:x="2663" fg:w="3"/><text x="98.0825%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (3 samples, 0.11%)</title><rect x="97.8325%" y="85" width="0.1102%" height="15" fill="rgb(236,59,4)" fg:x="2663" fg:w="3"/><text x="98.0825%" y="95.50"></text></g><g><title>core::core_arch::simd::i8x16::new (3 samples, 0.11%)</title><rect x="97.8325%" y="69" width="0.1102%" height="15" fill="rgb(254,179,45)" fg:x="2663" fg:w="3"/><text x="98.0825%" y="79.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (335 samples, 12.31%)</title><rect x="85.6723%" y="245" width="12.3071%" height="15" fill="rgb(226,14,10)" fg:x="2332" fg:w="335"/><text x="85.9223%" y="255.50">std::collections::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (335 samples, 12.31%)</title><rect x="85.6723%" y="229" width="12.3071%" height="15" fill="rgb(244,27,41)" fg:x="2332" fg:w="335"/><text x="85.9223%" y="239.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (333 samples, 12.23%)</title><rect x="85.7458%" y="213" width="12.2337%" height="15" fill="rgb(235,35,32)" fg:x="2334" fg:w="333"/><text x="85.9958%" y="223.50">hashbrown::map::Ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (67 samples, 2.46%)</title><rect x="95.5180%" y="197" width="2.4614%" height="15" fill="rgb(218,68,31)" fg:x="2600" fg:w="67"/><text x="95.7680%" y="207.50">ha..</text></g><g><title>rlox::vm::VM::run (1 samples, 0.04%)</title><rect x="97.9427%" y="181" width="0.0367%" height="15" fill="rgb(207,120,37)" fg:x="2666" fg:w="1"/><text x="98.1927%" y="191.50"></text></g><g><title>core::mem::replace (2 samples, 0.07%)</title><rect x="98.1999%" y="213" width="0.0735%" height="15" fill="rgb(227,98,0)" fg:x="2673" fg:w="2"/><text x="98.4499%" y="223.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="98.2366%" y="197" width="0.0367%" height="15" fill="rgb(207,7,3)" fg:x="2674" fg:w="1"/><text x="98.4866%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.29%)</title><rect x="98.3835%" y="149" width="0.2939%" height="15" fill="rgb(206,98,19)" fg:x="2678" fg:w="8"/><text x="98.6335%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.26%)</title><rect x="98.4203%" y="133" width="0.2572%" height="15" fill="rgb(217,5,26)" fg:x="2679" fg:w="7"/><text x="98.6703%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 0.62%)</title><rect x="98.2733%" y="197" width="0.6245%" height="15" fill="rgb(235,190,38)" fg:x="2675" fg:w="17"/><text x="98.5233%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 0.62%)</title><rect x="98.2733%" y="181" width="0.6245%" height="15" fill="rgb(247,86,24)" fg:x="2675" fg:w="17"/><text x="98.5233%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 0.62%)</title><rect x="98.2733%" y="165" width="0.6245%" height="15" fill="rgb(205,101,16)" fg:x="2675" fg:w="17"/><text x="98.5233%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (6 samples, 0.22%)</title><rect x="98.6774%" y="149" width="0.2204%" height="15" fill="rgb(246,168,33)" fg:x="2686" fg:w="6"/><text x="98.9274%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.11%)</title><rect x="98.7877%" y="133" width="0.1102%" height="15" fill="rgb(231,114,1)" fg:x="2689" fg:w="3"/><text x="99.0377%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.15%)</title><rect x="98.8979%" y="197" width="0.1470%" height="15" fill="rgb(207,184,53)" fg:x="2692" fg:w="4"/><text x="99.1479%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.11%)</title><rect x="98.9346%" y="181" width="0.1102%" height="15" fill="rgb(224,95,51)" fg:x="2693" fg:w="3"/><text x="99.1846%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.11%)</title><rect x="98.9346%" y="165" width="0.1102%" height="15" fill="rgb(212,188,45)" fg:x="2693" fg:w="3"/><text x="99.1846%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.11%)</title><rect x="98.9346%" y="149" width="0.1102%" height="15" fill="rgb(223,154,38)" fg:x="2693" fg:w="3"/><text x="99.1846%" y="159.50"></text></g><g><title>hashbrown::map::make_insert_hash (28 samples, 1.03%)</title><rect x="98.2733%" y="213" width="1.0287%" height="15" fill="rgb(251,22,52)" fg:x="2675" fg:w="28"/><text x="98.5233%" y="223.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (7 samples, 0.26%)</title><rect x="99.0448%" y="197" width="0.2572%" height="15" fill="rgb(229,209,22)" fg:x="2696" fg:w="7"/><text x="99.2948%" y="207.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (7 samples, 0.26%)</title><rect x="99.0448%" y="181" width="0.2572%" height="15" fill="rgb(234,138,34)" fg:x="2696" fg:w="7"/><text x="99.2948%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (6 samples, 0.22%)</title><rect x="99.0816%" y="165" width="0.2204%" height="15" fill="rgb(212,95,11)" fg:x="2697" fg:w="6"/><text x="99.3316%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u32 (6 samples, 0.22%)</title><rect x="99.0816%" y="149" width="0.2204%" height="15" fill="rgb(240,179,47)" fg:x="2697" fg:w="6"/><text x="99.3316%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.22%)</title><rect x="99.0816%" y="133" width="0.2204%" height="15" fill="rgb(240,163,11)" fg:x="2697" fg:w="6"/><text x="99.3316%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.22%)</title><rect x="99.0816%" y="117" width="0.2204%" height="15" fill="rgb(236,37,12)" fg:x="2697" fg:w="6"/><text x="99.3316%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.22%)</title><rect x="99.0816%" y="101" width="0.2204%" height="15" fill="rgb(232,164,16)" fg:x="2697" fg:w="6"/><text x="99.3316%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.04%)</title><rect x="99.2652%" y="85" width="0.0367%" height="15" fill="rgb(244,205,15)" fg:x="2702" fg:w="1"/><text x="99.5152%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.18%)</title><rect x="99.4122%" y="181" width="0.1837%" height="15" fill="rgb(223,117,47)" fg:x="2706" fg:w="5"/><text x="99.6622%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.18%)</title><rect x="99.4122%" y="165" width="0.1837%" height="15" fill="rgb(244,107,35)" fg:x="2706" fg:w="5"/><text x="99.6622%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.11%)</title><rect x="99.4857%" y="149" width="0.1102%" height="15" fill="rgb(205,140,8)" fg:x="2708" fg:w="3"/><text x="99.7357%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.11%)</title><rect x="99.4857%" y="133" width="0.1102%" height="15" fill="rgb(228,84,46)" fg:x="2708" fg:w="3"/><text x="99.7357%" y="143.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.07%)</title><rect x="99.5959%" y="181" width="0.0735%" height="15" fill="rgb(254,188,9)" fg:x="2711" fg:w="2"/><text x="99.8459%" y="191.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="99.5959%" y="165" width="0.0735%" height="15" fill="rgb(206,112,54)" fg:x="2711" fg:w="2"/><text x="99.8459%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (2 samples, 0.07%)</title><rect x="99.5959%" y="149" width="0.0735%" height="15" fill="rgb(216,84,49)" fg:x="2711" fg:w="2"/><text x="99.8459%" y="159.50"></text></g><g><title>__libc_start_main (2,337 samples, 85.86%)</title><rect x="13.8501%" y="485" width="85.8560%" height="15" fill="rgb(214,194,35)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="495.50">__libc_start_main</text></g><g><title>main (2,337 samples, 85.86%)</title><rect x="13.8501%" y="469" width="85.8560%" height="15" fill="rgb(249,28,3)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (2,337 samples, 85.86%)</title><rect x="13.8501%" y="453" width="85.8560%" height="15" fill="rgb(222,56,52)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,337 samples, 85.86%)</title><rect x="13.8501%" y="437" width="85.8560%" height="15" fill="rgb(245,217,50)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,337 samples, 85.86%)</title><rect x="13.8501%" y="421" width="85.8560%" height="15" fill="rgb(213,201,24)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,337 samples, 85.86%)</title><rect x="13.8501%" y="405" width="85.8560%" height="15" fill="rgb(248,116,28)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,337 samples, 85.86%)</title><rect x="13.8501%" y="389" width="85.8560%" height="15" fill="rgb(219,72,43)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,337 samples, 85.86%)</title><rect x="13.8501%" y="373" width="85.8560%" height="15" fill="rgb(209,138,14)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,337 samples, 85.86%)</title><rect x="13.8501%" y="357" width="85.8560%" height="15" fill="rgb(222,18,33)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,337 samples, 85.86%)</title><rect x="13.8501%" y="341" width="85.8560%" height="15" fill="rgb(213,199,7)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>rlox::main (2,337 samples, 85.86%)</title><rect x="13.8501%" y="325" width="85.8560%" height="15" fill="rgb(250,110,10)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="335.50">rlox::main</text></g><g><title>rlox::run_file (2,337 samples, 85.86%)</title><rect x="13.8501%" y="309" width="85.8560%" height="15" fill="rgb(248,123,6)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="319.50">rlox::run_file</text></g><g><title>rlox::vm::VM::interpret (2,337 samples, 85.86%)</title><rect x="13.8501%" y="293" width="85.8560%" height="15" fill="rgb(206,91,31)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="303.50">rlox::vm::VM::interpret</text></g><g><title>rlox::vm::VM::interpret::{{closure}} (2,337 samples, 85.86%)</title><rect x="13.8501%" y="277" width="85.8560%" height="15" fill="rgb(211,154,13)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="287.50">rlox::vm::VM::interpret::{{closure}}</text></g><g><title>rlox::vm::VM::run (2,337 samples, 85.86%)</title><rect x="13.8501%" y="261" width="85.8560%" height="15" fill="rgb(225,148,7)" fg:x="377" fg:w="2337"/><text x="14.1001%" y="271.50">rlox::vm::VM::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (47 samples, 1.73%)</title><rect x="97.9794%" y="245" width="1.7267%" height="15" fill="rgb(220,160,43)" fg:x="2667" fg:w="47"/><text x="98.2294%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 1.54%)</title><rect x="98.1631%" y="229" width="1.5430%" height="15" fill="rgb(213,52,39)" fg:x="2672" fg:w="42"/><text x="98.4131%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (11 samples, 0.40%)</title><rect x="99.3020%" y="213" width="0.4041%" height="15" fill="rgb(243,137,7)" fg:x="2703" fg:w="11"/><text x="99.5520%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (11 samples, 0.40%)</title><rect x="99.3020%" y="197" width="0.4041%" height="15" fill="rgb(230,79,13)" fg:x="2703" fg:w="11"/><text x="99.5520%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (1 samples, 0.04%)</title><rect x="99.6694%" y="181" width="0.0367%" height="15" fill="rgb(247,105,23)" fg:x="2713" fg:w="1"/><text x="99.9194%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (1 samples, 0.04%)</title><rect x="99.6694%" y="165" width="0.0367%" height="15" fill="rgb(223,179,41)" fg:x="2713" fg:w="1"/><text x="99.9194%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (1 samples, 0.04%)</title><rect x="99.6694%" y="149" width="0.0367%" height="15" fill="rgb(218,9,34)" fg:x="2713" fg:w="1"/><text x="99.9194%" y="159.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.04%)</title><rect x="99.6694%" y="133" width="0.0367%" height="15" fill="rgb(222,106,8)" fg:x="2713" fg:w="1"/><text x="99.9194%" y="143.50"></text></g><g><title>_start (2,344 samples, 86.11%)</title><rect x="13.6664%" y="501" width="86.1132%" height="15" fill="rgb(211,220,0)" fg:x="372" fg:w="2344"/><text x="13.9164%" y="511.50">_start</text></g><g><title>_dl_start (2 samples, 0.07%)</title><rect x="99.7061%" y="485" width="0.0735%" height="15" fill="rgb(229,52,16)" fg:x="2714" fg:w="2"/><text x="99.9561%" y="495.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.04%)</title><rect x="99.7428%" y="469" width="0.0367%" height="15" fill="rgb(212,155,18)" fg:x="2715" fg:w="1"/><text x="99.9928%" y="479.50"></text></g><g><title>dl_main (1 samples, 0.04%)</title><rect x="99.7428%" y="453" width="0.0367%" height="15" fill="rgb(242,21,14)" fg:x="2715" fg:w="1"/><text x="99.9928%" y="463.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.04%)</title><rect x="99.7428%" y="437" width="0.0367%" height="15" fill="rgb(222,19,48)" fg:x="2715" fg:w="1"/><text x="99.9928%" y="447.50"></text></g><g><title>all (2,722 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(232,45,27)" fg:x="0" fg:w="2722"/><text x="0.2500%" y="543.50"></text></g><g><title>rlox (2,722 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(249,103,42)" fg:x="0" fg:w="2722"/><text x="0.2500%" y="527.50">rlox</text></g><g><title>rlox::vm::VM::push (6 samples, 0.22%)</title><rect x="99.7796%" y="501" width="0.2204%" height="15" fill="rgb(246,81,33)" fg:x="2716" fg:w="6"/><text x="100.0296%" y="511.50"></text></g></svg></svg>
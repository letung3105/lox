<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="2111"><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.24%)</title><rect x="0.0000%" y="485" width="0.2369%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="495.50"></text></g><g><title>rlox::vm::VM::call_closure (6 samples, 0.28%)</title><rect x="0.2369%" y="485" width="0.2842%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="6"/><text x="0.4869%" y="495.50"></text></g><g><title>[[heap]] (24 samples, 1.14%)</title><rect x="0.0000%" y="501" width="1.1369%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="24"/><text x="0.2500%" y="511.50"></text></g><g><title>rlox::vm::VM::push (13 samples, 0.62%)</title><rect x="0.5211%" y="485" width="0.6158%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="13"/><text x="0.7711%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (21 samples, 0.99%)</title><rect x="1.1369%" y="485" width="0.9948%" height="15" fill="rgb(208,68,35)" fg:x="24" fg:w="21"/><text x="1.3869%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 1.37%)</title><rect x="2.1317%" y="485" width="1.3738%" height="15" fill="rgb(232,128,0)" fg:x="45" fg:w="29"/><text x="2.3817%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.28%)</title><rect x="3.5054%" y="485" width="0.2842%" height="15" fill="rgb(207,160,47)" fg:x="74" fg:w="6"/><text x="3.7554%" y="495.50"></text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (20 samples, 0.95%)</title><rect x="3.7897%" y="485" width="0.9474%" height="15" fill="rgb(228,23,34)" fg:x="80" fg:w="20"/><text x="4.0397%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (11 samples, 0.52%)</title><rect x="4.7371%" y="485" width="0.5211%" height="15" fill="rgb(218,30,26)" fg:x="100" fg:w="11"/><text x="4.9871%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (27 samples, 1.28%)</title><rect x="5.2582%" y="485" width="1.2790%" height="15" fill="rgb(220,122,19)" fg:x="111" fg:w="27"/><text x="5.5082%" y="495.50"></text></g><g><title>rlox::vm::VM::close_upvalues (14 samples, 0.66%)</title><rect x="6.5372%" y="485" width="0.6632%" height="15" fill="rgb(250,228,42)" fg:x="138" fg:w="14"/><text x="6.7872%" y="495.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (17 samples, 0.81%)</title><rect x="7.2004%" y="485" width="0.8053%" height="15" fill="rgb(240,193,28)" fg:x="152" fg:w="17"/><text x="7.4504%" y="495.50"></text></g><g><title>rlox::vm::VM::push (21 samples, 0.99%)</title><rect x="8.0057%" y="485" width="0.9948%" height="15" fill="rgb(216,20,37)" fg:x="169" fg:w="21"/><text x="8.2557%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (10 samples, 0.47%)</title><rect x="10.7532%" y="469" width="0.4737%" height="15" fill="rgb(206,188,39)" fg:x="227" fg:w="10"/><text x="11.0032%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (12 samples, 0.57%)</title><rect x="11.2269%" y="469" width="0.5685%" height="15" fill="rgb(217,207,13)" fg:x="237" fg:w="12"/><text x="11.4769%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (12 samples, 0.57%)</title><rect x="11.2269%" y="453" width="0.5685%" height="15" fill="rgb(231,73,38)" fg:x="237" fg:w="12"/><text x="11.4769%" y="463.50"></text></g><g><title>rlox::vm::VM::invoke (4 samples, 0.19%)</title><rect x="11.7954%" y="469" width="0.1895%" height="15" fill="rgb(225,20,46)" fg:x="249" fg:w="4"/><text x="12.0454%" y="479.50"></text></g><g><title>[[stack]] (233 samples, 11.04%)</title><rect x="1.1369%" y="501" width="11.0374%" height="15" fill="rgb(210,31,41)" fg:x="24" fg:w="233"/><text x="1.3869%" y="511.50">[[stack]]</text></g><g><title>rlox::vm::VM::run (67 samples, 3.17%)</title><rect x="9.0005%" y="485" width="3.1739%" height="15" fill="rgb(221,200,47)" fg:x="190" fg:w="67"/><text x="9.2505%" y="495.50">rlo..</text></g><g><title>rlox::vm::VM::popn (4 samples, 0.19%)</title><rect x="11.9848%" y="469" width="0.1895%" height="15" fill="rgb(226,26,5)" fg:x="253" fg:w="4"/><text x="12.2348%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;rlox::value::Value&gt;&gt; (4 samples, 0.19%)</title><rect x="11.9848%" y="453" width="0.1895%" height="15" fill="rgb(249,33,26)" fg:x="253" fg:w="4"/><text x="12.2348%" y="463.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (1 samples, 0.05%)</title><rect x="12.1743%" y="485" width="0.0474%" height="15" fill="rgb(235,183,28)" fg:x="257" fg:w="1"/><text x="12.4243%" y="495.50"></text></g><g><title>[anon] (2 samples, 0.09%)</title><rect x="12.1743%" y="501" width="0.0947%" height="15" fill="rgb(221,5,38)" fg:x="257" fg:w="2"/><text x="12.4243%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (1 samples, 0.05%)</title><rect x="12.2217%" y="485" width="0.0474%" height="15" fill="rgb(247,18,42)" fg:x="258" fg:w="1"/><text x="12.4717%" y="495.50"></text></g><g><title>[rlox] (3 samples, 0.14%)</title><rect x="12.2691%" y="501" width="0.1421%" height="15" fill="rgb(241,131,45)" fg:x="259" fg:w="3"/><text x="12.5191%" y="511.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (3 samples, 0.14%)</title><rect x="12.2691%" y="485" width="0.1421%" height="15" fill="rgb(249,31,29)" fg:x="259" fg:w="3"/><text x="12.5191%" y="495.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.52%)</title><rect x="12.4112%" y="485" width="0.5211%" height="15" fill="rgb(225,111,53)" fg:x="262" fg:w="11"/><text x="12.6612%" y="495.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.52%)</title><rect x="12.9323%" y="485" width="0.5211%" height="15" fill="rgb(238,160,17)" fg:x="273" fg:w="11"/><text x="13.1823%" y="495.50"></text></g><g><title>core::mem::drop (3 samples, 0.14%)</title><rect x="13.3112%" y="469" width="0.1421%" height="15" fill="rgb(214,148,48)" fg:x="281" fg:w="3"/><text x="13.5612%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (3 samples, 0.14%)</title><rect x="13.3112%" y="453" width="0.1421%" height="15" fill="rgb(232,36,49)" fg:x="281" fg:w="3"/><text x="13.5612%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (3 samples, 0.14%)</title><rect x="13.3112%" y="437" width="0.1421%" height="15" fill="rgb(209,103,24)" fg:x="281" fg:w="3"/><text x="13.5612%" y="447.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (10 samples, 0.47%)</title><rect x="13.4533%" y="485" width="0.4737%" height="15" fill="rgb(229,88,8)" fg:x="284" fg:w="10"/><text x="13.7033%" y="495.50"></text></g><g><title>[unknown] (45 samples, 2.13%)</title><rect x="12.4112%" y="501" width="2.1317%" height="15" fill="rgb(213,181,19)" fg:x="262" fg:w="45"/><text x="12.6612%" y="511.50">[..</text></g><g><title>rlox::vm::VM::push (13 samples, 0.62%)</title><rect x="13.9270%" y="485" width="0.6158%" height="15" fill="rgb(254,191,54)" fg:x="294" fg:w="13"/><text x="14.1770%" y="495.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::arith::Add&gt;::add (22 samples, 1.04%)</title><rect x="24.8224%" y="245" width="1.0422%" height="15" fill="rgb(241,83,37)" fg:x="524" fg:w="22"/><text x="25.0724%" y="255.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&lt;&amp;f64&gt;&gt;::add (10 samples, 0.47%)</title><rect x="25.3908%" y="229" width="0.4737%" height="15" fill="rgb(233,36,39)" fg:x="536" fg:w="10"/><text x="25.6408%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (10 samples, 0.47%)</title><rect x="25.3908%" y="213" width="0.4737%" height="15" fill="rgb(226,3,54)" fg:x="536" fg:w="10"/><text x="25.6408%" y="223.50"></text></g><g><title>&lt;&amp;rlox::value::Value as core::ops::bit::Not&gt;::not (2 samples, 0.09%)</title><rect x="25.8645%" y="245" width="0.0947%" height="15" fill="rgb(245,192,40)" fg:x="546" fg:w="2"/><text x="26.1145%" y="255.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.43%)</title><rect x="25.9593%" y="245" width="0.4263%" height="15" fill="rgb(238,167,29)" fg:x="548" fg:w="9"/><text x="26.2093%" y="255.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (9 samples, 0.43%)</title><rect x="25.9593%" y="229" width="0.4263%" height="15" fill="rgb(232,182,51)" fg:x="548" fg:w="9"/><text x="26.2093%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (8 samples, 0.38%)</title><rect x="26.0066%" y="213" width="0.3790%" height="15" fill="rgb(231,60,39)" fg:x="549" fg:w="8"/><text x="26.2566%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (8 samples, 0.38%)</title><rect x="26.0066%" y="197" width="0.3790%" height="15" fill="rgb(208,69,12)" fg:x="549" fg:w="8"/><text x="26.2566%" y="207.50"></text></g><g><title>core::mem::replace (8 samples, 0.38%)</title><rect x="26.0066%" y="181" width="0.3790%" height="15" fill="rgb(235,93,37)" fg:x="549" fg:w="8"/><text x="26.2566%" y="191.50"></text></g><g><title>core::ptr::write (8 samples, 0.38%)</title><rect x="26.0066%" y="165" width="0.3790%" height="15" fill="rgb(213,116,39)" fg:x="549" fg:w="8"/><text x="26.2566%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.43%)</title><rect x="26.3856%" y="245" width="0.4263%" height="15" fill="rgb(222,207,29)" fg:x="557" fg:w="9"/><text x="26.6356%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.43%)</title><rect x="26.3856%" y="229" width="0.4263%" height="15" fill="rgb(206,96,30)" fg:x="557" fg:w="9"/><text x="26.6356%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.43%)</title><rect x="26.3856%" y="213" width="0.4263%" height="15" fill="rgb(218,138,4)" fg:x="557" fg:w="9"/><text x="26.6356%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (43 samples, 2.04%)</title><rect x="26.8119%" y="245" width="2.0369%" height="15" fill="rgb(250,191,14)" fg:x="566" fg:w="43"/><text x="27.0619%" y="255.50">&lt;..</text></g><g><title>&lt;rlox::value::Value as core::clone::Clone&gt;::clone (84 samples, 3.98%)</title><rect x="28.8489%" y="245" width="3.9792%" height="15" fill="rgb(239,60,40)" fg:x="609" fg:w="84"/><text x="29.0989%" y="255.50">&lt;rlo..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.19%)</title><rect x="32.6386%" y="229" width="0.1895%" height="15" fill="rgb(206,27,48)" fg:x="689" fg:w="4"/><text x="32.8886%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (4 samples, 0.19%)</title><rect x="32.6386%" y="213" width="0.1895%" height="15" fill="rgb(225,35,8)" fg:x="689" fg:w="4"/><text x="32.8886%" y="223.50"></text></g><g><title>&lt;rlox::vm::OpCode as core::clone::Clone&gt;::clone (132 samples, 6.25%)</title><rect x="32.8280%" y="245" width="6.2530%" height="15" fill="rgb(250,213,24)" fg:x="693" fg:w="132"/><text x="33.0780%" y="255.50">&lt;rlox::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (5 samples, 0.24%)</title><rect x="39.2705%" y="229" width="0.2369%" height="15" fill="rgb(247,123,22)" fg:x="829" fg:w="5"/><text x="39.5205%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (10 samples, 0.47%)</title><rect x="39.0810%" y="245" width="0.4737%" height="15" fill="rgb(231,138,38)" fg:x="825" fg:w="10"/><text x="39.3310%" y="255.50"></text></g><g><title>core::ptr::read (1 samples, 0.05%)</title><rect x="39.5073%" y="229" width="0.0474%" height="15" fill="rgb(231,145,46)" fg:x="834" fg:w="1"/><text x="39.7573%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (5 samples, 0.24%)</title><rect x="39.5547%" y="245" width="0.2369%" height="15" fill="rgb(251,118,11)" fg:x="835" fg:w="5"/><text x="39.8047%" y="255.50"></text></g><g><title>core::mem::drop (2 samples, 0.09%)</title><rect x="39.6968%" y="229" width="0.0947%" height="15" fill="rgb(217,147,25)" fg:x="838" fg:w="2"/><text x="39.9468%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjUpvalue&gt;&gt;,alloc::alloc::Global&gt;&gt; (2 samples, 0.09%)</title><rect x="39.6968%" y="213" width="0.0947%" height="15" fill="rgb(247,81,37)" fg:x="838" fg:w="2"/><text x="39.9468%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt;::retain::BackshiftOnDrop&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.09%)</title><rect x="39.6968%" y="197" width="0.0947%" height="15" fill="rgb(209,12,38)" fg:x="838" fg:w="2"/><text x="39.9468%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (3 samples, 0.14%)</title><rect x="39.7916%" y="245" width="0.1421%" height="15" fill="rgb(227,1,9)" fg:x="840" fg:w="3"/><text x="40.0416%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (21 samples, 0.99%)</title><rect x="39.9337%" y="245" width="0.9948%" height="15" fill="rgb(248,47,43)" fg:x="843" fg:w="21"/><text x="40.1837%" y="255.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.66%)</title><rect x="40.2653%" y="229" width="0.6632%" height="15" fill="rgb(221,10,30)" fg:x="850" fg:w="14"/><text x="40.5153%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (6 samples, 0.28%)</title><rect x="40.6442%" y="213" width="0.2842%" height="15" fill="rgb(210,229,1)" fg:x="858" fg:w="6"/><text x="40.8942%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (6 samples, 0.28%)</title><rect x="40.6442%" y="197" width="0.2842%" height="15" fill="rgb(222,148,37)" fg:x="858" fg:w="6"/><text x="40.8942%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (6 samples, 0.28%)</title><rect x="40.6442%" y="181" width="0.2842%" height="15" fill="rgb(234,67,33)" fg:x="858" fg:w="6"/><text x="40.8942%" y="191.50"></text></g><g><title>core::mem::replace (6 samples, 0.28%)</title><rect x="40.6442%" y="165" width="0.2842%" height="15" fill="rgb(247,98,35)" fg:x="858" fg:w="6"/><text x="40.8942%" y="175.50"></text></g><g><title>core::ptr::write (6 samples, 0.28%)</title><rect x="40.6442%" y="149" width="0.2842%" height="15" fill="rgb(247,138,52)" fg:x="858" fg:w="6"/><text x="40.8942%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (6 samples, 0.28%)</title><rect x="40.9285%" y="245" width="0.2842%" height="15" fill="rgb(213,79,30)" fg:x="864" fg:w="6"/><text x="41.1785%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (6 samples, 0.28%)</title><rect x="40.9285%" y="229" width="0.2842%" height="15" fill="rgb(246,177,23)" fg:x="864" fg:w="6"/><text x="41.1785%" y="239.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (6 samples, 0.28%)</title><rect x="40.9285%" y="213" width="0.2842%" height="15" fill="rgb(230,62,27)" fg:x="864" fg:w="6"/><text x="41.1785%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;rlox::value::Value&gt;&gt; (1 samples, 0.05%)</title><rect x="41.2127%" y="245" width="0.0474%" height="15" fill="rgb(216,154,8)" fg:x="870" fg:w="1"/><text x="41.4627%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (54 samples, 2.56%)</title><rect x="41.2601%" y="245" width="2.5580%" height="15" fill="rgb(244,35,45)" fg:x="871" fg:w="54"/><text x="41.5101%" y="255.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (40 samples, 1.89%)</title><rect x="41.9233%" y="229" width="1.8948%" height="15" fill="rgb(251,115,12)" fg:x="885" fg:w="40"/><text x="42.1733%" y="239.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.90%)</title><rect x="42.9180%" y="213" width="0.9000%" height="15" fill="rgb(240,54,50)" fg:x="906" fg:w="19"/><text x="43.1680%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (4 samples, 0.19%)</title><rect x="43.6286%" y="197" width="0.1895%" height="15" fill="rgb(233,84,52)" fg:x="921" fg:w="4"/><text x="43.8786%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (4 samples, 0.19%)</title><rect x="43.6286%" y="181" width="0.1895%" height="15" fill="rgb(207,117,47)" fg:x="921" fg:w="4"/><text x="43.8786%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (4 samples, 0.19%)</title><rect x="43.6286%" y="165" width="0.1895%" height="15" fill="rgb(249,43,39)" fg:x="921" fg:w="4"/><text x="43.8786%" y="175.50"></text></g><g><title>core::mem::replace (4 samples, 0.19%)</title><rect x="43.6286%" y="149" width="0.1895%" height="15" fill="rgb(209,38,44)" fg:x="921" fg:w="4"/><text x="43.8786%" y="159.50"></text></g><g><title>core::ptr::write (4 samples, 0.19%)</title><rect x="43.6286%" y="133" width="0.1895%" height="15" fill="rgb(236,212,23)" fg:x="921" fg:w="4"/><text x="43.8786%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::CallFrame&gt; (11 samples, 0.52%)</title><rect x="43.8181%" y="245" width="0.5211%" height="15" fill="rgb(242,79,21)" fg:x="925" fg:w="11"/><text x="44.0681%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;rlox::object::ObjClosure&gt;&gt; (11 samples, 0.52%)</title><rect x="43.8181%" y="229" width="0.5211%" height="15" fill="rgb(211,96,35)" fg:x="925" fg:w="11"/><text x="44.0681%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.24%)</title><rect x="44.1023%" y="213" width="0.2369%" height="15" fill="rgb(253,215,40)" fg:x="931" fg:w="5"/><text x="44.3523%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::vm::OpCode&gt; (40 samples, 1.89%)</title><rect x="44.3392%" y="245" width="1.8948%" height="15" fill="rgb(211,81,21)" fg:x="936" fg:w="40"/><text x="44.5892%" y="255.50">c..</text></g><g><title>rlox::value::Value::as_str (21 samples, 0.99%)</title><rect x="46.2340%" y="245" width="0.9948%" height="15" fill="rgb(208,190,38)" fg:x="976" fg:w="21"/><text x="46.4840%" y="255.50"></text></g><g><title>rlox::value::Value::is_instance (5 samples, 0.24%)</title><rect x="47.2288%" y="245" width="0.2369%" height="15" fill="rgb(235,213,38)" fg:x="997" fg:w="5"/><text x="47.4788%" y="255.50"></text></g><g><title>rlox::value::Value::lt (5 samples, 0.24%)</title><rect x="47.4657%" y="245" width="0.2369%" height="15" fill="rgb(237,122,38)" fg:x="1002" fg:w="5"/><text x="47.7157%" y="255.50"></text></g><g><title>rlox::vm::VM::close_upvalues (2 samples, 0.09%)</title><rect x="47.7025%" y="245" width="0.0947%" height="15" fill="rgb(244,218,35)" fg:x="1007" fg:w="2"/><text x="47.9525%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="47.7025%" y="229" width="0.0947%" height="15" fill="rgb(240,68,47)" fg:x="1007" fg:w="2"/><text x="47.9525%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.33%)</title><rect x="47.7973%" y="229" width="0.3316%" height="15" fill="rgb(210,16,53)" fg:x="1009" fg:w="7"/><text x="48.0473%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (6 samples, 0.28%)</title><rect x="47.8446%" y="213" width="0.2842%" height="15" fill="rgb(235,124,12)" fg:x="1010" fg:w="6"/><text x="48.0946%" y="223.50"></text></g><g><title>rlox::vm::VM::frame (12 samples, 0.57%)</title><rect x="47.7973%" y="245" width="0.5685%" height="15" fill="rgb(224,169,11)" fg:x="1009" fg:w="12"/><text x="48.0473%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (5 samples, 0.24%)</title><rect x="48.1288%" y="229" width="0.2369%" height="15" fill="rgb(250,166,2)" fg:x="1016" fg:w="5"/><text x="48.3788%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.28%)</title><rect x="48.6499%" y="229" width="0.2842%" height="15" fill="rgb(242,216,29)" fg:x="1027" fg:w="6"/><text x="48.8999%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (6 samples, 0.28%)</title><rect x="48.6499%" y="213" width="0.2842%" height="15" fill="rgb(230,116,27)" fg:x="1027" fg:w="6"/><text x="48.8999%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.05%)</title><rect x="48.8868%" y="197" width="0.0474%" height="15" fill="rgb(228,99,48)" fg:x="1032" fg:w="1"/><text x="49.1368%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.05%)</title><rect x="48.8868%" y="181" width="0.0474%" height="15" fill="rgb(253,11,6)" fg:x="1032" fg:w="1"/><text x="49.1368%" y="191.50"></text></g><g><title>core::mem::replace (1 samples, 0.05%)</title><rect x="48.8868%" y="165" width="0.0474%" height="15" fill="rgb(247,143,39)" fg:x="1032" fg:w="1"/><text x="49.1368%" y="175.50"></text></g><g><title>core::ptr::write (1 samples, 0.05%)</title><rect x="48.8868%" y="149" width="0.0474%" height="15" fill="rgb(236,97,10)" fg:x="1032" fg:w="1"/><text x="49.1368%" y="159.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (2 samples, 0.09%)</title><rect x="48.9342%" y="229" width="0.0947%" height="15" fill="rgb(233,208,19)" fg:x="1033" fg:w="2"/><text x="49.1842%" y="239.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (2 samples, 0.09%)</title><rect x="48.9342%" y="213" width="0.0947%" height="15" fill="rgb(216,164,2)" fg:x="1033" fg:w="2"/><text x="49.1842%" y="223.50"></text></g><g><title>core::cell::BorrowRef::new (2 samples, 0.09%)</title><rect x="48.9342%" y="197" width="0.0947%" height="15" fill="rgb(220,129,5)" fg:x="1033" fg:w="2"/><text x="49.1842%" y="207.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (2 samples, 0.09%)</title><rect x="48.9342%" y="181" width="0.0947%" height="15" fill="rgb(242,17,10)" fg:x="1033" fg:w="2"/><text x="49.1842%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (13 samples, 0.62%)</title><rect x="49.0289%" y="229" width="0.6158%" height="15" fill="rgb(242,107,0)" fg:x="1035" fg:w="13"/><text x="49.2789%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.57%)</title><rect x="49.0763%" y="213" width="0.5685%" height="15" fill="rgb(251,28,31)" fg:x="1036" fg:w="12"/><text x="49.3263%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::dec_strong (2 samples, 0.09%)</title><rect x="49.5500%" y="197" width="0.0947%" height="15" fill="rgb(233,223,10)" fg:x="1046" fg:w="2"/><text x="49.8000%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.09%)</title><rect x="49.5500%" y="181" width="0.0947%" height="15" fill="rgb(215,21,27)" fg:x="1046" fg:w="2"/><text x="49.8000%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.09%)</title><rect x="49.5500%" y="165" width="0.0947%" height="15" fill="rgb(232,23,21)" fg:x="1046" fg:w="2"/><text x="49.8000%" y="175.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="49.5500%" y="149" width="0.0947%" height="15" fill="rgb(244,5,23)" fg:x="1046" fg:w="2"/><text x="49.8000%" y="159.50"></text></g><g><title>core::ptr::write (2 samples, 0.09%)</title><rect x="49.5500%" y="133" width="0.0947%" height="15" fill="rgb(226,81,46)" fg:x="1046" fg:w="2"/><text x="49.8000%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjInstance&gt;&gt; (7 samples, 0.33%)</title><rect x="49.6447%" y="229" width="0.3316%" height="15" fill="rgb(247,70,30)" fg:x="1048" fg:w="7"/><text x="49.8947%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (7 samples, 0.33%)</title><rect x="49.6447%" y="213" width="0.3316%" height="15" fill="rgb(212,68,19)" fg:x="1048" fg:w="7"/><text x="49.8947%" y="223.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (7 samples, 0.33%)</title><rect x="49.6447%" y="197" width="0.3316%" height="15" fill="rgb(240,187,13)" fg:x="1048" fg:w="7"/><text x="49.8947%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (7 samples, 0.33%)</title><rect x="49.6447%" y="181" width="0.3316%" height="15" fill="rgb(223,113,26)" fg:x="1048" fg:w="7"/><text x="49.8947%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (7 samples, 0.33%)</title><rect x="49.6447%" y="165" width="0.3316%" height="15" fill="rgb(206,192,2)" fg:x="1048" fg:w="7"/><text x="49.8947%" y="175.50"></text></g><g><title>core::mem::replace (7 samples, 0.33%)</title><rect x="49.6447%" y="149" width="0.3316%" height="15" fill="rgb(241,108,4)" fg:x="1048" fg:w="7"/><text x="49.8947%" y="159.50"></text></g><g><title>core::ptr::write (7 samples, 0.33%)</title><rect x="49.6447%" y="133" width="0.3316%" height="15" fill="rgb(247,173,49)" fg:x="1048" fg:w="7"/><text x="49.8947%" y="143.50"></text></g><g><title>rlox::value::Value::as_instance (9 samples, 0.43%)</title><rect x="49.9763%" y="229" width="0.4263%" height="15" fill="rgb(224,114,35)" fg:x="1055" fg:w="9"/><text x="50.2263%" y="239.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (6 samples, 0.28%)</title><rect x="50.4027%" y="213" width="0.2842%" height="15" fill="rgb(245,159,27)" fg:x="1064" fg:w="6"/><text x="50.6527%" y="223.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (6 samples, 0.28%)</title><rect x="50.4027%" y="197" width="0.2842%" height="15" fill="rgb(245,172,44)" fg:x="1064" fg:w="6"/><text x="50.6527%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (2 samples, 0.09%)</title><rect x="50.6869%" y="165" width="0.0947%" height="15" fill="rgb(236,23,11)" fg:x="1070" fg:w="2"/><text x="50.9369%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (2 samples, 0.09%)</title><rect x="50.6869%" y="149" width="0.0947%" height="15" fill="rgb(205,117,38)" fg:x="1070" fg:w="2"/><text x="50.9369%" y="159.50"></text></g><g><title>core::mem::replace (2 samples, 0.09%)</title><rect x="50.6869%" y="133" width="0.0947%" height="15" fill="rgb(237,72,25)" fg:x="1070" fg:w="2"/><text x="50.9369%" y="143.50"></text></g><g><title>core::ptr::write (2 samples, 0.09%)</title><rect x="50.6869%" y="117" width="0.0947%" height="15" fill="rgb(244,70,9)" fg:x="1070" fg:w="2"/><text x="50.9369%" y="127.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow (5 samples, 0.24%)</title><rect x="50.6869%" y="213" width="0.2369%" height="15" fill="rgb(217,125,39)" fg:x="1070" fg:w="5"/><text x="50.9369%" y="223.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow (5 samples, 0.24%)</title><rect x="50.6869%" y="197" width="0.2369%" height="15" fill="rgb(235,36,10)" fg:x="1070" fg:w="5"/><text x="50.9369%" y="207.50"></text></g><g><title>core::cell::BorrowRef::new (5 samples, 0.24%)</title><rect x="50.6869%" y="181" width="0.2369%" height="15" fill="rgb(251,123,47)" fg:x="1070" fg:w="5"/><text x="50.9369%" y="191.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_add (3 samples, 0.14%)</title><rect x="50.7816%" y="165" width="0.1421%" height="15" fill="rgb(221,13,13)" fg:x="1072" fg:w="3"/><text x="51.0316%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjClass&gt;&gt;&gt; (7 samples, 0.33%)</title><rect x="50.9237%" y="213" width="0.3316%" height="15" fill="rgb(238,131,9)" fg:x="1075" fg:w="7"/><text x="51.1737%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.33%)</title><rect x="50.9237%" y="197" width="0.3316%" height="15" fill="rgb(211,50,8)" fg:x="1075" fg:w="7"/><text x="51.1737%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::Ref&lt;rlox::object::ObjClass&gt;&gt; (9 samples, 0.43%)</title><rect x="51.2553%" y="213" width="0.4263%" height="15" fill="rgb(245,182,24)" fg:x="1082" fg:w="9"/><text x="51.5053%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::BorrowRef&gt; (9 samples, 0.43%)</title><rect x="51.2553%" y="197" width="0.4263%" height="15" fill="rgb(242,14,37)" fg:x="1082" fg:w="9"/><text x="51.5053%" y="207.50"></text></g><g><title>&lt;core::cell::BorrowRef as core::ops::drop::Drop&gt;::drop (9 samples, 0.43%)</title><rect x="51.2553%" y="181" width="0.4263%" height="15" fill="rgb(246,228,12)" fg:x="1082" fg:w="9"/><text x="51.5053%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (9 samples, 0.43%)</title><rect x="51.2553%" y="165" width="0.4263%" height="15" fill="rgb(213,55,15)" fg:x="1082" fg:w="9"/><text x="51.5053%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (9 samples, 0.43%)</title><rect x="51.2553%" y="149" width="0.4263%" height="15" fill="rgb(209,9,3)" fg:x="1082" fg:w="9"/><text x="51.5053%" y="159.50"></text></g><g><title>core::mem::replace (9 samples, 0.43%)</title><rect x="51.2553%" y="133" width="0.4263%" height="15" fill="rgb(230,59,30)" fg:x="1082" fg:w="9"/><text x="51.5053%" y="143.50"></text></g><g><title>core::ptr::write (9 samples, 0.43%)</title><rect x="51.2553%" y="117" width="0.4263%" height="15" fill="rgb(209,121,21)" fg:x="1082" fg:w="9"/><text x="51.5053%" y="127.50"></text></g><g><title>rlox::value::Value::as_closure (2 samples, 0.09%)</title><rect x="51.6817%" y="213" width="0.0947%" height="15" fill="rgb(220,109,13)" fg:x="1091" fg:w="2"/><text x="51.9317%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (6 samples, 0.28%)</title><rect x="53.2923%" y="181" width="0.2842%" height="15" fill="rgb(232,18,1)" fg:x="1125" fg:w="6"/><text x="53.5423%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.28%)</title><rect x="53.2923%" y="165" width="0.2842%" height="15" fill="rgb(215,41,42)" fg:x="1125" fg:w="6"/><text x="53.5423%" y="175.50"></text></g><g><title>rlox::vm::VM::call_closure (58 samples, 2.75%)</title><rect x="51.7764%" y="213" width="2.7475%" height="15" fill="rgb(224,123,36)" fg:x="1093" fg:w="58"/><text x="52.0264%" y="223.50">rl..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 1.37%)</title><rect x="53.1502%" y="197" width="1.3738%" height="15" fill="rgb(240,125,3)" fg:x="1122" fg:w="29"/><text x="53.4002%" y="207.50"></text></g><g><title>core::ptr::write (20 samples, 0.95%)</title><rect x="53.5765%" y="181" width="0.9474%" height="15" fill="rgb(205,98,50)" fg:x="1131" fg:w="20"/><text x="53.8265%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.24%)</title><rect x="54.5239%" y="165" width="0.2369%" height="15" fill="rgb(205,185,37)" fg:x="1151" fg:w="5"/><text x="54.7739%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (5 samples, 0.24%)</title><rect x="54.5239%" y="149" width="0.2369%" height="15" fill="rgb(238,207,15)" fg:x="1151" fg:w="5"/><text x="54.7739%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (5 samples, 0.24%)</title><rect x="54.5239%" y="133" width="0.2369%" height="15" fill="rgb(213,199,42)" fg:x="1151" fg:w="5"/><text x="54.7739%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (5 samples, 0.24%)</title><rect x="54.5239%" y="117" width="0.2369%" height="15" fill="rgb(235,201,11)" fg:x="1151" fg:w="5"/><text x="54.7739%" y="127.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (5 samples, 0.24%)</title><rect x="54.5239%" y="101" width="0.2369%" height="15" fill="rgb(207,46,11)" fg:x="1151" fg:w="5"/><text x="54.7739%" y="111.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (5 samples, 0.24%)</title><rect x="54.5239%" y="85" width="0.2369%" height="15" fill="rgb(241,35,35)" fg:x="1151" fg:w="5"/><text x="54.7739%" y="95.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (5 samples, 0.24%)</title><rect x="54.5239%" y="69" width="0.2369%" height="15" fill="rgb(243,32,47)" fg:x="1151" fg:w="5"/><text x="54.7739%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.62%)</title><rect x="54.9976%" y="117" width="0.6158%" height="15" fill="rgb(247,202,23)" fg:x="1161" fg:w="13"/><text x="55.2476%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.33%)</title><rect x="55.2819%" y="101" width="0.3316%" height="15" fill="rgb(219,102,11)" fg:x="1167" fg:w="7"/><text x="55.5319%" y="111.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.33%)</title><rect x="55.2819%" y="85" width="0.3316%" height="15" fill="rgb(243,110,44)" fg:x="1167" fg:w="7"/><text x="55.5319%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.76%)</title><rect x="54.9976%" y="133" width="0.7579%" height="15" fill="rgb(222,74,54)" fg:x="1161" fg:w="16"/><text x="55.2476%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (3 samples, 0.14%)</title><rect x="55.6135%" y="117" width="0.1421%" height="15" fill="rgb(216,99,12)" fg:x="1174" fg:w="3"/><text x="55.8635%" y="127.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.14%)</title><rect x="55.6135%" y="101" width="0.1421%" height="15" fill="rgb(226,22,26)" fg:x="1174" fg:w="3"/><text x="55.8635%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.14%)</title><rect x="55.6135%" y="85" width="0.1421%" height="15" fill="rgb(217,163,10)" fg:x="1174" fg:w="3"/><text x="55.8635%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.14%)</title><rect x="55.6135%" y="69" width="0.1421%" height="15" fill="rgb(213,25,53)" fg:x="1174" fg:w="3"/><text x="55.8635%" y="79.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.19%)</title><rect x="55.7556%" y="133" width="0.1895%" height="15" fill="rgb(252,105,26)" fg:x="1177" fg:w="4"/><text x="56.0056%" y="143.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.19%)</title><rect x="55.7556%" y="117" width="0.1895%" height="15" fill="rgb(220,39,43)" fg:x="1177" fg:w="4"/><text x="56.0056%" y="127.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.19%)</title><rect x="55.7556%" y="101" width="0.1895%" height="15" fill="rgb(229,68,48)" fg:x="1177" fg:w="4"/><text x="56.0056%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (4 samples, 0.19%)</title><rect x="55.9450%" y="85" width="0.1895%" height="15" fill="rgb(252,8,32)" fg:x="1181" fg:w="4"/><text x="56.1950%" y="95.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.09%)</title><rect x="56.1345%" y="85" width="0.0947%" height="15" fill="rgb(223,20,43)" fg:x="1185" fg:w="2"/><text x="56.3845%" y="95.50"></text></g><g><title>rlox::vm::VM::invoke_from_class (128 samples, 6.06%)</title><rect x="50.4027%" y="229" width="6.0635%" height="15" fill="rgb(229,81,49)" fg:x="1064" fg:w="128"/><text x="50.6527%" y="239.50">rlox::vm..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (41 samples, 1.94%)</title><rect x="54.5239%" y="213" width="1.9422%" height="15" fill="rgb(236,28,36)" fg:x="1151" fg:w="41"/><text x="54.7739%" y="223.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (41 samples, 1.94%)</title><rect x="54.5239%" y="197" width="1.9422%" height="15" fill="rgb(249,185,26)" fg:x="1151" fg:w="41"/><text x="54.7739%" y="207.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (41 samples, 1.94%)</title><rect x="54.5239%" y="181" width="1.9422%" height="15" fill="rgb(249,174,33)" fg:x="1151" fg:w="41"/><text x="54.7739%" y="191.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (36 samples, 1.71%)</title><rect x="54.7608%" y="165" width="1.7054%" height="15" fill="rgb(233,201,37)" fg:x="1156" fg:w="36"/><text x="55.0108%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (36 samples, 1.71%)</title><rect x="54.7608%" y="149" width="1.7054%" height="15" fill="rgb(221,78,26)" fg:x="1156" fg:w="36"/><text x="55.0108%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (11 samples, 0.52%)</title><rect x="55.9450%" y="133" width="0.5211%" height="15" fill="rgb(250,127,30)" fg:x="1181" fg:w="11"/><text x="56.1950%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (11 samples, 0.52%)</title><rect x="55.9450%" y="117" width="0.5211%" height="15" fill="rgb(230,49,44)" fg:x="1181" fg:w="11"/><text x="56.1950%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (11 samples, 0.52%)</title><rect x="55.9450%" y="101" width="0.5211%" height="15" fill="rgb(229,67,23)" fg:x="1181" fg:w="11"/><text x="56.1950%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.24%)</title><rect x="56.2293%" y="85" width="0.2369%" height="15" fill="rgb(249,83,47)" fg:x="1187" fg:w="5"/><text x="56.4793%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (5 samples, 0.24%)</title><rect x="56.2293%" y="69" width="0.2369%" height="15" fill="rgb(215,43,3)" fg:x="1187" fg:w="5"/><text x="56.4793%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (5 samples, 0.24%)</title><rect x="56.2293%" y="53" width="0.2369%" height="15" fill="rgb(238,154,13)" fg:x="1187" fg:w="5"/><text x="56.4793%" y="63.50"></text></g><g><title>core::core_arch::simd::i8x16::new (5 samples, 0.24%)</title><rect x="56.2293%" y="37" width="0.2369%" height="15" fill="rgb(219,56,2)" fg:x="1187" fg:w="5"/><text x="56.4793%" y="47.50"></text></g><g><title>rlox::vm::VM::peek (7 samples, 0.33%)</title><rect x="56.4661%" y="229" width="0.3316%" height="15" fill="rgb(233,0,4)" fg:x="1192" fg:w="7"/><text x="56.7161%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.05%)</title><rect x="56.7977%" y="181" width="0.0474%" height="15" fill="rgb(235,30,7)" fg:x="1199" fg:w="1"/><text x="57.0477%" y="191.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (1 samples, 0.05%)</title><rect x="56.7977%" y="165" width="0.0474%" height="15" fill="rgb(250,79,13)" fg:x="1199" fg:w="1"/><text x="57.0477%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (1 samples, 0.05%)</title><rect x="56.7977%" y="149" width="0.0474%" height="15" fill="rgb(211,146,34)" fg:x="1199" fg:w="1"/><text x="57.0477%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (1 samples, 0.05%)</title><rect x="56.7977%" y="133" width="0.0474%" height="15" fill="rgb(228,22,38)" fg:x="1199" fg:w="1"/><text x="57.0477%" y="143.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (1 samples, 0.05%)</title><rect x="56.7977%" y="117" width="0.0474%" height="15" fill="rgb(235,168,5)" fg:x="1199" fg:w="1"/><text x="57.0477%" y="127.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (1 samples, 0.05%)</title><rect x="56.7977%" y="101" width="0.0474%" height="15" fill="rgb(221,155,16)" fg:x="1199" fg:w="1"/><text x="57.0477%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (1 samples, 0.05%)</title><rect x="56.7977%" y="85" width="0.0474%" height="15" fill="rgb(215,215,53)" fg:x="1199" fg:w="1"/><text x="57.0477%" y="95.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="57.1293%" y="149" width="0.0474%" height="15" fill="rgb(223,4,10)" fg:x="1206" fg:w="1"/><text x="57.3793%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="57.1293%" y="133" width="0.0474%" height="15" fill="rgb(234,103,6)" fg:x="1206" fg:w="1"/><text x="57.3793%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (4 samples, 0.19%)</title><rect x="57.5557%" y="101" width="0.1895%" height="15" fill="rgb(227,97,0)" fg:x="1215" fg:w="4"/><text x="57.8057%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (4 samples, 0.19%)</title><rect x="57.5557%" y="85" width="0.1895%" height="15" fill="rgb(234,150,53)" fg:x="1215" fg:w="4"/><text x="57.8057%" y="95.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.19%)</title><rect x="57.5557%" y="69" width="0.1895%" height="15" fill="rgb(228,201,54)" fg:x="1215" fg:w="4"/><text x="57.8057%" y="79.50"></text></g><g><title>rlox::vm::VM::invoke (210 samples, 9.95%)</title><rect x="48.3657%" y="245" width="9.9479%" height="15" fill="rgb(222,22,37)" fg:x="1021" fg:w="210"/><text x="48.6157%" y="255.50">rlox::vm::VM::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (32 samples, 1.52%)</title><rect x="56.7977%" y="229" width="1.5159%" height="15" fill="rgb(237,53,32)" fg:x="1199" fg:w="32"/><text x="57.0477%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (32 samples, 1.52%)</title><rect x="56.7977%" y="213" width="1.5159%" height="15" fill="rgb(233,25,53)" fg:x="1199" fg:w="32"/><text x="57.0477%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (32 samples, 1.52%)</title><rect x="56.7977%" y="197" width="1.5159%" height="15" fill="rgb(210,40,34)" fg:x="1199" fg:w="32"/><text x="57.0477%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (31 samples, 1.47%)</title><rect x="56.8451%" y="181" width="1.4685%" height="15" fill="rgb(241,220,44)" fg:x="1200" fg:w="31"/><text x="57.0951%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (31 samples, 1.47%)</title><rect x="56.8451%" y="165" width="1.4685%" height="15" fill="rgb(235,28,35)" fg:x="1200" fg:w="31"/><text x="57.0951%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (24 samples, 1.14%)</title><rect x="57.1767%" y="149" width="1.1369%" height="15" fill="rgb(210,56,17)" fg:x="1207" fg:w="24"/><text x="57.4267%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (24 samples, 1.14%)</title><rect x="57.1767%" y="133" width="1.1369%" height="15" fill="rgb(224,130,29)" fg:x="1207" fg:w="24"/><text x="57.4267%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (24 samples, 1.14%)</title><rect x="57.1767%" y="117" width="1.1369%" height="15" fill="rgb(235,212,8)" fg:x="1207" fg:w="24"/><text x="57.4267%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12 samples, 0.57%)</title><rect x="57.7451%" y="101" width="0.5685%" height="15" fill="rgb(223,33,50)" fg:x="1219" fg:w="12"/><text x="57.9951%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (12 samples, 0.57%)</title><rect x="57.7451%" y="85" width="0.5685%" height="15" fill="rgb(219,149,13)" fg:x="1219" fg:w="12"/><text x="57.9951%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (12 samples, 0.57%)</title><rect x="57.7451%" y="69" width="0.5685%" height="15" fill="rgb(250,156,29)" fg:x="1219" fg:w="12"/><text x="57.9951%" y="79.50"></text></g><g><title>core::core_arch::simd::i8x16::new (12 samples, 0.57%)</title><rect x="57.7451%" y="53" width="0.5685%" height="15" fill="rgb(216,193,19)" fg:x="1219" fg:w="12"/><text x="57.9951%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 1.09%)</title><rect x="64.7560%" y="197" width="1.0895%" height="15" fill="rgb(216,135,14)" fg:x="1367" fg:w="23"/><text x="65.0060%" y="207.50"></text></g><g><title>rlox::chunk::Chunk::read_instruction (80 samples, 3.79%)</title><rect x="64.7560%" y="229" width="3.7897%" height="15" fill="rgb(241,47,5)" fg:x="1367" fg:w="80"/><text x="65.0060%" y="239.50">rlox..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (80 samples, 3.79%)</title><rect x="64.7560%" y="213" width="3.7897%" height="15" fill="rgb(233,42,35)" fg:x="1367" fg:w="80"/><text x="65.0060%" y="223.50">&lt;all..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (57 samples, 2.70%)</title><rect x="65.8456%" y="197" width="2.7001%" height="15" fill="rgb(231,13,6)" fg:x="1390" fg:w="57"/><text x="66.0956%" y="207.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (57 samples, 2.70%)</title><rect x="65.8456%" y="181" width="2.7001%" height="15" fill="rgb(207,181,40)" fg:x="1390" fg:w="57"/><text x="66.0956%" y="191.50">&lt;u..</text></g><g><title>rlox::vm::VM::frame_mut (9 samples, 0.43%)</title><rect x="68.5457%" y="229" width="0.4263%" height="15" fill="rgb(254,173,49)" fg:x="1447" fg:w="9"/><text x="68.7957%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last_mut (9 samples, 0.43%)</title><rect x="68.5457%" y="213" width="0.4263%" height="15" fill="rgb(221,1,38)" fg:x="1447" fg:w="9"/><text x="68.7957%" y="223.50"></text></g><g><title>rlox::vm::VM::next_instruction (264 samples, 12.51%)</title><rect x="58.3136%" y="245" width="12.5059%" height="15" fill="rgb(206,124,46)" fg:x="1231" fg:w="264"/><text x="58.5636%" y="255.50">rlox::vm::VM::next_..</text></g><g><title>rlox::vm::VM::run (39 samples, 1.85%)</title><rect x="68.9721%" y="229" width="1.8475%" height="15" fill="rgb(249,21,11)" fg:x="1456" fg:w="39"/><text x="69.2221%" y="239.50">r..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.28%)</title><rect x="70.8195%" y="229" width="0.2842%" height="15" fill="rgb(222,201,40)" fg:x="1495" fg:w="6"/><text x="71.0695%" y="239.50"></text></g><g><title>rlox::vm::VM::peek (9 samples, 0.43%)</title><rect x="70.8195%" y="245" width="0.4263%" height="15" fill="rgb(235,61,29)" fg:x="1495" fg:w="9"/><text x="71.0695%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (3 samples, 0.14%)</title><rect x="71.1037%" y="229" width="0.1421%" height="15" fill="rgb(219,207,3)" fg:x="1501" fg:w="3"/><text x="71.3537%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (3 samples, 0.14%)</title><rect x="71.1037%" y="213" width="0.1421%" height="15" fill="rgb(222,56,46)" fg:x="1501" fg:w="3"/><text x="71.3537%" y="223.50"></text></g><g><title>rlox::vm::VM::peek_mut (9 samples, 0.43%)</title><rect x="71.2459%" y="245" width="0.4263%" height="15" fill="rgb(239,76,54)" fg:x="1504" fg:w="9"/><text x="71.4959%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (7 samples, 0.33%)</title><rect x="71.3406%" y="229" width="0.3316%" height="15" fill="rgb(231,124,27)" fg:x="1506" fg:w="7"/><text x="71.5906%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (7 samples, 0.33%)</title><rect x="71.3406%" y="213" width="0.3316%" height="15" fill="rgb(249,195,6)" fg:x="1506" fg:w="7"/><text x="71.5906%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (33 samples, 1.56%)</title><rect x="71.6722%" y="229" width="1.5632%" height="15" fill="rgb(237,174,47)" fg:x="1513" fg:w="33"/><text x="71.9222%" y="239.50"></text></g><g><title>core::ptr::read (24 samples, 1.14%)</title><rect x="72.0985%" y="213" width="1.1369%" height="15" fill="rgb(206,201,31)" fg:x="1522" fg:w="24"/><text x="72.3485%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.66%)</title><rect x="72.5722%" y="197" width="0.6632%" height="15" fill="rgb(231,57,52)" fg:x="1532" fg:w="14"/><text x="72.8222%" y="207.50"></text></g><g><title>rlox::vm::VM::pop (74 samples, 3.51%)</title><rect x="71.6722%" y="245" width="3.5054%" height="15" fill="rgb(248,177,22)" fg:x="1513" fg:w="74"/><text x="71.9222%" y="255.50">rlo..</text></g><g><title>core::option::Option&lt;T&gt;::expect (41 samples, 1.94%)</title><rect x="73.2354%" y="229" width="1.9422%" height="15" fill="rgb(215,211,37)" fg:x="1546" fg:w="41"/><text x="73.4854%" y="239.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.05%)</title><rect x="75.6514%" y="213" width="0.0474%" height="15" fill="rgb(241,128,51)" fg:x="1597" fg:w="1"/><text x="75.9014%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (5 samples, 0.24%)</title><rect x="75.6987%" y="213" width="0.2369%" height="15" fill="rgb(227,165,31)" fg:x="1598" fg:w="5"/><text x="75.9487%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (21 samples, 0.99%)</title><rect x="75.1776%" y="229" width="0.9948%" height="15" fill="rgb(228,167,24)" fg:x="1587" fg:w="21"/><text x="75.4276%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.24%)</title><rect x="75.9356%" y="213" width="0.2369%" height="15" fill="rgb(228,143,12)" fg:x="1603" fg:w="5"/><text x="76.1856%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.24%)</title><rect x="75.9356%" y="197" width="0.2369%" height="15" fill="rgb(249,149,8)" fg:x="1603" fg:w="5"/><text x="76.1856%" y="207.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.33%)</title><rect x="76.6935%" y="197" width="0.3316%" height="15" fill="rgb(243,35,44)" fg:x="1619" fg:w="7"/><text x="76.9435%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.33%)</title><rect x="76.6935%" y="181" width="0.3316%" height="15" fill="rgb(246,89,9)" fg:x="1619" fg:w="7"/><text x="76.9435%" y="191.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (3 samples, 0.14%)</title><rect x="76.8830%" y="165" width="0.1421%" height="15" fill="rgb(233,213,13)" fg:x="1623" fg:w="3"/><text x="77.1330%" y="175.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.43%)</title><rect x="77.0251%" y="181" width="0.4263%" height="15" fill="rgb(233,141,41)" fg:x="1626" fg:w="9"/><text x="77.2751%" y="191.50"></text></g><g><title>core::mem::drop (32 samples, 1.52%)</title><rect x="77.0251%" y="197" width="1.5159%" height="15" fill="rgb(239,167,4)" fg:x="1626" fg:w="32"/><text x="77.2751%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;rlox::value::Value&gt; (23 samples, 1.09%)</title><rect x="77.4514%" y="181" width="1.0895%" height="15" fill="rgb(209,217,16)" fg:x="1635" fg:w="23"/><text x="77.7014%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::RefCell&lt;rlox::object::ObjInstance&gt;&gt;&gt; (17 samples, 0.81%)</title><rect x="77.7357%" y="165" width="0.8053%" height="15" fill="rgb(219,88,35)" fg:x="1641" fg:w="17"/><text x="77.9857%" y="175.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.81%)</title><rect x="77.7357%" y="149" width="0.8053%" height="15" fill="rgb(220,193,23)" fg:x="1641" fg:w="17"/><text x="77.9857%" y="159.50"></text></g><g><title>rlox::vm::VM::popn (96 samples, 4.55%)</title><rect x="75.1776%" y="245" width="4.5476%" height="15" fill="rgb(230,90,52)" fg:x="1587" fg:w="96"/><text x="75.4276%" y="255.50">rlox:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;rlox::value::Value&gt;&gt; (75 samples, 3.55%)</title><rect x="76.1724%" y="229" width="3.5528%" height="15" fill="rgb(252,106,19)" fg:x="1608" fg:w="75"/><text x="76.4224%" y="239.50">core..</text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 3.55%)</title><rect x="76.1724%" y="213" width="3.5528%" height="15" fill="rgb(206,74,20)" fg:x="1608" fg:w="75"/><text x="76.4224%" y="223.50">&lt;all..</text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;rlox::value::Value,alloc::alloc::Global&gt;&gt; (25 samples, 1.18%)</title><rect x="78.5410%" y="197" width="1.1843%" height="15" fill="rgb(230,138,44)" fg:x="1658" fg:w="25"/><text x="78.7910%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 1.18%)</title><rect x="78.5410%" y="181" width="1.1843%" height="15" fill="rgb(235,182,43)" fg:x="1658" fg:w="25"/><text x="78.7910%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.71%)</title><rect x="79.0147%" y="165" width="0.7106%" height="15" fill="rgb(242,16,51)" fg:x="1668" fg:w="15"/><text x="79.2647%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.71%)</title><rect x="79.0147%" y="149" width="0.7106%" height="15" fill="rgb(248,9,4)" fg:x="1668" fg:w="15"/><text x="79.2647%" y="159.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.71%)</title><rect x="79.0147%" y="133" width="0.7106%" height="15" fill="rgb(210,31,22)" fg:x="1668" fg:w="15"/><text x="79.2647%" y="143.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.71%)</title><rect x="79.0147%" y="117" width="0.7106%" height="15" fill="rgb(239,54,39)" fg:x="1668" fg:w="15"/><text x="79.2647%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.71%)</title><rect x="79.0147%" y="101" width="0.7106%" height="15" fill="rgb(230,99,41)" fg:x="1668" fg:w="15"/><text x="79.2647%" y="111.50"></text></g><g><title>rlox::vm::VM::push (192 samples, 9.10%)</title><rect x="79.7252%" y="245" width="9.0952%" height="15" fill="rgb(253,106,12)" fg:x="1683" fg:w="192"/><text x="79.9752%" y="255.50">rlox::vm::VM:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (80 samples, 3.79%)</title><rect x="85.0308%" y="229" width="3.7897%" height="15" fill="rgb(213,46,41)" fg:x="1795" fg:w="80"/><text x="85.2808%" y="239.50">allo..</text></g><g><title>core::ptr::write (80 samples, 3.79%)</title><rect x="85.0308%" y="213" width="3.7897%" height="15" fill="rgb(215,133,35)" fg:x="1795" fg:w="80"/><text x="85.2808%" y="223.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 1.28%)</title><rect x="89.8626%" y="197" width="1.2790%" height="15" fill="rgb(213,28,5)" fg:x="1897" fg:w="27"/><text x="90.1126%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.62%)</title><rect x="90.5258%" y="181" width="0.6158%" height="15" fill="rgb(215,77,49)" fg:x="1911" fg:w="13"/><text x="90.7758%" y="191.50"></text></g><g><title>rlox::chunk::Chunk::read_const (36 samples, 1.71%)</title><rect x="89.8626%" y="229" width="1.7054%" height="15" fill="rgb(248,100,22)" fg:x="1897" fg:w="36"/><text x="90.1126%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (36 samples, 1.71%)</title><rect x="89.8626%" y="213" width="1.7054%" height="15" fill="rgb(208,67,9)" fg:x="1897" fg:w="36"/><text x="90.1126%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.43%)</title><rect x="91.1416%" y="197" width="0.4263%" height="15" fill="rgb(219,133,21)" fg:x="1924" fg:w="9"/><text x="91.3916%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.43%)</title><rect x="91.1416%" y="181" width="0.4263%" height="15" fill="rgb(246,46,29)" fg:x="1924" fg:w="9"/><text x="91.3916%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.99%)</title><rect x="91.5680%" y="213" width="0.9948%" height="15" fill="rgb(246,185,52)" fg:x="1933" fg:w="21"/><text x="91.8180%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.14%)</title><rect x="92.4207%" y="197" width="0.1421%" height="15" fill="rgb(252,136,11)" fg:x="1951" fg:w="3"/><text x="92.6707%" y="207.50"></text></g><g><title>rlox::vm::VM::read_const (92 samples, 4.36%)</title><rect x="88.8205%" y="245" width="4.3581%" height="15" fill="rgb(219,138,53)" fg:x="1875" fg:w="92"/><text x="89.0705%" y="255.50">rlox:..</text></g><g><title>rlox::vm::VM::frame (34 samples, 1.61%)</title><rect x="91.5680%" y="229" width="1.6106%" height="15" fill="rgb(211,51,23)" fg:x="1933" fg:w="34"/><text x="91.8180%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (13 samples, 0.62%)</title><rect x="92.5628%" y="213" width="0.6158%" height="15" fill="rgb(247,221,28)" fg:x="1954" fg:w="13"/><text x="92.8128%" y="223.50"></text></g><g><title>rlox::vm::VM::run (13 samples, 0.62%)</title><rect x="93.1786%" y="245" width="0.6158%" height="15" fill="rgb(251,222,45)" fg:x="1967" fg:w="13"/><text x="93.4286%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.19%)</title><rect x="93.7944%" y="197" width="0.1895%" height="15" fill="rgb(217,162,53)" fg:x="1980" fg:w="4"/><text x="94.0444%" y="207.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (4 samples, 0.19%)</title><rect x="93.7944%" y="181" width="0.1895%" height="15" fill="rgb(229,93,14)" fg:x="1980" fg:w="4"/><text x="94.0444%" y="191.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (4 samples, 0.19%)</title><rect x="93.7944%" y="165" width="0.1895%" height="15" fill="rgb(209,67,49)" fg:x="1980" fg:w="4"/><text x="94.0444%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (4 samples, 0.19%)</title><rect x="93.7944%" y="149" width="0.1895%" height="15" fill="rgb(213,87,29)" fg:x="1980" fg:w="4"/><text x="94.0444%" y="159.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (4 samples, 0.19%)</title><rect x="93.7944%" y="133" width="0.1895%" height="15" fill="rgb(205,151,52)" fg:x="1980" fg:w="4"/><text x="94.0444%" y="143.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (4 samples, 0.19%)</title><rect x="93.7944%" y="117" width="0.1895%" height="15" fill="rgb(253,215,39)" fg:x="1980" fg:w="4"/><text x="94.0444%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (4 samples, 0.19%)</title><rect x="93.7944%" y="101" width="0.1895%" height="15" fill="rgb(221,220,41)" fg:x="1980" fg:w="4"/><text x="94.0444%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.24%)</title><rect x="94.1260%" y="149" width="0.2369%" height="15" fill="rgb(218,133,21)" fg:x="1987" fg:w="5"/><text x="94.3760%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.19%)</title><rect x="94.1734%" y="133" width="0.1895%" height="15" fill="rgb(221,193,43)" fg:x="1988" fg:w="4"/><text x="94.4234%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.19%)</title><rect x="94.1734%" y="117" width="0.1895%" height="15" fill="rgb(240,128,52)" fg:x="1988" fg:w="4"/><text x="94.4234%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.28%)</title><rect x="94.1260%" y="165" width="0.2842%" height="15" fill="rgb(253,114,12)" fg:x="1987" fg:w="6"/><text x="94.3760%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (1 samples, 0.05%)</title><rect x="94.3629%" y="149" width="0.0474%" height="15" fill="rgb(215,223,47)" fg:x="1992" fg:w="1"/><text x="94.6129%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.05%)</title><rect x="94.3629%" y="133" width="0.0474%" height="15" fill="rgb(248,225,23)" fg:x="1992" fg:w="1"/><text x="94.6129%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.05%)</title><rect x="94.3629%" y="117" width="0.0474%" height="15" fill="rgb(250,108,0)" fg:x="1992" fg:w="1"/><text x="94.6129%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.05%)</title><rect x="94.3629%" y="101" width="0.0474%" height="15" fill="rgb(228,208,7)" fg:x="1992" fg:w="1"/><text x="94.6129%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.19%)</title><rect x="94.4102%" y="165" width="0.1895%" height="15" fill="rgb(244,45,10)" fg:x="1993" fg:w="4"/><text x="94.6602%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.19%)</title><rect x="94.4102%" y="149" width="0.1895%" height="15" fill="rgb(207,125,25)" fg:x="1993" fg:w="4"/><text x="94.6602%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.19%)</title><rect x="94.4102%" y="133" width="0.1895%" height="15" fill="rgb(210,195,18)" fg:x="1993" fg:w="4"/><text x="94.6602%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.09%)</title><rect x="94.5997%" y="117" width="0.0947%" height="15" fill="rgb(249,80,12)" fg:x="1997" fg:w="2"/><text x="94.8497%" y="127.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::contains_key (21 samples, 0.99%)</title><rect x="93.7944%" y="245" width="0.9948%" height="15" fill="rgb(221,65,9)" fg:x="1980" fg:w="21"/><text x="94.0444%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (21 samples, 0.99%)</title><rect x="93.7944%" y="229" width="0.9948%" height="15" fill="rgb(235,49,36)" fg:x="1980" fg:w="21"/><text x="94.0444%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.99%)</title><rect x="93.7944%" y="213" width="0.9948%" height="15" fill="rgb(225,32,20)" fg:x="1980" fg:w="21"/><text x="94.0444%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (17 samples, 0.81%)</title><rect x="93.9839%" y="197" width="0.8053%" height="15" fill="rgb(215,141,46)" fg:x="1984" fg:w="17"/><text x="94.2339%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (17 samples, 0.81%)</title><rect x="93.9839%" y="181" width="0.8053%" height="15" fill="rgb(250,160,47)" fg:x="1984" fg:w="17"/><text x="94.2339%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (4 samples, 0.19%)</title><rect x="94.5997%" y="165" width="0.1895%" height="15" fill="rgb(216,222,40)" fg:x="1997" fg:w="4"/><text x="94.8497%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (4 samples, 0.19%)</title><rect x="94.5997%" y="149" width="0.1895%" height="15" fill="rgb(234,217,39)" fg:x="1997" fg:w="4"/><text x="94.8497%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (4 samples, 0.19%)</title><rect x="94.5997%" y="133" width="0.1895%" height="15" fill="rgb(207,178,40)" fg:x="1997" fg:w="4"/><text x="94.8497%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.09%)</title><rect x="94.6945%" y="117" width="0.0947%" height="15" fill="rgb(221,136,13)" fg:x="1999" fg:w="2"/><text x="94.9445%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.09%)</title><rect x="94.6945%" y="101" width="0.0947%" height="15" fill="rgb(249,199,10)" fg:x="1999" fg:w="2"/><text x="94.9445%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.09%)</title><rect x="94.6945%" y="85" width="0.0947%" height="15" fill="rgb(249,222,13)" fg:x="1999" fg:w="2"/><text x="94.9445%" y="95.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.38%)</title><rect x="95.0734%" y="197" width="0.3790%" height="15" fill="rgb(244,185,38)" fg:x="2007" fg:w="8"/><text x="95.3234%" y="207.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::hash::Hash&gt;::hash (8 samples, 0.38%)</title><rect x="95.0734%" y="181" width="0.3790%" height="15" fill="rgb(236,202,9)" fg:x="2007" fg:w="8"/><text x="95.3234%" y="191.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::hash::Hash&gt;::hash (8 samples, 0.38%)</title><rect x="95.0734%" y="165" width="0.3790%" height="15" fill="rgb(250,229,37)" fg:x="2007" fg:w="8"/><text x="95.3234%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (8 samples, 0.38%)</title><rect x="95.0734%" y="149" width="0.3790%" height="15" fill="rgb(206,174,23)" fg:x="2007" fg:w="8"/><text x="95.3234%" y="159.50"></text></g><g><title>&lt;rustc_hash::FxHasher as core::hash::Hasher&gt;::write_u32 (8 samples, 0.38%)</title><rect x="95.0734%" y="133" width="0.3790%" height="15" fill="rgb(211,33,43)" fg:x="2007" fg:w="8"/><text x="95.3234%" y="143.50"></text></g><g><title>rustc_hash::FxHasher::add_to_hash (8 samples, 0.38%)</title><rect x="95.0734%" y="117" width="0.3790%" height="15" fill="rgb(245,58,50)" fg:x="2007" fg:w="8"/><text x="95.3234%" y="127.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (8 samples, 0.38%)</title><rect x="95.0734%" y="101" width="0.3790%" height="15" fill="rgb(244,68,36)" fg:x="2007" fg:w="8"/><text x="95.3234%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.76%)</title><rect x="96.3998%" y="149" width="0.7579%" height="15" fill="rgb(232,229,15)" fg:x="2035" fg:w="16"/><text x="96.6498%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.66%)</title><rect x="96.4946%" y="133" width="0.6632%" height="15" fill="rgb(254,30,23)" fg:x="2037" fg:w="14"/><text x="96.7446%" y="143.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.66%)</title><rect x="96.4946%" y="117" width="0.6632%" height="15" fill="rgb(235,160,14)" fg:x="2037" fg:w="14"/><text x="96.7446%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.99%)</title><rect x="96.3998%" y="165" width="0.9948%" height="15" fill="rgb(212,155,44)" fg:x="2035" fg:w="21"/><text x="96.6498%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (5 samples, 0.24%)</title><rect x="97.1577%" y="149" width="0.2369%" height="15" fill="rgb(226,2,50)" fg:x="2051" fg:w="5"/><text x="97.4077%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.24%)</title><rect x="97.1577%" y="133" width="0.2369%" height="15" fill="rgb(234,177,6)" fg:x="2051" fg:w="5"/><text x="97.4077%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5 samples, 0.24%)</title><rect x="97.1577%" y="117" width="0.2369%" height="15" fill="rgb(217,24,9)" fg:x="2051" fg:w="5"/><text x="97.4077%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.24%)</title><rect x="97.1577%" y="101" width="0.2369%" height="15" fill="rgb(220,13,46)" fg:x="2051" fg:w="5"/><text x="97.4077%" y="111.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (13 samples, 0.62%)</title><rect x="97.3946%" y="165" width="0.6158%" height="15" fill="rgb(239,221,27)" fg:x="2056" fg:w="13"/><text x="97.6446%" y="175.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (9 samples, 0.43%)</title><rect x="97.5841%" y="149" width="0.4263%" height="15" fill="rgb(222,198,25)" fg:x="2060" fg:w="9"/><text x="97.8341%" y="159.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (9 samples, 0.43%)</title><rect x="97.5841%" y="133" width="0.4263%" height="15" fill="rgb(211,99,13)" fg:x="2060" fg:w="9"/><text x="97.8341%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (19 samples, 0.90%)</title><rect x="98.0104%" y="117" width="0.9000%" height="15" fill="rgb(232,111,31)" fg:x="2069" fg:w="19"/><text x="98.2604%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.14%)</title><rect x="98.9105%" y="117" width="0.1421%" height="15" fill="rgb(245,82,37)" fg:x="2088" fg:w="3"/><text x="99.1605%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.14%)</title><rect x="98.9105%" y="101" width="0.1421%" height="15" fill="rgb(227,149,46)" fg:x="2088" fg:w="3"/><text x="99.1605%" y="111.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.14%)</title><rect x="98.9105%" y="85" width="0.1421%" height="15" fill="rgb(218,36,50)" fg:x="2088" fg:w="3"/><text x="99.1605%" y="95.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (100 samples, 4.74%)</title><rect x="94.7892%" y="245" width="4.7371%" height="15" fill="rgb(226,80,48)" fg:x="2001" fg:w="100"/><text x="95.0392%" y="255.50">std::c..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (100 samples, 4.74%)</title><rect x="94.7892%" y="229" width="4.7371%" height="15" fill="rgb(238,224,15)" fg:x="2001" fg:w="100"/><text x="95.0392%" y="239.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (94 samples, 4.45%)</title><rect x="95.0734%" y="213" width="4.4529%" height="15" fill="rgb(241,136,10)" fg:x="2007" fg:w="94"/><text x="95.3234%" y="223.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (86 samples, 4.07%)</title><rect x="95.4524%" y="197" width="4.0739%" height="15" fill="rgb(208,32,45)" fg:x="2015" fg:w="86"/><text x="95.7024%" y="207.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (86 samples, 4.07%)</title><rect x="95.4524%" y="181" width="4.0739%" height="15" fill="rgb(207,135,9)" fg:x="2015" fg:w="86"/><text x="95.7024%" y="191.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (32 samples, 1.52%)</title><rect x="98.0104%" y="165" width="1.5159%" height="15" fill="rgb(206,86,44)" fg:x="2069" fg:w="32"/><text x="98.2604%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (32 samples, 1.52%)</title><rect x="98.0104%" y="149" width="1.5159%" height="15" fill="rgb(245,177,15)" fg:x="2069" fg:w="32"/><text x="98.2604%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (32 samples, 1.52%)</title><rect x="98.0104%" y="133" width="1.5159%" height="15" fill="rgb(206,64,50)" fg:x="2069" fg:w="32"/><text x="98.2604%" y="143.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (10 samples, 0.47%)</title><rect x="99.0526%" y="117" width="0.4737%" height="15" fill="rgb(234,36,40)" fg:x="2091" fg:w="10"/><text x="99.3026%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (10 samples, 0.47%)</title><rect x="99.0526%" y="101" width="0.4737%" height="15" fill="rgb(213,64,8)" fg:x="2091" fg:w="10"/><text x="99.3026%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (10 samples, 0.47%)</title><rect x="99.0526%" y="85" width="0.4737%" height="15" fill="rgb(210,75,36)" fg:x="2091" fg:w="10"/><text x="99.3026%" y="95.50"></text></g><g><title>core::core_arch::simd::i8x16::new (10 samples, 0.47%)</title><rect x="99.0526%" y="69" width="0.4737%" height="15" fill="rgb(229,88,21)" fg:x="2091" fg:w="10"/><text x="99.3026%" y="79.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.14%)</title><rect x="99.5263%" y="181" width="0.1421%" height="15" fill="rgb(252,204,47)" fg:x="2101" fg:w="3"/><text x="99.7763%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (3 samples, 0.14%)</title><rect x="99.5263%" y="165" width="0.1421%" height="15" fill="rgb(208,77,27)" fg:x="2101" fg:w="3"/><text x="99.7763%" y="175.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.14%)</title><rect x="99.5263%" y="149" width="0.1421%" height="15" fill="rgb(221,76,26)" fg:x="2101" fg:w="3"/><text x="99.7763%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.14%)</title><rect x="99.5263%" y="133" width="0.1421%" height="15" fill="rgb(225,139,18)" fg:x="2101" fg:w="3"/><text x="99.7763%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.14%)</title><rect x="99.5263%" y="117" width="0.1421%" height="15" fill="rgb(230,137,11)" fg:x="2101" fg:w="3"/><text x="99.7763%" y="127.50"></text></g><g><title>__libc_start_main (1,796 samples, 85.08%)</title><rect x="14.7797%" y="485" width="85.0782%" height="15" fill="rgb(212,28,1)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="495.50">__libc_start_main</text></g><g><title>main (1,796 samples, 85.08%)</title><rect x="14.7797%" y="469" width="85.0782%" height="15" fill="rgb(248,164,17)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="479.50">main</text></g><g><title>std::rt::lang_start_internal (1,796 samples, 85.08%)</title><rect x="14.7797%" y="453" width="85.0782%" height="15" fill="rgb(222,171,42)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="463.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,796 samples, 85.08%)</title><rect x="14.7797%" y="437" width="85.0782%" height="15" fill="rgb(243,84,45)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="447.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,796 samples, 85.08%)</title><rect x="14.7797%" y="421" width="85.0782%" height="15" fill="rgb(252,49,23)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="431.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,796 samples, 85.08%)</title><rect x="14.7797%" y="405" width="85.0782%" height="15" fill="rgb(215,19,7)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="415.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,796 samples, 85.08%)</title><rect x="14.7797%" y="389" width="85.0782%" height="15" fill="rgb(238,81,41)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="399.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,796 samples, 85.08%)</title><rect x="14.7797%" y="373" width="85.0782%" height="15" fill="rgb(210,199,37)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="383.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,796 samples, 85.08%)</title><rect x="14.7797%" y="357" width="85.0782%" height="15" fill="rgb(244,192,49)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="367.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,796 samples, 85.08%)</title><rect x="14.7797%" y="341" width="85.0782%" height="15" fill="rgb(226,211,11)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="351.50">core::ops::function::FnOnce::call_once</text></g><g><title>rlox::main (1,796 samples, 85.08%)</title><rect x="14.7797%" y="325" width="85.0782%" height="15" fill="rgb(236,162,54)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="335.50">rlox::main</text></g><g><title>rlox::run_file (1,796 samples, 85.08%)</title><rect x="14.7797%" y="309" width="85.0782%" height="15" fill="rgb(220,229,9)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="319.50">rlox::run_file</text></g><g><title>rlox::vm::VM::interpret (1,796 samples, 85.08%)</title><rect x="14.7797%" y="293" width="85.0782%" height="15" fill="rgb(250,87,22)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="303.50">rlox::vm::VM::interpret</text></g><g><title>rlox::vm::VM::interpret::{{closure}} (1,796 samples, 85.08%)</title><rect x="14.7797%" y="277" width="85.0782%" height="15" fill="rgb(239,43,17)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="287.50">rlox::vm::VM::interpret::{{closure}}</text></g><g><title>rlox::vm::VM::run (1,796 samples, 85.08%)</title><rect x="14.7797%" y="261" width="85.0782%" height="15" fill="rgb(231,177,25)" fg:x="312" fg:w="1796"/><text x="15.0297%" y="271.50">rlox::vm::VM::run</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.33%)</title><rect x="99.5263%" y="245" width="0.3316%" height="15" fill="rgb(219,179,1)" fg:x="2101" fg:w="7"/><text x="99.7763%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.33%)</title><rect x="99.5263%" y="229" width="0.3316%" height="15" fill="rgb(238,219,53)" fg:x="2101" fg:w="7"/><text x="99.7763%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (7 samples, 0.33%)</title><rect x="99.5263%" y="213" width="0.3316%" height="15" fill="rgb(232,167,36)" fg:x="2101" fg:w="7"/><text x="99.7763%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.33%)</title><rect x="99.5263%" y="197" width="0.3316%" height="15" fill="rgb(244,19,51)" fg:x="2101" fg:w="7"/><text x="99.7763%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.19%)</title><rect x="99.6684%" y="181" width="0.1895%" height="15" fill="rgb(224,6,22)" fg:x="2104" fg:w="4"/><text x="99.9184%" y="191.50"></text></g><g><title>&lt;string_interner::symbol::SymbolU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.19%)</title><rect x="99.6684%" y="165" width="0.1895%" height="15" fill="rgb(224,145,5)" fg:x="2104" fg:w="4"/><text x="99.9184%" y="175.50"></text></g><g><title>&lt;core::num::nonzero::NonZeroU32 as core::cmp::PartialEq&gt;::eq (4 samples, 0.19%)</title><rect x="99.6684%" y="149" width="0.1895%" height="15" fill="rgb(234,130,49)" fg:x="2104" fg:w="4"/><text x="99.9184%" y="159.50"></text></g><g><title>_start (1,803 samples, 85.41%)</title><rect x="14.5429%" y="501" width="85.4098%" height="15" fill="rgb(254,6,2)" fg:x="307" fg:w="1803"/><text x="14.7929%" y="511.50">_start</text></g><g><title>_dl_start (2 samples, 0.09%)</title><rect x="99.8579%" y="485" width="0.0947%" height="15" fill="rgb(208,96,46)" fg:x="2108" fg:w="2"/><text x="100.1079%" y="495.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.05%)</title><rect x="99.9053%" y="469" width="0.0474%" height="15" fill="rgb(239,3,39)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="479.50"></text></g><g><title>dl_main (1 samples, 0.05%)</title><rect x="99.9053%" y="453" width="0.0474%" height="15" fill="rgb(233,210,1)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="463.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.05%)</title><rect x="99.9053%" y="437" width="0.0474%" height="15" fill="rgb(244,137,37)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="447.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.05%)</title><rect x="99.9053%" y="421" width="0.0474%" height="15" fill="rgb(240,136,2)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="431.50"></text></g><g><title>openaux (1 samples, 0.05%)</title><rect x="99.9053%" y="405" width="0.0474%" height="15" fill="rgb(239,18,37)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="415.50"></text></g><g><title>_dl_map_object (1 samples, 0.05%)</title><rect x="99.9053%" y="389" width="0.0474%" height="15" fill="rgb(218,185,22)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="399.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.05%)</title><rect x="99.9053%" y="373" width="0.0474%" height="15" fill="rgb(225,218,4)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="383.50"></text></g><g><title>memset (1 samples, 0.05%)</title><rect x="99.9053%" y="357" width="0.0474%" height="15" fill="rgb(230,182,32)" fg:x="2109" fg:w="1"/><text x="100.1553%" y="367.50"></text></g><g><title>all (2,111 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(242,56,43)" fg:x="0" fg:w="2111"/><text x="0.2500%" y="543.50"></text></g><g><title>rlox (2,111 samples, 100.00%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(233,99,24)" fg:x="0" fg:w="2111"/><text x="0.2500%" y="527.50">rlox</text></g><g><title>rlox::vm::VM::push (1 samples, 0.05%)</title><rect x="99.9526%" y="501" width="0.0474%" height="15" fill="rgb(234,209,42)" fg:x="2110" fg:w="1"/><text x="100.2026%" y="511.50"></text></g></svg></svg>